/*
_____/\\\\\\\\\________/\\\\\\\\\\\\______________/\\\\\\\\\____/\\\\\\\\\_____
 ___/\\\\\\\\\\\\\____/\\\//////////____________/\\\////////___/\\\///////\\\___
  __/\\\/////////\\\__/\\\_____________________/\\\/___________\/\\\_____\/\\\___
   _\/\\\_______\/\\\_\/\\\____/\\\\\\\________/\\\_____________\/\\\\\\\\\\\/____
    _\/\\\\\\\\\\\\\\\_\/\\\___\/////\\\__/\\\_\/\\\_____________\/\\\//////\\\____
     _\/\\\/////////\\\_\/\\\_______\/\\\_\///__\//\\\____________\/\\\____\//\\\___
      _\/\\\_______\/\\\_\/\\\_______\/\\\________\///\\\__________\/\\\_____\//\\\__
       _\/\\\_______\/\\\_\//\\\\\\\\\\\\/___/\\\____\////\\\\\\\\\_\/\\\______\//\\\_
        _\///________\///___\////////////____\///________\/////////__\///________\///__
*/

#include <a_samp>//Credits to SA:MP dev team
#undef MAX_PLAYERS
#define MAX_PLAYERS 51
#include <YSI\y_ini>//Credits to Y_Less
#include <YSI\y_mouse>//Credits to Y_Less
#include <zcmd>//Credits to ZeeX
#include <sscanf2>//Credits to Y_Less
#include <foreach>//Credits to Y_Less
#include <streamer>//Credits to Incognito
#include <CheckpointManager>//Credits to Jo√£o Pedro Lopes
#include <GetVehicleColor>//Credits to RyDeR`
#include <YSI\y_timers>//Credits to Y_Less
//[----------------------------------------]
//[     Here is all the included files     ]
//[----------------------------------------]
#include "./includes/defines.pwn"
#include "./includes/functions.pwn"
#include "./includes/variables.pwn"
//[----------------------------------------]

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

CreateDynamicDoor(doorid)
{
	new string[128];
	format(string, sizeof(string), "%s\nID: %d",DDoorsInfo[doorid][ddDescription],doorid);

	switch(DDoorsInfo[doorid][ddColor])
	{
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	}

	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: { /* Disable Pickup */ }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
	    }
	}
}

LoadDynamicDoors()
{
	new arrCoords[25][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddFamily] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][dPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][dLocked] = strval(arrCoords[24]);

	  		if(!IsNull(DDoorsInfo[idx][ddDescription]))
	  		{
	  		    CreateDynamicDoor(idx);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

SaveDynamicDoors() {

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddFamily],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][dPass],
	  		DDoorsInfo[iIndex][dLocked]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

enum ACnR_specmode_data
{
	IsSpectating
}
new SpecInfo[MAX_PLAYERS][ACnR_specmode_data];

enum ACnR_gun_saving
{
    gSlot0_gun,
    gSlot0_ammo,
    gSlot1_gun,
    gSlot1_ammo,
    gSlot2_gun,
    gSlot2_ammo,
    gSlot3_gun,
    gSlot3_ammo,
    gSlot4_gun,
    gSlot4_ammo,
    gSlot5_gun,
    gSlot5_ammo,
    gSlot6_gun,
    gSlot6_ammo,
    gSlot7_gun,
    gSlot7_ammo,
    gSlot8_gun,
    gSlot8_ammo,
    gSlot9_gun,
    gSlot9_ammo,
    gSlot10_gun,
    gSlot10_ammo,
    gSlot11_gun,
    gSlot11_ammo,
    gSlot12_gun,
    gSlot12_ammo,
}
new GunInfo[MAX_PLAYERS][ACnR_gun_saving];

enum ACnR_position_saving
{
	Float:rPos_X,
	Float:rPos_Y,
	Float:rPos_Z,
	Float:rPos_A,
	rInterior,
	rWorld,
}
new PosInfo[MAX_PLAYERS][ACnR_position_saving];

enum ACnR_command_timers
{
    CMD_timer1,
    CMD_timer2,
    CMD_timer3,
    CMD_timer4,
    CMD_timer5,
    CMD_timer6,
    CMD_timer7,
    CMD_timer8,
    CMD_timer9,
    CMD_timer10,
    CMD_timer11,
    CMD_timer12,
    CMD_timer13,
    CMD_timer14,
    CMD_timer15,
    CMD_timer16,
    CMD_timer17,
    CMD_timer18,
    CMD_timer19,
    CMD_timer20,
    CMD_timer21,
    CMD_timer22,
    CMD_timer23,
    CMD_timer24,
    CMD_timer25,
    CMD_timer26,
    CMD_timer27,
    CMD_timer28,
    CMD_timer29,
    CMD_timer30,
    CMD_timer31,
    CMD_timer32,
    CMD_timer33,
    CMD_timer34,
    CMD_timer35,
    CMD_timer36,
    CMD_timer37,
    CMD_timer38
}
new TimerInfo[MAX_PLAYERS][ACnR_command_timers];

enum ACnR_degrees
{
    dReal,
    dLaw,
    dDefense,
    dHealth,
    dMechanic,
    dDealer,
    dWeapons,
}
new DegreeInfo[MAX_PLAYERS][ACnR_degrees];

enum ACnR_house
{
    hOwner[24],
    hName[40],
    Float:hCPOutX,
    Float:hCPOutY,
    Float:hCPOutZ,
    Float:hSPOutX,
    Float:hSPOutY,
    Float:hSPOutZ,
    Float:hSPOutA,
    hValue,
    hLock,
    hWorld,
    hSpawnInterior,
    hHouseInterior,
    hQuit,
    hKeyOwner1[24],
    hKeyOwner2[24],
    hKeyOwner3[24],
    hKeyOwner4[24],
    hKeyOwner5[24],
    hKeyOwner6[24],
    hKeyOwner7[24],
    hKeyOwner8[24],
    hKeyOwner9[24],
    hKeyOwner10[24]
}
new HouseInfo[MAX_HOUSES][ACnR_house];

enum ACnR_biz
{
	bName[50],
	bOwner[24],
	bPrice,
	Float:bExtX,
	Float:bExtY,
	Float:bExtZ,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bExtSpwnX,
	Float:bExtSpwnY,
	Float:bExtSpwnZ,
	Float:bExtSpwnA,
	Float:bIntSpwnX,
	Float:bIntSpwnY,
	Float:bIntSpwnZ,
	Float:bIntSpwnA,
	Float:bRobX,
	Float:bRobY,
	Float:bRobZ,
	bInterior,
	bVWorld,
	bEarnings
}
new BizInfo[MAX_BUSINESSES][ACnR_biz];

enum ACnR_vehicle
{
	vModel,
	vColor1,
	vColor2,
	vPrice,
	vOwner[24],
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vPlate[32],
	vPaintJob,
	vLocked,
	vNeons,
	vFuel,
	Float:vHealth
}
new VehicleInfo[MAX_SHOP_VEHICLES][ACnR_vehicle];

enum ACnR_user
{
	pPass[129],
    aLevel,
    vLevel,
    pCash,
    pScore,
    pKills,
    pDeaths,
    pHoldups,
    pCrimes,
    pFined,
    pArrests,
    pTakedowns,
    pTickets,
    pRope,
    pPaintCan,
    pScissors,
    pKits,
    vLock,
    Helper,
    hHelper,
    pWarns,
    pKicks,
    pJoins,
    pMaterials,
    Banned,
    jTime,
    Float:pArmour,
    Float:pHealth,
    pWanted,
    cTime,
    pVirtualWorld,
    pInterior,
    pSkill,
	pCraftSkill,
	pThiefSkill,
	pFoodSkill,
	pStreetSkill,
	pMechSkill,
	pWeaponSkill,
	pMedicSkill,
	pKidnapSkill,
	pRapeSkill,
	pHitmanSkill,
	pWhoreSkill,
	pDrugSkill,
	pPickPktSkill,
	pConArtSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pTreasureSkill,
	pFishSkill,
	pGuardSkill
}
new PlayerInfo[MAX_PLAYERS][ACnR_user];

enum ACnR_bank
{
	Balance,
    Credit,
    Debt,
    Fees,
    Transactions
}
new BankInfo[MAX_PLAYERS][ACnR_bank];

enum ACnR_object
{
    oID,
    oCurrent,
    Float:oX,
    Float:oY,
    Float:oZ,
    Float:oRotX,
    Float:oRotY,
    Float:oRotZ
}
new ObjectInfo[MAX_PLAYERS][ACnR_object];

enum ACnR_groups
{
	grname[75],
	leader,
	active
};
new GroupInfo[MAX_GROUPS][ACnR_groups];

enum gInfo
{
	gid,
	order,
	invited,
	attemptjoin
};
new pGroupInfo[MAX_PLAYERS][gInfo];

enum GetAdminPos
{
	Float:evX,
	Float:evY,
	Float:evZ,
	Float:evA
};
new aPos[GetAdminPos];

enum GetPlayersPos
{
	Float:evX,
	Float:evY,
	Float:evZ,
	Float:evA
};
new pPos[GetPlayersPos];

new GlobalVehicleNames[212][] =//Forgot who made this..Credits to the original developer..
{
	{"Landstalker"},
	{"Bravura"},
	{"Buffalo"},
	{"Linerunner"},
	{"Perrenial"},
	{"Sentinel"},
	{"Dumper"},
	{"Firetruck"},
	{"Trash Master"},
	{"Stretch"},
	{"Manana"},
	{"Infernus"},
	{"Voodoo"},
	{"Pony"},
	{"Mule"},
	{"Cheetah"},
	{"Ambulance"},
	{"Leviathan"},
	{"Moonbeam"},
	{"Esperanto"},
	{"Taxi"},
	{"Washington"},
	{"Bobcat"},
	{"Mr Whoopee"},
	{"BF Injection"},
	{"Hunter"},
	{"Premier"},
	{"Enforcer"},
	{"Securicar"},
	{"Banshee"},
	{"Predator"},
	{"Bus"},
	{"Rhino"},
	{"Barracks"},
	{"Hotknife"},
	{"Trailer 1"},
	{"Previon"},
	{"Coach"},
	{"Cabbie"},
	{"Stallion"},
	{"Rumpo"},
	{"RC Bandit"},
	{"Romero"},
	{"Packer"},
	{"Monster"},
	{"Admiral"},
	{"Squalo"},
	{"Seasparrow"},
	{"Pizzaboy"},
	{"Tram"},
	{"Trailer 2"},
	{"Turismo"},
	{"Speeder"},
	{"Reefer"},
	{"Tropic"},
	{"Flatbed"},
	{"Yankee"},
	{"Caddy"},
	{"Solair"},
	{"Berkley's RC Van"},
	{"Skimmer"},
	{"PCJ-600"},
	{"Faggio"},
	{"Freeway"},
	{"RC Baron"},
	{"RC Raider"},
	{"Glendale"},
	{"Oceanic"},
	{"Sanchez"},
	{"Sparrow"},
	{"Patriot"},
	{"Quad"},
	{"Coastguard"},
	{"Dinghy"},
	{"Hermes"},
	{"Sabre"},
	{"Rustler"},
	{"ZR-350"},
	{"Walton"},
	{"Regina"},
	{"Comet"},
	{"BMX"},
	{"Burrito"},
	{"Camper"},
	{"Marquis"},
	{"Baggage"},
	{"Dozer"},
	{"Maverick"},
	{"News Chopper"},
	{"Rancher"},
	{"FBI Rancher"},
	{"Virgo"},
	{"Greenwood"},
	{"Jetmax"},
	{"Hotring"},
	{"Sandking"},
	{"Blista Compact"},
	{"Police Maverick"},
	{"Boxville"},
	{"Benson"},
	{"Mesa"},
	{"RC Goblin"},
	{"Hotring Racer A"},
	{"Hotring Racer B"},
	{"Bloodring Banger"},
	{"Rancher"},
	{"Super GT"},
	{"Elegant"},
	{"Journey"},
	{"Bike"},
	{"Mountain Bike"},
	{"Beagle"},
	{"Cropdust"},
	{"Stunt Plane"},
	{"Tanker"},
	{"Roadtrain"},
	{"Nebula"},
	{"Majestic"},
	{"Buccaneer"},
	{"Shamal"},
	{"Hydra"},
	{"FCR-900"},
	{"NRG-500"},
	{"HPV1000"},
	{"Cement Truck"},
	{"Tow Truck"},
	{"Fortune"},
	{"Cadrona"},
	{"FBI Truck"},
	{"Willard"},
	{"Forklift"},
	{"Tractor"},
	{"Combine"},
	{"Feltzer"},
	{"Remington"},
	{"Slamvan"},
	{"Blade"},
	{"Freight"},
	{"Streak"},
	{"Vortex"},
	{"Vincent"},
	{"Bullet"},
	{"Clover"},
	{"Sadler"},
	{"Firetruck LA"},
	{"Hustler"},
	{"Intruder"},
	{"Primo"},
	{"Cargobob"},
	{"Tampa"},
	{"Sunrise"},
	{"Merit"},
	{"Utility"},
	{"Nevada"},
	{"Yosemite"},
	{"Windsor"},
	{"Monster A"},
	{"Monster B"},
	{"Uranus"},
	{"Jester"},
	{"Sultan"},
	{"Stratum"},
	{"Elegy"},
	{"Raindance"},
	{"RC Tiger"},
	{"Flash"},
	{"Tahoma"},
	{"Savanna"},
	{"Bandito"},
	{"Freight Flat"},
	{"Streak Carriage"},
	{"Kart"},
	{"Mower"},
	{"Duneride"},
	{"Sweeper"},
	{"Broadway"},
	{"Tornado"},
	{"AT-400"},
	{"DFT-30"},
	{"Huntley"},
	{"Stafford"},
	{"BF-400"},
	{"Newsvan"},
	{"Tug"},
	{"Trailer 3"},
	{"Emperor"},
	{"Wayfarer"},
	{"Euros"},
	{"Hotdog"},
	{"Club"},
	{"Freight Carriage"},
	{"Trailer 3"},
	{"Andromada"},
	{"Dodo"},
	{"RC Cam"},
	{"Launch"},
	{"Police Car (LSPD)"},
	{"Police Car (SFPD)"},
	{"Police Car (LVPD)"},
	{"Police Ranger"},
	{"Picador"},
	{"S.W.A.T. Van"},
	{"Alpha"},
	{"Phoenix"},
	{"Glendale"},
	{"Sadler"},
	{"Luggage Trailer A"},
	{"Luggage Trailer B"},
	{"Stair Trailer"},
	{"Boxville"},
	{"Farm Plow"},
	{"Utility Trailer"}
};

new BannableWeapons[] =
{
    2,//Golf Club
    4,//Knife
    8,//Katana
    16,//Grenades
    17,//Tear Gas
    18,//Molotov Cocktail
    35,//Rocket Launcher
    36,//HS Rocket Launcher
	37,//Flamethrower
	38,//Minigun
	39,//Satchel Charge
	40,//Detonator
	41,//Spraycan
	42,//Fire Extinguisher
	43,//Camera
	44,//Nightvision Goggles
	45//Thermal Goggles
};

new AVehicleModPrices[] =//Credits to Donya
{
    400, // ID 1000, Spoiler Pro                                Certain Transfender cars
    550, // ID 1001, Spoiler Win                                Certain Transfender cars
    200, // ID 1002, Spoiler Drag                               Certain Transfender cars
    250, // ID 1003, Spoiler Alpha                              Certain Transfender cars
    100, // ID 1004, Hood Champ Scoop                           Certain Transfender cars
    150, // ID 1005, Hood Fury Scoop                            Certain Transfender cars
    80, // ID 1006, Roof Roof Scoop                             Certain Transfender cars
    500, // ID 1007, Sideskirt Right Sideskirt                  Certain Transfender cars
    500, // ID 1008, Nitro 5 times                              Most cars, Most planes and Most Helicopters
    200, // ID 1009, Nitro 2 times                              Most cars, Most planes and Most Helicopters
    1000, // ID 1010, Nitro 10 times                            Most cars, Most planes and Most Helicopters
    220, // ID 1011, Hood Race Scoop                            Certain Transfender cars
    250, // ID 1012, Hood Worx Scoop                            Certain Transfender cars
    100, // ID 1013, Lamps Round Fog                            Certain Transfender cars
    400, // ID 1014, Spoiler Champ                              Certain Transfender cars
    500, // ID 1015, Spoiler Race                               Certain Transfender cars
    200, // ID 1016, Spoiler Worx                               Certain Transfender cars
    500, // ID 1017, Sideskirt Left Sideskirt                   Certain Transfender cars
    350, // ID 1018, Exhaust Upswept                            Most cars
    300, // ID 1019, Exhaust Twin                               Most cars
    250, // ID 1020, Exhaust Large                              Most cars
    200, // ID 1021, Exhaust Medium                             Most cars
    150, // ID 1022, Exhaust Small                              Most cars
    350, // ID 1023, Spoiler Fury                               Certain Transfender cars
    50, // ID 1024, Lamps Square Fog                            Certain Transfender cars
    1000, // ID 1025, Wheels Offroad                            Certain Transfender cars
    480, // ID 1026, Sideskirt Right Alien Sideskirt            Sultan
    480, // ID 1027, Sideskirt Left Alien Sideskirt             Sultan
    770, // ID 1028, Exhaust Alien                              Sultan
    680, // ID 1029, Exhaust X-Flow                             Sultan
    370, // ID 1030, Sideskirt Left X-Flow Sideskirt            Sultan
    370, // ID 1031, Sideskirt Right X-Flow Sideskirt           Sultan
    170, // ID 1032, Roof Alien Roof Vent                       Sultan
    120, // ID 1033, Roof X-Flow Roof Vent                      Sultan
    790, // ID 1034, Exhaust Alien                              Elegy
    150, // ID 1035, Roof X-Flow Roof Vent                      Elegy
    500, // ID 1036, SideSkirt Right Alien Sideskirt            Elegy
    690, // ID 1037, Exhaust X-Flow                             Elegy
    190, // ID 1038, Roof Alien Roof Vent                       Elegy
    390, // ID 1039, SideSkirt Right X-Flow Sideskirt           Elegy
    500, // ID 1040, SideSkirt Left Alien Sideskirt             Elegy
    390, // ID 1041, SideSkirt Right X-Flow Sideskirt           Elegy
    1000, // ID 1042, SideSkirt Right Chrome Sideskirt          Broadway
    500, // ID 1043, Exhaust Slamin                             Broadway
    500, // ID 1044, Exhaust Chrome                             Broadway
    510, // ID 1045, Exhaust X-Flow                             Flash
    710, // ID 1046, Exhaust Alien                              Flash
    670, // ID 1047, SideSkirt Right Alien Sideskirt            Flash
    530, // ID 1048, SideSkirt Right X-Flow Sideskirt           Flash
    810, // ID 1049, Spoiler Alien                              Flash
    620, // ID 1050, Spoiler X-Flow                             Flash
    670, // ID 1051, SideSkirt Left Alien Sideskirt             Flash
    530, // ID 1052, SideSkirt Left X-Flow Sideskirt            Flash
    130, // ID 1053, Roof X-Flow                                Flash
    210, // ID 1054, Roof Alien                                 Flash
    230, // ID 1055, Roof Alien                                 Stratum
    520, // ID 1056, Sideskirt Right Alien Sideskirt            Stratum
    430, // ID 1057, Sideskirt Right X-Flow Sideskirt           Stratum
    620, // ID 1058, Spoiler Alien                              Stratum
    720, // ID 1059, Exhaust X-Flow                             Stratum
    530, // ID 1060, Spoiler X-Flow                             Stratum
    180, // ID 1061, Roof X-Flow                                Stratum
    520, // ID 1062, Sideskirt Left Alien Sideskirt             Stratum
    430, // ID 1063, Sideskirt Left X-Flow Sideskirt            Stratum
    830, // ID 1064, Exhaust Alien                              Stratum
    850, // ID 1065, Exhaust Alien                              Jester
    750, // ID 1066, Exhaust X-Flow                             Jester
    250, // ID 1067, Roof Alien                                 Jester
    200, // ID 1068, Roof X-Flow                                Jester
    550, // ID 1069, Sideskirt Right Alien Sideskirt            Jester
    450, // ID 1070, Sideskirt Right X-Flow Sideskirt           Jester
    550, // ID 1071, Sideskirt Left Alien Sideskirt             Jester
    450, // ID 1072, Sideskirt Left X-Flow Sideskirt            Jester
    1100, // ID 1073, Wheels Shadow                             Most cars
    1030, // ID 1074, Wheels Mega                               Most cars
    980, // ID 1075, Wheels Rimshine                            Most cars
    1560, // ID 1076, Wheels Wires                              Most cars
    1620, // ID 1077, Wheels Classic                            Most cars
    1200, // ID 1078, Wheels Twist                              Most cars
    1030, // ID 1079, Wheels Cutter                             Most cars
    900, // ID 1080, Wheels Switch                              Most cars
    1230, // ID 1081, Wheels Grove                              Most cars
    820, // ID 1082, Wheels Import                              Most cars
    1560, // ID 1083, Wheels Dollar                             Most cars
    1350, // ID 1084, Wheels Trance                             Most cars
    770, // ID 1085, Wheels Atomic                              Most cars
    100, // ID 1086, Stereo Stereo                              Most cars
    1500, // ID 1087, Hydraulics Hydraulics                     Most cars
    150, // ID 1088, Roof Alien                                 Uranus
    650, // ID 1089, Exhaust X-Flow                             Uranus
    450, // ID 1090, Sideskirt Right Alien Sideskirt            Uranus
    100, // ID 1091, Roof X-Flow                                Uranus
    750, // ID 1092, Exhaust Alien                              Uranus
    350, // ID 1093, Sideskirt Right X-Flow Sideskirt           Uranus
    450, // ID 1094, Sideskirt Left Alien Sideskirt             Uranus
    350, // ID 1095, Sideskirt Right X-Flow Sideskirt           Uranus
    1000, // ID 1096, Wheels Ahab                               Most cars
    620, // ID 1097, Wheels Virtual                             Most cars
    1140, // ID 1098, Wheels Access                             Most cars
    1000, // ID 1099, Sideskirt Left Chrome Sideskirt           Broadway
    940, // ID 1100, Bullbar Chrome Grill                       Remington
    780, // ID 1101, Sideskirt Left `Chrome Flames` Sideskirt   Remington
    830, // ID 1102, Sideskirt Left `Chrome Strip` Sideskirt    Savanna
    3250, // ID 1103, Roof Convertible                          Blade
    1610, // ID 1104, Exhaust Chrome                            Blade
    1540, // ID 1105, Exhaust Slamin                            Blade
    780, // ID 1106, Sideskirt Right `Chrome Arches`            Remington
    780, // ID 1107, Sideskirt Left `Chrome Strip` Sideskirt    Blade
    780, // ID 1108, Sideskirt Right `Chrome Strip` Sideskirt   Blade
    1610, // ID 1109, Rear Bullbars Chrome                      Slamvan
    1540, // ID 1110, Rear Bullbars Slamin                      Slamvan
    55, // ID 1111, Front Sign? Little Sign?                    Slamvan         ???
    55, // ID 1112, Front Sign? Little Sign?                    Slamvan         ???
    3340, // ID 1113, Exhaust Chrome                            Slamvan
    3250, // ID 1114, Exhaust Slamin                            Slamvan
    2130, // ID 1115, Front Bullbars Chrome                     Slamvan
    2050, // ID 1116, Front Bullbars Slamin                     Slamvan
    2040, // ID 1117, Front Bumper Chrome                       Slamvan
    780, // ID 1118, Sideskirt Right `Chrome Trim` Sideskirt    Slamvan
    940, // ID 1119, Sideskirt Right `Wheelcovers` Sideskirt    Slamvan
    780, // ID 1120, Sideskirt Left `Chrome Trim` Sideskirt     Slamvan
    940, // ID 1121, Sideskirt Left `Wheelcovers` Sideskirt     Slamvan
    780, // ID 1122, Sideskirt Right `Chrome Flames` Sideskirt  Remington
    860, // ID 1123, Bullbars Bullbar Chrome Bars               Remington
    780, // ID 1124, Sideskirt Left `Chrome Arches` Sideskirt   Remington
    1120, // ID 1125, Bullbars Bullbar Chrome Lights            Remington
    3340, // ID 1126, Exhaust Chrome Exhaust                    Remington
    3250, // ID 1127, Exhaust Slamin Exhaust                    Remington
    3340, // ID 1128, Roof Vinyl Hardtop                        Blade
    1650, // ID 1129, Exhaust Chrome                            Savanna
    3380, // ID 1130, Roof Hardtop                              Savanna
    3290, // ID 1131, Roof Softtop                              Savanna
    1590, // ID 1132, Exhaust Slamin                            Savanna
    830, // ID 1133, Sideskirt Right `Chrome Strip` Sideskirt   Savanna
    800, // ID 1134, SideSkirt Right `Chrome Strip` Sideskirt   Tornado
    1500, // ID 1135, Exhaust Slamin                            Tornado
    1000, // ID 1136, Exhaust Chrome                            Tornado
    800, // ID 1137, Sideskirt Left `Chrome Strip` Sideskirt    Tornado
    580, // ID 1138, Spoiler Alien                              Sultan
    470, // ID 1139, Spoiler X-Flow                             Sultan
    870, // ID 1140, Rear Bumper X-Flow                         Sultan
    980, // ID 1141, Rear Bumper Alien                          Sultan
    150, // ID 1142, Vents Left Oval Vents                      Certain Transfender Cars
    150, // ID 1143, Vents Right Oval Vents                     Certain Transfender Cars
    100, // ID 1144, Vents Left Square Vents                    Certain Transfender Cars
    100, // ID 1145, Vents Right Square Vents                   Certain Transfender Cars
    490, // ID 1146, Spoiler X-Flow                             Elegy
    600, // ID 1147, Spoiler Alien                              Elegy
    890, // ID 1148, Rear Bumper X-Flow                         Elegy
    1000, // ID 1149, Rear Bumper Alien                         Elegy
    1090, // ID 1150, Rear Bumper Alien                         Flash
    840, // ID 1151, Rear Bumper X-Flow                         Flash
    910, // ID 1152, Front Bumper X-Flow                        Flash
    1200, // ID 1153, Front Bumper Alien                        Flash
    1030, // ID 1154, Rear Bumper Alien                         Stratum
    1030, // ID 1155, Front Bumper Alien                        Stratum
    920, // ID 1156, Rear Bumper X-Flow                         Stratum
    930, // ID 1157, Front Bumper X-Flow                        Stratum
    550, // ID 1158, Spoiler X-Flow                             Jester
    1050, // ID 1159, Rear Bumper Alien                         Jester
    1050, // ID 1160, Front Bumper Alien                        Jester
    950, // ID 1161, Rear Bumper X-Flow                         Jester
    650, // ID 1162, Spoiler Alien                              Jester
    450, // ID 1163, Spoiler X-Flow                             Uranus
    550, // ID 1164, Spoiler Alien                              Uranus
    850, // ID 1165, Front Bumper X-Flow                        Uranus
    950, // ID 1166, Front Bumper Alien                         Uranus
    850, // ID 1167, Rear Bumper X-Flow                         Uranus
    950, // ID 1168, Rear Bumper Alien                          Uranus
    970, // ID 1169, Front Bumper Alien                         Sultan
    880, // ID 1170, Front Bumper X-Flow                        Sultan
    990, // ID 1171, Front Bumper Alien                         Elegy
    900, // ID 1172, Front Bumper X-Flow                        Elegy
    950, // ID 1173, Front Bumper X-Flow                        Jester
    1000, // ID 1174, Front Bumper Chrome                       Broadway
    900, // ID 1175, Front Bumper Slamin                        Broadway
    1000, // ID 1176, Rear Bumper Chrome                        Broadway
    900, // ID 1177, Rear Bumper Slamin                         Broadway
    2050, // ID 1178, Rear Bumper Slamin                        Remington
    2150, // ID 1179, Front Bumper Chrome                       Remington
    2130, // ID 1180, Rear Bumper Chrome                        Remington
    2050, // ID 1181, Front Bumper Slamin                       Blade
    2130, // ID 1182, Front Bumper Chrome                       Blade
    2040, // ID 1183, Rear Bumper Slamin                        Blade
    2150, // ID 1184, Rear Bumper Chrome                        Blade
    2040, // ID 1185, Front Bumper Slamin                       Remington
    2095, // ID 1186, Rear Bumper Slamin                        Savanna
    2175, // ID 1187, Rear Bumper Chrome                        Savanna
    2080, // ID 1188, Front Bumper Slamin                       Savanna
    2200, // ID 1189, Front Bumper Chrome                       Savanna
    1200, // ID 1190, Front Bumper Slamin                       Tornado
    1040, // ID 1191, Front Bumper Chrome                       Tornado
    940, // ID 1192, Rear Bumper Chrome                         Tornado
    1100, // ID 1193 Rear Bumper Slamin                         Tornado
};

new Float:CopSpawns[3][4] =
{
	{2268.0537,2445.0354,3.2734,181.3522},
	{2268.1650,2444.9575,-7.4531,180.5292},
	{2293.4761,2451.6462,10.8203,88.6331}
};

new Float:CIASpawns[2][4] =
{
	{941.1046,1736.1487,8.8516,270.8704},
	{941.1307,1730.2427,8.8516,269.5543}
};

new Float:FBISpawns[2][4] =
{
	{2487.7542,2397.2356,10.8203,90.4967},
	{2487.7480,2397.2407,4.2109,88.0134}
};

new Float:ArmySpawns[3][4] =
{
	{285.4526,2035.0264,17.6406,178.6992},
	{285.6859,2000.1420,17.6406,178.6993},
	{285.4151,1966.1923,17.6406,177.3832}
};

new Float:CivSpawns[4][4] =
{
	{2325.8777,2337.3208,10.8203,5.6401},
	{2106.3457,2199.4788,10.8203,269.2403},
	{2198.7742,1968.1080,10.8203,91.4318},
	{2124.3691,1454.2067,10.8203,180.0200}
};

new Float:MedicSpawns[2][4] =
{
	{1614.6974,1817.9830,10.8203,0.7182},
	{1599.6218,1818.3469,10.8203,1.1569}
};

new ACnR_Elvis_Mainchat_Messages[][] =
{
    "[BOT]Elvis: There are houses and busineses all over Las Venturas which you can buy with in-game money.",
    "[BOT]Elvis: You can buy personal vehicles at Las Venturas Motors located near the hospital/airport.",
    "[BOT]Elvis: You can purchase Master Degrees from Las Venturas University at Las Venturas Square.",
    "[BOT]Elvis: Need help? Use /help and /faqs, use /(n)ew or /askadmin for assistance.",
    "[BOT]Elvis: Hi, im the ACnR BOT, find me at Las Venturas Square.",
    "[BOT]Elvis: Have you registered at our forum community? Forum: acnr.hostoi.com",
    "[BOT]Elvis: Donate today for epic features, items and more! acnr.hostoi.com/donate",
    "[BOT]Elvis: Only at Vegas baby!",
    "[BOT]Elvis: Welcome to the one and only Las Venturas Cops And Robbers aka ACnR.",
    "[BOT]Elvis: Please read /rules, /pc and /faqs regularly, as they may change randomly.",
    "[BOT]Elvis: What happens at Vegas...Stays at Vegas...",
    "[BOT]Elvis: Spotted a player hacking/cheating/breaking rules? Use /report [playerid] [reason]",
    "[BOT]Elvis: Thank you, thank you very much!"
};

enum ZoneInfo
{
	zone_name[47],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

new Float:ZoneNames[][ZoneInfo] =
{
    //{ "Las Payasados",           -257.0741, 2701.3240, 0.5351,  -257.0741, 2701.3240, 500.5000},//
    { "The Las Venturas Strip(North)",           2078.8538,  1306.0410,    9.0203,  2114.8035, 1364.4226,   500.5000},
    { "Las Venturas FBI HQ",           2447.6692,2376.2556,12.1635,  2487.7480,2397.2407,4.2109},
    { "Las Venturas MultiStory",       	 2257.6921,  1383.5364,    9.0203,  2357.7520, 1523.2224,   500.5000},
    { "Las Venturas Pyramid",       	     2237.4563,  1205.2041,    9.0203,  2416.4814, 1362.8427,   500.5000},
    { "Las Venturas City Hall",       	 2354.4023,  1079.9636,    9.0203,  2420.8870, 1186.4084,   500.5000},
    { "Las Venturas Transfender",       	 2352.2302,  956.4175,    9.0203,  2421.1843, 1066.9310,   500.5000},
    { "Four Dragons Casino",     1878.7661,  970.0151,    9.0203,  2035.9320, 1082.8287,   500.5000},
    { "The Las Venturas Strip(South)",       2037.4653,  863.7079,    4.0203,  2076.8149, 1702.8253,   500.5000},
    { "Caligulas Casino",        2087.7002,  1543.7769,   9.8203,  2317.1528, 1763.7645,   500.5000},
    { "LVPD",                 2234.2024, 2419.3340,    -8.4531,  2360.7454,  2507.3718,   500.5000},
    { "The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
    { "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
    { "Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
    { "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
    { "Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
    { "Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
    { "Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
    { "Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
    { "Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
    { "Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
    { "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
    { "Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
    { "Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
    { "Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
    { "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
    { "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
    { "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
    { "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
    { "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
    { "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
    { "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
    { "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
    { "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
    { " ",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
    { "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
    { "Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
    { "Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
    { "Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
    { "Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
    { "Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
    { "Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
    { "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
    { "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
    { "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
    { "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
    { "Las Venturas Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
    { "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
    { "Las Venturas Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
    { "Las Venturas Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
    { "Las Venturas Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
    { "Las Venturas Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
    { "Las Venturas Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
    { "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
    { "Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
    { "Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
    { "Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
    { "Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
    { "LVPD (Interior)",         228.8148,  140.0497,   1003.0000,  248.7047,  169.0779,    1003.0400},
    { "LVPD (Interior)",         188.3310,  156.6014,   1003.0000,  203.9910,  180.7771,    1003.0400},
    { "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
    { "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
    { "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
    { "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
    { "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
    { "Old Vegas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
    { "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
    { "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
    { "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
    { "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
    { "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
    { "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
    { "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
    { "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
    { "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
    { "Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
    { "Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
    { "Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
    { "Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
    { "Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
    { "Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
    { "Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
    { "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
    { "Las Venturas Square",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
    { "Las Venturas Square",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
    { "Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
    { "Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
    { "Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
    { "Las Venturas Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
    { "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
    { "The Las Venturas Strip(North)",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
    { "Las Venturas Casino",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
    { "Las Venturas Casino",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
    { "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
    { "Blackfield",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
    { "Blackfield",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
    { "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
    { "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
    { "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00}
};

WasteDeAMXersTime()//Credits to Mauzen
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

TimeConvert(time) {
	new jhour;
    new jmin;
	new jdiv;
    new jsec;
    new string[128];
	if(time > 3599){
		jhour = floatround(time / (60*60));
		jdiv = floatround(time % (60*60));
        jmin = floatround(jdiv / 60, floatround_floor);
        jsec = floatround(jdiv % 60, floatround_ceil);
        format(string,sizeof(string),"%02d:%02d:%02d",jhour,jmin,jsec);
    }
    else if(time > 59 && time < 3600){
        jmin = floatround(time/60);
        jsec = floatround(time - jmin*60);
        format(string,sizeof(string),"%02d:%02d",jmin,jsec);
    }
    else{
        jsec = floatround(time);
        format(string,sizeof(string),"%02d seconds",jsec);
    }
    return string;
}

Vehicle_Armor(iVehicleID) {
	switch(GetVehicleModel(iVehicleID)) {
		case 596, 597, 598: SetVehicleHealth(iVehicleID, 2000.0);
		case 490: SetVehicleHealth(iVehicleID, 2500.0);
		case 407, 470: SetVehicleHealth(iVehicleID, 3000.0);
		case 428, 433, 447, 427: SetVehicleHealth(iVehicleID, 4000.0);
		case 601, 528: SetVehicleHealth(iVehicleID, 5000.0);
		case 432, 425: SetVehicleHealth(iVehicleID, 7500.0);
	}
}

forward KickDelay(playerid);
public KickDelay(playerid) return Kick(playerid);

stock KickEx(playerid){
     SetTimerEx("KickDelay", 300, false, "i", playerid);
}

stock SetPlayerArmor(Player, Float:Armor)
{
	CurrentArmor[Player] = floatround(Armor, floatround_ceil);
	SetPlayerArmour(Player, Armor);
	return 1;
}

stock CreateCMDMenu(playerid)
{
	CmdMenuTD[0] = CreatePlayerTextDraw(playerid, 20.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[0], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[0], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[0], 0.500000, 25.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[0], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[0], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[0], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[0], 1);
	PlayerTextDrawUseBox(playerid, CmdMenuTD[0], 1);
	PlayerTextDrawBoxColor(playerid, CmdMenuTD[0], 170);
	PlayerTextDrawTextSize(playerid, CmdMenuTD[0], 230.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[0], 0);

	CmdMenuTD[1] = CreatePlayerTextDraw(playerid, 20.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[1], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[1], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[1], 0.500000, 25.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[1], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[1], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[1], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[1], 1);
	PlayerTextDrawUseBox(playerid, CmdMenuTD[1], 1);
	PlayerTextDrawBoxColor(playerid, CmdMenuTD[1], 16711935);
	PlayerTextDrawTextSize(playerid, CmdMenuTD[1], 20.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[1], 0);

	CmdMenuTD[2] = CreatePlayerTextDraw(playerid, 230.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[2], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[2], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[2], 0.500000, 25.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[2], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[2], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[2], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[2], 1);
	PlayerTextDrawUseBox(playerid, CmdMenuTD[2], 1);
	PlayerTextDrawBoxColor(playerid, CmdMenuTD[2], 16711935);
	PlayerTextDrawTextSize(playerid, CmdMenuTD[2], 230.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[2], 0);

	CmdMenuTD[3] = CreatePlayerTextDraw(playerid, 20.000000, 340.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[3], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[3], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[3], 0.500000, 2.099999);
	PlayerTextDrawColor(playerid, CmdMenuTD[3], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[3], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[3], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[3], 1);
	PlayerTextDrawUseBox(playerid, CmdMenuTD[3], 1);
	PlayerTextDrawBoxColor(playerid, CmdMenuTD[3], 16711935);
	PlayerTextDrawTextSize(playerid, CmdMenuTD[3], 230.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[3], 0);

	CmdMenuTD[4] = CreatePlayerTextDraw(playerid, 20.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[4], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[4], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[4], 0.500000, 2.099998);
	PlayerTextDrawColor(playerid, CmdMenuTD[4], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[4], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[4], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[4], 1);
	PlayerTextDrawUseBox(playerid, CmdMenuTD[4], 1);
	PlayerTextDrawBoxColor(playerid, CmdMenuTD[4], 16711935);
	PlayerTextDrawTextSize(playerid, CmdMenuTD[4], 230.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[4], 0);

	CmdMenuTD[5] = CreatePlayerTextDraw(playerid, 21.000000, 108.000000, "Atlantis Cops and Robbers");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[5], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[5], 0);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[5], 0.670000, 2.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[5], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[5], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[5], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[5], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[5], 0);

	CmdMenuTD[6] = CreatePlayerTextDraw(playerid, 28.000000, 134.000000, "1.) /cmd1 - Command line one");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[6], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[6], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[6], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[6], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[6], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[6], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[6], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[6], 0);

	CmdMenuTD[7] = CreatePlayerTextDraw(playerid, 28.000000, 143.000000, "2.) /cmd2 - Command line two");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[7], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[7], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[7], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[7], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[7], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[7], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[7], 0);

	CmdMenuTD[8] = CreatePlayerTextDraw(playerid, 28.000000, 153.000000, "3.) /cmd3 - Command line three");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[8], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[8], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[8], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[8], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[8], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[8], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[8], 0);

	CmdMenuTD[9] = CreatePlayerTextDraw(playerid, 28.000000, 163.000000, "4.) /cmd4 - Command line four");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[9], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[9], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[9], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[9], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[9], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[9], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[9], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[9], 0);

	CmdMenuTD[10] = CreatePlayerTextDraw(playerid, 28.000000, 173.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[10], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[10], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[10], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[10], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[10], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[10], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[10], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[10], 0);

	CmdMenuTD[11] = CreatePlayerTextDraw(playerid, 28.000000, 183.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[11], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[11], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[11], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[11], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[11], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[11], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[11], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[11], 0);

	CmdMenuTD[12] = CreatePlayerTextDraw(playerid, 28.000000, 193.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[12], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[12], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[12], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[12], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[12], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[12], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[12], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[12], 0);

	CmdMenuTD[13] = CreatePlayerTextDraw(playerid, 28.000000, 203.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[13], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[13], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[13], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[13], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[13], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[13], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[13], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[13], 0);

	CmdMenuTD[14] = CreatePlayerTextDraw(playerid, 28.000000, 213.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[14], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[14], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[14], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[14], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[14], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[14], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[14], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[14], 0);

	CmdMenuTD[15] = CreatePlayerTextDraw(playerid, 28.000000, 223.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[15], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[15], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[15], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[15], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[15], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[15], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[15], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[15], 0);

	CmdMenuTD[16] = CreatePlayerTextDraw(playerid, 28.000000, 233.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[16], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[16], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[16], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[16], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[16], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[16], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[16], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[16], 0);

	CmdMenuTD[17] = CreatePlayerTextDraw(playerid, 28.000000, 243.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[17], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[17], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[17], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[17], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[17], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[17], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[17], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[17], 0);

	CmdMenuTD[18] = CreatePlayerTextDraw(playerid, 28.000000, 253.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[18], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[18], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[18], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[18], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[18], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[18], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[18], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[18], 0);

	CmdMenuTD[19] = CreatePlayerTextDraw(playerid, 28.000000, 263.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[19], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[19], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[19], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[19], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[19], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[19], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[19], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[19], 0);

	CmdMenuTD[20] = CreatePlayerTextDraw(playerid, 28.000000, 273.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[20], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[20], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[20], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[20], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[20], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[20], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[20], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[20], 0);

	CmdMenuTD[21] = CreatePlayerTextDraw(playerid, 28.000000, 283.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[21], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[21], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[21], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[21], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[21], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[21], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[21], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[21], 0);

	CmdMenuTD[22] = CreatePlayerTextDraw(playerid, 28.000000, 293.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[22], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[22], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[22], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[22], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[22], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[22], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[22], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[22], 0);

	CmdMenuTD[23] = CreatePlayerTextDraw(playerid, 28.000000, 303.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[23], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[23], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[23], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[23], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[23], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[23], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[23], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[23], 0);

	CmdMenuTD[24] = CreatePlayerTextDraw(playerid, 28.000000, 313.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[24], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[24], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[24], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[24], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[24], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[24], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[24], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[24], 0);

	CmdMenuTD[25] = CreatePlayerTextDraw(playerid, 28.000000, 323.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[25], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[25], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[25], 0.209999, 1.100000);
	PlayerTextDrawColor(playerid, CmdMenuTD[25], -1);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[25], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[25], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[25], 1);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[25], 0);

	CmdMenuTD[26] = CreatePlayerTextDraw(playerid, 22.000000, 338.000000, "Press F6 or 'T' to select a number");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[26], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[26], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[26], 0.350000, 1.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[26], 255);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[26], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[26], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[26], 0);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[26], 0);

	CmdMenuTD[27] = CreatePlayerTextDraw(playerid, 22.000000, 348.000000, "Don't worry, no one else will see what you type.");
	PlayerTextDrawBackgroundColor(playerid, CmdMenuTD[27], 255);
	PlayerTextDrawFont(playerid, CmdMenuTD[27], 1);
	PlayerTextDrawLetterSize(playerid, CmdMenuTD[27], 0.250000, 1.000000);
	PlayerTextDrawColor(playerid, CmdMenuTD[27], 255);
	PlayerTextDrawSetOutline(playerid, CmdMenuTD[27], 0);
	PlayerTextDrawSetProportional(playerid, CmdMenuTD[27], 1);
	PlayerTextDrawSetShadow(playerid, CmdMenuTD[27], 0);
	PlayerTextDrawSetSelectable(playerid, CmdMenuTD[27], 0);
	return 1;
}

stock CreateMissionTD(playerid)
{
	MissionTD[0] = CreatePlayerTextDraw(playerid, 500.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[0], 255);
	PlayerTextDrawFont(playerid, MissionTD[0], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[0], 0.500000, 13.000000);
	PlayerTextDrawColor(playerid, MissionTD[0], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[0], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[0], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[0], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[0], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[0], 425);
	PlayerTextDrawTextSize(playerid, MissionTD[0], 605.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[0], 0);

	MissionTD[1] = CreatePlayerTextDraw(playerid, 507.000000, 102.000000, "Missions");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[1], 255);
	PlayerTextDrawFont(playerid, MissionTD[1], 0);
	PlayerTextDrawLetterSize(playerid, MissionTD[1], 0.419999, 1.000000);
	PlayerTextDrawColor(playerid, MissionTD[1], 16711935);
	PlayerTextDrawSetOutline(playerid, MissionTD[1], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[1], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[1], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[1], 0);

	MissionTD[2] = CreatePlayerTextDraw(playerid, 498.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[2], 255);
	PlayerTextDrawFont(playerid, MissionTD[2], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[2], 0.500000, -0.300000);
	PlayerTextDrawColor(playerid, MissionTD[2], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[2], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[2], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[2], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[2], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[2], 65535);
	PlayerTextDrawTextSize(playerid, MissionTD[2], 502.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[2], 0);

	MissionTD[3] = CreatePlayerTextDraw(playerid, 556.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[3], 255);
	PlayerTextDrawFont(playerid, MissionTD[3], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[3], 0.500000, -0.300000);
	PlayerTextDrawColor(playerid, MissionTD[3], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[3], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[3], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[3], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[3], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[3], 65535);
	PlayerTextDrawTextSize(playerid, MissionTD[3], 605.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[3], 0);

	MissionTD[4] = CreatePlayerTextDraw(playerid, 500.000000, 232.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[4], 255);
	PlayerTextDrawFont(playerid, MissionTD[4], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[4], 0.500000, -0.300000);
	PlayerTextDrawColor(playerid, MissionTD[4], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[4], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[4], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[4], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[4], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[4], 65535);
	PlayerTextDrawTextSize(playerid, MissionTD[4], 605.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[4], 0);

	MissionTD[5] = CreatePlayerTextDraw(playerid, 498.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[5], 255);
	PlayerTextDrawFont(playerid, MissionTD[5], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[5], 0.500000, 13.299998);
	PlayerTextDrawColor(playerid, MissionTD[5], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[5], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[5], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[5], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[5], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[5], 65535);
	PlayerTextDrawTextSize(playerid, MissionTD[5], 495.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[5], 0);

	MissionTD[6] = CreatePlayerTextDraw(playerid, 610.000000, 110.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[6], 255);
	PlayerTextDrawFont(playerid, MissionTD[6], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[6], 0.500000, 13.299998);
	PlayerTextDrawColor(playerid, MissionTD[6], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[6], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[6], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[6], 1);
	PlayerTextDrawUseBox(playerid, MissionTD[6], 1);
	PlayerTextDrawBoxColor(playerid, MissionTD[6], 65535);
	PlayerTextDrawTextSize(playerid, MissionTD[6], 607.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, MissionTD[6], 0);

	MissionTD[7] = CreatePlayerTextDraw(playerid, 500.000000, 114.000000, "Mission 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[7], 255);
	PlayerTextDrawFont(playerid, MissionTD[7], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[7], 0.220000, 0.899999);
	PlayerTextDrawColor(playerid, MissionTD[7], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[7], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[7], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[7], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[7], 0);

	MissionTD[8] = CreatePlayerTextDraw(playerid, 500.000000, 121.000000, "Mission 1 Text, Line 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[8], 255);
	PlayerTextDrawFont(playerid, MissionTD[8], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[8], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[8], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[8], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[8], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[8], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[8], 0);

	MissionTD[9] = CreatePlayerTextDraw(playerid, 500.000000, 128.000000, "Mission 1 Text, Line 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[9], 255);
	PlayerTextDrawFont(playerid, MissionTD[9], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[9], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[9], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[9], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[9], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[9], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[9], 0);

	MissionTD[10] = CreatePlayerTextDraw(playerid, 500.000000, 137.000000, "Mission 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[10], 255);
	PlayerTextDrawFont(playerid, MissionTD[10], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[10], 0.220000, 0.899999);
	PlayerTextDrawColor(playerid, MissionTD[10], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[10], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[10], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[10], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[10], 0);

	MissionTD[11] = CreatePlayerTextDraw(playerid, 500.000000, 144.000000, "Mission 2 Text, Line 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[11], 255);
	PlayerTextDrawFont(playerid, MissionTD[11], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[11], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[11], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[11], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[11], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[11], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[11], 0);

	MissionTD[12] = CreatePlayerTextDraw(playerid, 500.000000, 151.000000, "Mission 2 Text, Line 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[12], 255);
	PlayerTextDrawFont(playerid, MissionTD[12], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[12], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[12], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[12], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[12], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[12], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[12], 0);

	MissionTD[13] = CreatePlayerTextDraw(playerid, 500.000000, 160.000000, "Mission 3");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[13], 255);
	PlayerTextDrawFont(playerid, MissionTD[13], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[13], 0.220000, 0.899999);
	PlayerTextDrawColor(playerid, MissionTD[13], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[13], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[13], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[13], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[13], 0);

	MissionTD[14] = CreatePlayerTextDraw(playerid, 500.000000, 167.000000, "Mission 3 Text, Line 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[14], 255);
	PlayerTextDrawFont(playerid, MissionTD[14], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[14], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[14], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[14], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[14], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[14], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[14], 0);

	MissionTD[15] = CreatePlayerTextDraw(playerid, 500.000000, 174.000000, "Mission 3 Text, Line 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[15], 255);
	PlayerTextDrawFont(playerid, MissionTD[15], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[15], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[15], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[15], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[15], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[15], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[15], 0);

	MissionTD[16] = CreatePlayerTextDraw(playerid, 500.000000, 183.000000, "Mission 4");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[16], 255);
	PlayerTextDrawFont(playerid, MissionTD[16], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[16], 0.220000, 0.899999);
	PlayerTextDrawColor(playerid, MissionTD[16], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[16], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[16], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[16], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[16], 0);

	MissionTD[17] = CreatePlayerTextDraw(playerid, 500.000000, 190.000000, "Mission 4 Text, Line 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[17], 255);
	PlayerTextDrawFont(playerid, MissionTD[17], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[17], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[17], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[17], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[17], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[17], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[17], 0);

	MissionTD[18] = CreatePlayerTextDraw(playerid, 500.000000, 197.000000, "Mission 4 Text, Line 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[18], 255);
	PlayerTextDrawFont(playerid, MissionTD[18], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[18], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[18], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[18], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[18], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[18], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[18], 0);

	MissionTD[19] = CreatePlayerTextDraw(playerid, 500.000000, 206.000000, "Mission 5");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[19], 255);
	PlayerTextDrawFont(playerid, MissionTD[19], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[19], 0.220000, 0.899999);
	PlayerTextDrawColor(playerid, MissionTD[19], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[19], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[19], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[19], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[19], 0);

	MissionTD[20] = CreatePlayerTextDraw(playerid, 500.000000, 213.000000, "Mission 5 Text, Line 1");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[20], 255);
	PlayerTextDrawFont(playerid, MissionTD[20], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[20], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[20], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[20], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[20], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[20], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[20], 0);

	MissionTD[21] = CreatePlayerTextDraw(playerid, 500.000000, 220.000000, "Mission 5 Text, Line 2");
	PlayerTextDrawBackgroundColor(playerid, MissionTD[21], 255);
	PlayerTextDrawFont(playerid, MissionTD[21], 1);
	PlayerTextDrawLetterSize(playerid, MissionTD[21], 0.180000, 0.799999);
	PlayerTextDrawColor(playerid, MissionTD[21], -1);
	PlayerTextDrawSetOutline(playerid, MissionTD[21], 0);
	PlayerTextDrawSetProportional(playerid, MissionTD[21], 1);
	PlayerTextDrawSetShadow(playerid, MissionTD[21], 1);
	PlayerTextDrawSetSelectable(playerid, MissionTD[21], 0);
	return 1;
}

stock UpdateMissionGUI(playerid, title[], line1[], line2[], mission)
{
	new string[128];
	switch(mission)
	{
		case 1:
		{
			//Mission 1
			format(string, sizeof(string), "%s", title);
			PlayerTextDrawSetString(playerid, MissionTD[7], string);
			format(string, sizeof(string), "%s", line1);
			PlayerTextDrawSetString(playerid, MissionTD[8], string);
			format(string, sizeof(string), "%s", line2);
			PlayerTextDrawSetString(playerid, MissionTD[9], string);
		}
		case 2:
		{
			//Mission 2
			format(string, sizeof(string), "%s", title);
			PlayerTextDrawSetString(playerid, MissionTD[10], string);
			format(string, sizeof(string), "%s", line1);
			PlayerTextDrawSetString(playerid, MissionTD[11], string);
			format(string, sizeof(string), "%s", line2);
			PlayerTextDrawSetString(playerid, MissionTD[12], string);
		}
		case 3:
		{
			//Mission 3
			format(string, sizeof(string), "%s", title);
			PlayerTextDrawSetString(playerid, MissionTD[13], string);
			format(string, sizeof(string), "%s", line1);
			PlayerTextDrawSetString(playerid, MissionTD[14], string);
			format(string, sizeof(string), "%s", line2);
			PlayerTextDrawSetString(playerid, MissionTD[15], string);
		}
		case 4:
		{
			//Mission 4
			format(string, sizeof(string), "%s", title);
			PlayerTextDrawSetString(playerid, MissionTD[16], string);
			format(string, sizeof(string), "%s", line1);
			PlayerTextDrawSetString(playerid, MissionTD[17], string);
			format(string, sizeof(string), "%s", line2);
			PlayerTextDrawSetString(playerid, MissionTD[18], string);
		}
		case 5:
		{
			//Mission 5
			format(string, sizeof(string), "%s", title);
			PlayerTextDrawSetString(playerid, MissionTD[19], string);
			format(string, sizeof(string), "%s", line1);
			PlayerTextDrawSetString(playerid, MissionTD[20], string);
			format(string, sizeof(string), "%s", line2);
			PlayerTextDrawSetString(playerid, MissionTD[21], string);
		}
	}
}

stock ShowMissionGUIFrame(playerid, frame)
{
	switch(frame)
	{
		case 0:
		{
			for(new i = 0; i < 7; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //No missions
			}
		}
		case 1:
		{
			for(new i = 7; i < 10; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //Mission 1
			}
		}
		case 2:
		{
			for(new i = 10; i < 13; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //Mission 2
			}
		}
		case 3:
		{
			for(new i = 13; i < 16; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //Mission 3
			}
		}
		case 4:
		{
			for(new i = 16; i < 19; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //Mission 4
			}
		}
		case 5:
		{
			for(new i = 19; i < 22; i++) {
				PlayerTextDrawShow(playerid, MissionTD[i]); //Mission 5
			}
		}
	}
}

stock HideMissionGUIFrame(playerid, frame)
{
	switch(frame)
	{
		case 0:
		{
			for(new i = 0; i < 7; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //No missions
			}
		}
		case 1:
		{
			for(new i = 7; i < 10; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //Mission 1
			}
		}
		case 2:
		{
			for(new i = 10; i < 13; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //Mission 2
			}
		}
		case 3:
		{
			for(new i = 13; i < 16; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //Mission 3
			}
		}
		case 4:
		{
			for(new i = 16; i < 19; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //Mission 4
			}
		}
		case 5:
		{
			for(new i = 19; i < 22; i++) {
				PlayerTextDrawHide(playerid, MissionTD[i]); //Mission 5
			}
		}
	}
}

stock ShowFPSCounter(playerid)
{
	new string[64];
	format(string, sizeof(string), "FPS:%d", pFPS[playerid]);
	pFPSCounter[playerid] = CreatePlayerTextDraw(playerid,590.000000, 2.000000, string);
	PlayerTextDrawBackgroundColor(playerid,pFPSCounter[playerid], 255);
	PlayerTextDrawFont(playerid,pFPSCounter[playerid], 3);
	PlayerTextDrawLetterSize(playerid,pFPSCounter[playerid], 0.370000, 1.200000);
	PlayerTextDrawColor(playerid,pFPSCounter[playerid], -65281);
	PlayerTextDrawSetProportional(playerid,pFPSCounter[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,pFPSCounter[playerid], 0);

	PlayerTextDrawShow(playerid, pFPSCounter[playerid]);
	return true;
}

stock HideFPSCounter(playerid)
{
	PlayerTextDrawHide(playerid, pFPSCounter[playerid]);
	return true;
}

stock GetStaffRank(playerid)
{
	new string[42];
	if(PlayerInfo[playerid][mLevel] > 0)
	{
		switch(PlayerInfo[playerid][mLevel])
		{
			case 0: format(string, sizeof(string), "{FFFF00}N/A{FFFFFF}");
			case 1: format(string, sizeof(string), "{FFFF00}Server Moderator{FFFFFF}");
			case 2: format(string, sizeof(string), "{FFFF00}Senior Server Moderator{FFFFFF}");
			default: format(string, sizeof(string), "{FFFF00}Undefined Moderator{FFFFFF}");
		}
	}
	else if(PlayerInfo[playerid][aLevel] >= 0)
	{
		switch(PlayerInfo[playerid][aLevel])
		{
			case 0: format(string, sizeof(string), "N/A");
			case 1: format(string, sizeof(string), "{00FF00}Junior Administrator{FFFFFF}");
			case 2: format(string, sizeof(string), "{00FF00}General Administrator{FFFFFF}");
			case 3: format(string, sizeof(string), "{F4A460}Senior Administrator{FFFFFF}");
			case 4: format(string, sizeof(string), "{298EFF}Server Owner{FFFFFF}");
			default: format(string, sizeof(string), "Undefined Administrator (%d)", PlayerInfo[playerid][aLevel]);
		}
	}
	return string;
}

stock GetStats(playerid, targetid)
{//PlayerInfo[targetid][aLevel]
	new sciss[5], lock[5], help[5], hhelp[5], string[200], alevel[126], vrank[64];
	if(PlayerInfo[targetid][vLevel] > 0)
	{
		switch(PlayerInfo[targetid][vLevel])
		{
			case 1: vrank = "{800080}Bronze VIP{FFFFFF}";
			case 2: vrank = "{800080}Silver VIP{FFFFFF}";
			case 3: vrank = "{FFD700}Gold VIP{FFFFFF}";
			case 4: vrank = "{E5E4E2}Platinum VIP{FFFFFF}";
			default: vrank = "None";
		}
	}
	switch (PlayerInfo[targetid][pScissors])
	{
		case 0: format(sciss, sizeof(sciss), "No");
		case 1: format(sciss, sizeof(sciss), "Yes");
	}
	switch (PlayerInfo[targetid][vLock])
	{
		case 0: format(lock, sizeof(lock), "No");
		case 1: format(lock, sizeof(lock), "Yes");
	}
	switch (PlayerInfo[targetid][Helper])
	{
		case 0: format(help, sizeof(help), "No");
		case 1: format(help, sizeof(help), "Yes");
	}
	switch (PlayerInfo[targetid][hHelper])
	{
		case 0: format(hhelp, sizeof(hhelp), "No");
		case 1: format(hhelp, sizeof(hhelp), "Yes");
	}
	SendClientMessage(playerid, COLOR_GREEN, "|________________________________________________________________________________________________|");
    format(string, sizeof(string), "Name: %s (%d) | Score: %d | Holding: $%s | Kills: %d | Deaths: %d | Holdups: %d | Crimes: %d", GetName(targetid), targetid, GetPlayerScore(targetid), number_format(GetPlayerCash(targetid)) , PlayerInfo[targetid][pKills], PlayerInfo[targetid][pDeaths], PlayerInfo[targetid][pHoldups], PlayerInfo[targetid][pCrimes]);
    SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Times Fined: %d | Times Arrested: %d | Takedowns: %d | Issues: %d | Joins: %d | Warns: %d | Kicks: %d", PlayerInfo[targetid][pFined], PlayerInfo[targetid][pArrests], PlayerInfo[targetid][pTakedowns], PlayerInfo[targetid][pTickets], PlayerInfo[targetid][pJoins], PlayerInfo[targetid][pWarns], PlayerInfo[targetid][pKicks]);
    SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Rope: %d | Scissors: %s | Cans: %d | Medikits: %d | vLock: %s | Admin: %d | VIP: %d | Helper: %s | Head Helper: %s", PlayerInfo[targetid][pRope], sciss, PlayerInfo[targetid][pPaintCan], PlayerInfo[targetid][pKits], lock, GetStaffRank(targetid), vrank, help, hhelp);
    SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Materials: %d | Credit: $%s | Debt Owing: $%s | Vehicles: %d | Houses: %d | Businesses: %d", PlayerInfo[targetid][pMaterials], number_format(BankInfo[targetid][Credit]), number_format(BankInfo[targetid][Debt]), GetPlayerVehicles{targetid}, GetOwnedHouses(targetid), GetPlayerOwnedBusinesses(targetid));
	SendClientMessage(playerid, COLOR_WHITE, string);
}

stock GetPlayerSkill(playerid)
{
	new skill = PlayerInfo[playerid][pSkill];
	return skill;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

stock GetPlayerSkillName(skill)
{
	new skillname[128];
	switch (skill)
	{
	    case 0: skillname = "None";
	    case 1: skillname = "Vehicle Thief";
	 	case 2: skillname = "Car Mechanic";
	 	case 3: skillname = "Food Vendor";
	 	case 4: skillname = "Street Vendor";
	 	case 5: skillname = "Weapons Dealer";
	 	case 6: skillname = "Private Medic";
	 	case 7: skillname = "Kinapper";
	 	case 8: skillname = "Rapist";
	 	case 9: skillname = "Hitman";
	 	case 10: skillname = "Whore";
	 	case 11: skillname = "Drugs Dealer";
	 	case 12: skillname = "Pick Pocket";
	 	case 13: skillname = "Con Artist";
	 	case 14: skillname = "Lawyer";
	 	case 15: skillname = "Drug Smuggler";
	 	case 16: skillname = "Treasure Hunter";
	 	case 17: skillname = "Fisherman";
	 	case 18: skillname = "Craftsman";
	 	case 19: skillname = "Bodyguard";
	}
	return skillname;
}

stock GiveArmor(Player, Float:Armor)
{
	new Float:OldArmor, Float:armour;

	OldArmor = GetPlayerArmour(playerid, armour);
	SetPlayerArmour(Player, OldArmor+Armor);
	return 1;
}

stock SetArmor(Player, Float:Armor)
{
	SetPlayerArmour(Player, Armor);
	return 1;
}

stock RemoveArmor(Player)
{
	SetPlayerArmour(Player, 0.0);
	return 1;
}

stock SendClientMessageWrap(playerid, color, width, string[])
{
	if(strlen(string) > width)
	{
		new firstline[128], secondline[128];
		strmid(firstline, string, 0, 88);
		strmid(secondline, string, 88, 128);
		format(firstline, sizeof(firstline), "%s...", firstline);
		format(secondline, sizeof(secondline), "...%s", secondline);
		SendClientMessage(playerid, color, firstline);
		SendClientMessage(playerid, color, secondline);
	}
	else SendClientMessage(playerid, color, string);
}

stock SendXMessage(playerid, const text[])
{
    for(new line; line < 15; line++)
    {
        TextDrawShowForPlayer(playerid, XMsg[line]);//show the lines
    }
    for(new line; line < 15; line++)
    {
        TextDrawHideForAll(XMsg[line]);//hide the line
        if(line < 14)
        {
            XMsgStr[line] = XMsgStr[line+1];//Message going up ^
            TextDrawSetString(XMsg[line], XMsgStr[line]);
        }
    }
    format(XMsgStr[9], 128, "%s",text);//Message !
    TextDrawSetString(XMsg[9], XMsgStr[9]);//Start from Line 9
    for(new line; line < 15; line++) // goes up
    {
        TextDrawShowForAll(XMsg[line]);//TextDraw show for player
    }
    return 1;
}

stock ClearMenu(playerid)
{
	PlayerTextDrawSetString(playerid, CmdMenuTD[6], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[7], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[8], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[9], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[10], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[11], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[12], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[13], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[14], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[15], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[16], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[17], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[18], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[19], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[20], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[21], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[22], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[23], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[24], "_");
	PlayerTextDrawSetString(playerid, CmdMenuTD[25], "_");
	return 1;
}

stock ABroadCast(hColor, szMessage[], iLevel) {
	foreach(new i: Player)
	{
		if(PlayerInfo[i][aLevel] >= iLevel) {
			SendClientMessage(i, hColor, szMessage);
		}
	}
	return 1;
}

IsAt247(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, -30.875, -88.9609, 1004.53))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2654.2300,1526.3693,907.1797))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 890.66, 1429.08, -82.34))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -29.2035, -185.1285, 1003.5469))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 2.0450,-29.0116,1003.5494))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -28.1463,-89.9533,1003.5469))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -30.9772,-29.0228,1003.5573))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -23.4488,-55.6319,1003.5469))
		{
			return 1;
		}
	}
	return 0;
}

IsAtAmmunation(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, 2539, -133.7294, 999.6016))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 295.1320, -38.5151, 1001.5156))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 296.919982, -108.071998, 1001.515625))
		{
			return 1;
		}
	}
	return 0;
}

IsATruckerCar(carid)
{
	new Trucks[] = { 499, 403, 414, 443, 514, 515, 456 };
	for(new i = 0; i < sizeof(Trucks); i++)
	{
		if(GetVehicleModel(carid) == Trucks[i]) return 1;
	}
	return 0;
}

IsABoat(carid)
{
	new Boats[] = { 472, 473, 493, 595, 484, 430, 453, 452, 446, 454 };
	for(new i = 0; i < sizeof(Boats); i++)
	{
		if(GetVehicleModel(carid) == Boats[i]) return 1;
	}
	return 0;
}

stock IsACop(playerid)
{
	if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_ARMY) return 1;
	return 0;
}

GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

stock GetPlayersBizEarnings(playerid)
{
	new file[40], amount = 0;
	for(new b = 0; b < MAX_BUSINESSES; b++)
	{
	    format(file, sizeof(file), BIZ_FILE, b);
	    if(fexist(file))
	    {
	    	if(!strcmp(GetName(playerid), BizInfo[b][bOwner], true))
		    {
		        amount = amount + BizInfo[b][bEarnings];
		    }
		}
	}
	return amount;
}

stock SendPlayerToCage(playerid, time)
{
	ResetPlayerWeapons(playerid);
	SetPlayerWantedLevel(playerid, 0);
	SetPlayerPos(playerid, 2178.3713, 2407.2861, 73.0339);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	IsCaged{playerid} = true;
	HasBeenCuffed{playerid} = false;
	SetPlayerArmour(playerid, 0);
	GameTextForPlayer(playerid,"~r~Caged!", 5000, 5);
	if(CageTime[playerid] > 0)
	{
		CageTime[playerid] = 0;
	}
	CageTime[playerid] = time;
	KillTimer(JailTimer[playerid]);
	KillTimer(CageTimer[playerid]);
	CageTimer[playerid] = SetTimerEx("AutoUncage", 1000, true, "%d", playerid);
	return 1;
}

stock DestroyNeons(vehicleid)
{
	DestroyObject(blueneons[vehicleid]);
	DestroyObject(blueneons2[vehicleid]);
	DestroyObject(redneons[vehicleid]);
	DestroyObject(redneons2[vehicleid]);
	DestroyObject(greenneons[vehicleid]);
	DestroyObject(greenneons2[vehicleid]);
	DestroyObject(yellowneons[vehicleid]);
	DestroyObject(yellowneons2[vehicleid]);
	DestroyObject(pinkneons[vehicleid]);
	DestroyObject(pinkneons2[vehicleid]);
	if(IsShopVehicle[vehicleid] != -1)
	{
		VehicleInfo[IsShopVehicle[vehicleid]][vNeons] = NO_NEONS;
	}
	return 1;
}

stock GetVehicleIDFromModelName(vname[])//Forgot who made this..Credits to the original developer..
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(GlobalVehicleNames[i], vname, true) != -1)
		return i + 400;
	}
	return -1;
}

stock IsPlayerSkydiving(playerid)//Credits to Mauzen(Upgrade by Weponz)
{
    new index = GetPlayerAnimationIndex(playerid);
    if(index >= 958 && index <= 962)
    {
        return 1;
    }
    return 0;
}

stock IsPlayerUsingParachute(playerid)//Credits to Mauzen(Upgrade by Weponz)
{
    new index = GetPlayerAnimationIndex(playerid);
    if(index >= 963 && index <= 979)
    {
        return 1;
    }
    return 0;
}

Float:GetXYPosInFrontOfPlayer(playerid, &Float:gX, &Float:gY, Float:dist)//Credits to sa-mp wiki
{
    new Float:gA;
    GetPlayerPos(playerid, gX, gY, gA);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), gA);
	}
    else GetPlayerFacingAngle(playerid, gA);
    {
        gX += (dist * floatsin(-gA, degrees));
        gY += (dist * floatcos(-gA, degrees));
	}
    return gA;
}

stock CheckValidSkinID(skinid)
{
    if((skinid == 0 || skinid == 1 || skinid == 2) || (skinid == 7) || (skinid >= 9 && skinid <= 41)
	|| (skinid >= 43 && skinid <= 64) || (skinid >= 66 && skinid <= 73)
	|| (skinid >= 75 && skinid <= 85) || (skinid >= 87 && skinid <= 118)
	|| (skinid >= 120 && skinid <= 148) || (skinid >= 150 && skinid <= 207)
	|| (skinid >= 209 && skinid <= 264) || (skinid >= 274 && skinid <= 288)
	|| (skinid >= 290 && skinid <= 299)) return 1;
    else return 0;
}

stock GetClosestPlayerID(playerid)
{
	new Float:range = 5.0;
    foreach(Player, i)
    {
        if(playerid == i) continue;
        new Float:x, Float:y, Float:z;
        GetPlayerPos(i, x, y, z);
	    if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
	    {
	        return i;
	    }
    }
    return INVALID_PLAYER_ID;
}

stock LoadFightStyle(playerid)
{
	if(FightStyleID{playerid} == 0)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
		return 1;
	}
	else if(FightStyleID{playerid} == 1)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
		return 1;
	}
	else if(FightStyleID{playerid} == 2)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		return 1;
	}
	else if(FightStyleID{playerid} == 3)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		return 1;
	}
	else if(FightStyleID{playerid} == 4)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		return 1;
	}
	else if(FightStyleID{playerid} == 5)
	{
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
	}
	return 1;
}

stock IsNumeric(string[])//Credits to DracoBlue
{
    for (new i = 0, j = strlen(string); i < j; i++)
    {
        if (string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}

stock GetPlayersInTeamFromMaxPlayers(teamid)
{
    new count = 0;
    foreach(Player, i)
    {
        if(GetPlayerState(i) == PLAYER_STATE_NONE) continue;
        if(GetTeam{i} != teamid) continue;
        count++;
    }
    return count;
}

stock Float:GetPosBehindOfPlayer(playerid, &Float:x, &Float:y, Float:distance)//Credits to sa-mp wiki(Edit by Weponz)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	if (IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	else GetPlayerFacingAngle(playerid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

stock GetID(username[])
{
	foreach(Player, i)
	{
    	if(IsPlayerConnected(i))
    	{
      		if(strcmp(GetName(i), username, false, strlen(username)) == 0)
      		{
        		return i;
      		}
    	}
  	}
	return INVALID_PLAYER_ID;
}

stock SaveVehicleStats(vehicleid)
{
	new file[40];
	format(file, sizeof(file), VEH_FILE, vehicleid);
	if(fexist(file))
	{
	    new INI:vfile = INI_Open(file);

	    INI_WriteInt(vfile, "Model", VehicleInfo[vehicleid][vModel]);
		INI_WriteInt(vfile, "Color1", VehicleInfo[vehicleid][vColor1]);
		INI_WriteInt(vfile, "Color2", VehicleInfo[vehicleid][vColor2]);
	    INI_WriteInt(vfile, "Price", VehicleInfo[vehicleid][vPrice]);
	    INI_WriteString(vfile, "Owner", VehicleInfo[vehicleid][vOwner]);
	    INI_WriteFloat(vfile, "PosX", VehicleInfo[vehicleid][vPosX]);
	    INI_WriteFloat(vfile, "PosY", VehicleInfo[vehicleid][vPosY]);
	    INI_WriteFloat(vfile, "PosZ", VehicleInfo[vehicleid][vPosZ]);
	    INI_WriteFloat(vfile, "PosA", VehicleInfo[vehicleid][vPosA]);
	    INI_WriteString(vfile, "Plate", VehicleInfo[vehicleid][vPlate]);
	    INI_WriteInt(vfile, "PaintJob", VehicleInfo[vehicleid][vPaintJob]);
	    INI_WriteInt(vfile, "Locked", VehicleInfo[vehicleid][vLocked]);
	    INI_WriteInt(vfile, "Mod1", GetVehicleMods[vehicleid][0]);
	    INI_WriteInt(vfile, "Mod2", GetVehicleMods[vehicleid][1]);
	    INI_WriteInt(vfile, "Mod3", GetVehicleMods[vehicleid][2]);
	    INI_WriteInt(vfile, "Mod4", GetVehicleMods[vehicleid][3]);
	    INI_WriteInt(vfile, "Mod5", GetVehicleMods[vehicleid][4]);
	    INI_WriteInt(vfile, "Mod6", GetVehicleMods[vehicleid][5]);
	    INI_WriteInt(vfile, "Mod7", GetVehicleMods[vehicleid][6]);
	    INI_WriteInt(vfile, "Mod8", GetVehicleMods[vehicleid][7]);
	    INI_WriteInt(vfile, "Mod9", GetVehicleMods[vehicleid][8]);
	    INI_WriteInt(vfile, "Mod10", GetVehicleMods[vehicleid][9]);
	    INI_WriteInt(vfile, "Mod11", GetVehicleMods[vehicleid][10]);
	    INI_WriteInt(vfile, "Mod12", GetVehicleMods[vehicleid][11]);
	    INI_WriteInt(vfile, "Neons", VehicleInfo[vehicleid][vNeons]);
	    INI_WriteInt(vfile, "Fuel", VehicleInfo[vehicleid][vFuel]);
	    INI_WriteFloat(vfile, "Health", VehicleInfo[vehicleid][vHealth]);
	    INI_Close(vfile);
	}
	return 1;
}

stock LoadPlayerVehicles(playerid)
{
    GetPlayerVehicles{playerid} = 0;
    verifydestroycar{playerid} = 0;
	new vehcount = 0;
    for(new v = 0; v < MAX_SHOP_VEHICLES; v++)
	{
	    new file[40];
		format(file, sizeof(file), VEH_FILE, v);
		if(fexist(file))
		{
        	INI_ParseFile(file, "LoadVeh_%s", .bExtra = true, .extra = v);

            if(!strcmp(GetName(playerid), VehicleInfo[v][vOwner], false))
			{
				new newveh = CreateVehicle(VehicleInfo[v][vModel], VehicleInfo[v][vPosX], VehicleInfo[v][vPosY], VehicleInfo[v][vPosZ], VehicleInfo[v][vPosA], VehicleInfo[v][vColor1], VehicleInfo[v][vColor2], 500000);
				SetVehicleNumberPlate(newveh, VehicleInfo[v][vPlate]);
				if(VehicleInfo[v][vPaintJob] != 0)
				{
					ChangeVehiclePaintjob(newveh, VehicleInfo[v][vPaintJob]);
				}
				
				if(VehicleInfo[v][vHealth] <= 251.0)
				{
					SetVehicleHealth(newveh, 1000.0);
					VehicleInfo[v][vHealth] = 1000.0;
				}
				else
				{
					SetVehicleHealth(newveh, VehicleInfo[v][vHealth]);
				}

				for(new m = 0; m < 12; m++)
				{
					if(GetVehicleMods[v][m] > 0)
					{
						AddVehicleComponent(newveh, GetVehicleMods[v][m]);
					}
				}

				if(VehicleInfo[v][vLocked] == 1)
				{
					SetVehicleParamsForAll(newveh, 0, 1);
        			GetVehicleParamsEx(newveh, engine, lights, alarm, doors, bonnet, boot, condition);
					SetVehicleParamsEx(newveh, engine, lights, alarm, ON, bonnet, boot, condition);
				}
				else if(VehicleInfo[v][vLocked] == 0)
				{
					SetVehicleParamsForAll(newveh, 0, 0);
        			GetVehicleParamsEx(newveh, engine, lights, alarm, doors, bonnet, boot, condition);
					SetVehicleParamsEx(newveh, engine, lights, alarm, OFF, bonnet, boot, condition);
				}
				
				if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == BLUE_NEONS)
				{
				    blueneons[newveh] = CreateObject(18648,0,0,0,0,0,0);
            		blueneons2[newveh] = CreateObject(18648,0,0,0,0,0,0);
            		AttachObjectToVehicle(blueneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            		AttachObjectToVehicle(blueneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				}
				else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == RED_NEONS)
				{
				    redneons[newveh] = CreateObject(18647,0,0,0,0,0,0);
            		redneons2[newveh] = CreateObject(18647,0,0,0,0,0,0);
            		AttachObjectToVehicle(redneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            		AttachObjectToVehicle(redneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				}
				else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == GREEN_NEONS)
				{
				    greenneons[newveh] = CreateObject(18649,0,0,0,0,0,0);
            		greenneons2[newveh] = CreateObject(18649,0,0,0,0,0,0);
            		AttachObjectToVehicle(greenneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            		AttachObjectToVehicle(greenneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				}
				else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == YELLOW_NEONS)
				{
				    yellowneons[newveh] = CreateObject(18650,0,0,0,0,0,0);
            		yellowneons2[newveh] = CreateObject(18650,0,0,0,0,0,0);
            		AttachObjectToVehicle(yellowneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            		AttachObjectToVehicle(yellowneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				}
				else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == PINK_NEONS)
				{
				    pinkneons[newveh] = CreateObject(18651,0,0,0,0,0,0);
            		pinkneons2[newveh] = CreateObject(18651,0,0,0,0,0,0);
            		AttachObjectToVehicle(pinkneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            		AttachObjectToVehicle(pinkneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				}

	        	IsShopVehicle[newveh] = v;
	        	GetPlayerVehicles{playerid}++;
	        	GetServerVehicles++;
	        	
				GetVehicleFuel[newveh] = VehicleInfo[v][vFuel];
				GetVehicleCurrentHealth[newveh] = VehicleInfo[v][vHealth];

				vehcount++;

	        	if(vehcount == MAX_VIP_VEHS)
				{
				    return 1;
				}
	        }
        }
    }
	return 1;
}

stock UnloadPlayerVehicles(playerid)
{
	new vehcount = 0;
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    if(IsShopVehicle[v] != -1)
		{
		    if(!strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[v]][vOwner], false))
		    {
		        new color1, color2;
		        if(GetVehicleColor(v, color1, color2))
				{
	    			VehicleInfo[IsShopVehicle[v]][vColor1] = color1;
	    			VehicleInfo[IsShopVehicle[v]][vColor2] = color2;
	    		}
	    		new Float:health;
    			GetVehicleHealth(v, health);
    			VehicleInfo[IsShopVehicle[v]][vHealth] = health;
		        SaveVehicleStats(IsShopVehicle[v]);
		        DestroyNeons(v);
		        DestroyVehicle(v);
		        GetPlayerVehicles{playerid}--;
	        	GetServerVehicles--;
	        	IsShopVehicle[v] = -1;

				vehcount++;

	        	if(vehcount == MAX_VIP_VEHS)
				{
				    return 1;
				}
		    }
		}
	}
	return 1;
}

stock GetClosestOwnedVehID(playerid)
{
    new Float:diameter = 5.0, Float:distance;
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
    GetPlayerPos(playerid, x1, y1, z1);
    for(new v = 0; v < MAX_VEHICLES; v++)
    {
		if(IsShopVehicle[v] != -1)
		{
		    if(!strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[v]][vOwner], false))
		    {
        		GetVehiclePos(v, x2, y2, z2);
        		distance = floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2) + floatpower(floatabs(floatsub(y2, y1)), 2) + floatpower(floatabs(floatsub(z2, z1)), 2));
        		if(distance <= diameter)
        		{
            		return v;
        		}
        	}
        }
    }
    return INVALID_VEHICLE_ID;
}

stock GetFreeVehicleSlot()
{
	new file[40];
    for(new v = 0; v < MAX_SHOP_VEHICLES; v++)
    {
		format(file, sizeof(file), VEH_FILE, v);
		if(!fexist(file))
		{
		    return v;
		}
    }
    return -1;
}

stock CreateNewPlayerVehicle(playerid, modelid, price)
{
    new Float:Pos[4], v = GetFreeVehicleSlot();
    if(v < 0)
	{
		SendClientMessage(playerid, RED, "NVM: No more vehicles may be sold.");
		return 1;
	}
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	GetPlayerVehicles{playerid}++;
	GetServerVehicles++;

	new color1 = random(255), color2 = random(255);

	VehicleInfo[v][vModel] = modelid;
	VehicleInfo[v][vColor1] = color1;
	VehicleInfo[v][vColor2] = color2;
	VehicleInfo[v][vPrice] = price;
	VehicleInfo[v][vPosX] = Pos[0] + 2.0;
	VehicleInfo[v][vPosY] = Pos[1] + 2.0;
	VehicleInfo[v][vPosZ] = Pos[2];
	VehicleInfo[v][vPosA] = Pos[3];
	strmid(VehicleInfo[v][vOwner], GetName(playerid), 0, 24, 24);
	strmid(VehicleInfo[v][vPlate], "ACnR", 0, 32, 32);
	VehicleInfo[v][vPaintJob] = 0;
	VehicleInfo[v][vLocked] = 0;
	VehicleInfo[v][vNeons] = NO_NEONS;
	VehicleInfo[v][vFuel] = 100;
	VehicleInfo[v][vHealth] = 1000.0;

	new file[40];
	format(file, sizeof(file), VEH_FILE, v);

	new File:startfile = fopen(file, io_write);
	fclose(startfile);

	new INI:vfile = INI_Open(file);

	INI_WriteInt(vfile, "Model", modelid);
	INI_WriteInt(vfile, "Color1", color1);
	INI_WriteInt(vfile, "Color2", color2);
	INI_WriteInt(vfile, "Price", price);
	INI_WriteString(vfile, "Owner", GetName(playerid));
	INI_WriteFloat(vfile, "PosX", Pos[0] + 2.0);
	INI_WriteFloat(vfile, "PosY", Pos[1] + 2.0);
	INI_WriteFloat(vfile, "PosZ", Pos[2]);
	INI_WriteFloat(vfile, "PosA", Pos[3]);
	INI_WriteString(vfile, "Plate", "ACnR");
	INI_WriteInt(vfile, "PaintJob", 0);
	INI_WriteInt(vfile, "Locked", 0);
	INI_WriteInt(vfile, "Neons", NO_NEONS);
	INI_WriteInt(vfile, "Fuel", 100);
	INI_WriteFloat(vfile, "Health", 1000.0);

	INI_Close(vfile);

	new vehicle = CreateVehicle(modelid, Pos[0] + 2.0, Pos[1] + 2.0, Pos[2], Pos[3], color1, color2, 2073600);//24 day time delay (2073600 secs)
	SetVehicleNumberPlate(vehicle, "ACnR");
	GetVehicleFuel[vehicle] = 100;
	GetVehicleCurrentHealth[vehicle] = 1000.0;
	IsShopVehicle[vehicle] = v;
	SaveVehicleStats(v);

	GivePlayerCash(playerid, -price);
	return 1;
}

stock GetFreeBizID()
{
	for(new i = 0; i < MAX_BUSINESSES; i++)
	{
	    new file[40];
		format(file, sizeof(file), BIZ_FILE, i);
		if(!fexist(file))
		{
		    return i;
		}
	}
	return -1;
}

stock UnloadBusinesses()
{
	for(new i = 0; i < MAX_BUSINESSES; i++)
    {
		Delete3DTextLabel(bLabel[i]);
		DestroyDynamicCP(bizentercp[i]);
		DestroyDynamicCP(bizexitcp[i]);
		DestroyDynamicCP(bizrobberycp[i]);
	}
	return 1;
}

stock GetBizOwner(bizid)
{
	new owner[24];
	format(fstr, sizeof(fstr), BIZ_FILE, bizid);
	if(fexist(fstr))
	{
	    if(!strcmp(BizInfo[bizid][bOwner], DEFAULT_BIZ_OWNER_NAME))
	    {
	    	format(owner, sizeof(owner), "%s", DEFAULT_BIZ_OWNER_NAME);
	    }
	    else
	    {
	    	format(owner, sizeof(owner), "%s", BizInfo[bizid][bOwner]);
	    }
	}
	return owner;
}

stock GetPlayerOwnedBusinesses(playerid)
{
	new count = 0, file[40];
	for(new i = 0; i < MAX_BUSINESSES; i++)
	{
		format(file, sizeof(file), BIZ_FILE, i);
		if(fexist(file))
		{
	    	if(!strcmp(GetName(playerid), BizInfo[i][bOwner], true))
	    	{
	    		count++;
	    	}
	    }
	}
	return count;
}

stock PopVehicleTyres(tires1, tires2, tires3, tires4)
{
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

stock SaveBizStats(bizid)
{
	new file[40];
	format(file, sizeof(file), BIZ_FILE, bizid);
	if(fexist(file))
	{
	    new INI:bfile = INI_Open(file);

	    INI_WriteString(bfile, "bName", BizInfo[bizid][bName]);
	    INI_WriteString(bfile, "bOwner", BizInfo[bizid][bOwner]);
	    INI_WriteInt(bfile, "bPrice", BizInfo[bizid][bPrice]);
	    INI_WriteFloat(bfile, "bExtX", BizInfo[bizid][bExtX]);
	    INI_WriteFloat(bfile, "bExtY", BizInfo[bizid][bExtY]);
	    INI_WriteFloat(bfile, "bExtZ", BizInfo[bizid][bExtZ]);
	    INI_WriteFloat(bfile, "bIntX", BizInfo[bizid][bIntX]);
	    INI_WriteFloat(bfile, "bIntY", BizInfo[bizid][bIntY]);
	    INI_WriteFloat(bfile, "bIntZ", BizInfo[bizid][bIntZ]);
	    INI_WriteFloat(bfile, "bExtSpwnX", BizInfo[bizid][bExtSpwnX]);
	    INI_WriteFloat(bfile, "bExtSpwnY", BizInfo[bizid][bExtSpwnY]);
	    INI_WriteFloat(bfile, "bExtSpwnZ", BizInfo[bizid][bExtSpwnZ]);
	    INI_WriteFloat(bfile, "bExtSpwnA", BizInfo[bizid][bExtSpwnA]);
	    INI_WriteFloat(bfile, "bIntSpwnX", BizInfo[bizid][bIntSpwnX]);
	    INI_WriteFloat(bfile, "bIntSpwnY", BizInfo[bizid][bIntSpwnY]);
	    INI_WriteFloat(bfile, "bIntSpwnZ", BizInfo[bizid][bIntSpwnZ]);
	    INI_WriteFloat(bfile, "bIntSpwnA", BizInfo[bizid][bIntSpwnA]);
	    INI_WriteFloat(bfile, "bRobX", BizInfo[bizid][bRobX]);
	    INI_WriteFloat(bfile, "bRobY", BizInfo[bizid][bRobY]);
	    INI_WriteFloat(bfile, "bRobZ", BizInfo[bizid][bRobZ]);
	    INI_WriteInt(bfile, "bInterior", BizInfo[bizid][bInterior]);
	    INI_WriteInt(bfile, "bVWorld", BizInfo[bizid][bVWorld]);
	    INI_WriteInt(bfile, "bEarnings", BizInfo[bizid][bEarnings]);
		INI_Close(bfile);
	}
	return 1;
}

stock SaveHouseStats(houseid)
{
	new file[40];
	format(file, sizeof(file), HOUSE_FILE, houseid);
	if(fexist(file))
	{
	    new INI:hfile = INI_Open(file);
	    
	    INI_WriteString(hfile, "HouseOwner", HouseInfo[houseid][hOwner]);
	    INI_WriteString(hfile, "HouseName", HouseInfo[houseid][hName]);
	    INI_WriteInt(hfile, "HouseValue", HouseInfo[houseid][hValue]);
	    INI_WriteFloat(hfile, "CPOutX", HouseInfo[houseid][hCPOutX]);
	    INI_WriteFloat(hfile, "CPOutY", HouseInfo[houseid][hCPOutY]);
	    INI_WriteFloat(hfile, "CPOutZ", HouseInfo[houseid][hCPOutZ]);
	    INI_WriteFloat(hfile, "SpawnOutX", HouseInfo[houseid][hSPOutX]);
	    INI_WriteFloat(hfile, "SpawnOutY", HouseInfo[houseid][hSPOutY]);
	    INI_WriteFloat(hfile, "SpawnOutZ", HouseInfo[houseid][hSPOutZ]);
	    INI_WriteFloat(hfile, "SpawnOutAngle", HouseInfo[houseid][hSPOutA]);
	    INI_WriteInt(hfile, "SpawnWorld", HouseInfo[houseid][hWorld]);
	    INI_WriteInt(hfile, "SpawnInterior", HouseInfo[houseid][hSpawnInterior]);
	    INI_WriteInt(hfile, "HouseInterior", HouseInfo[houseid][hHouseInterior]);
	    INI_WriteInt(hfile, "QuitInHouse", HouseInfo[houseid][hQuit]);
	    INI_WriteString(hfile, "KeyOwner1", HouseInfo[houseid][hKeyOwner1]);
	    INI_WriteString(hfile, "KeyOwner2", HouseInfo[houseid][hKeyOwner2]);
	    INI_WriteString(hfile, "KeyOwner3", HouseInfo[houseid][hKeyOwner3]);
	    INI_WriteString(hfile, "KeyOwner4", HouseInfo[houseid][hKeyOwner4]);
	    INI_WriteString(hfile, "KeyOwner5", HouseInfo[houseid][hKeyOwner5]);
	    INI_WriteString(hfile, "KeyOwner6", HouseInfo[houseid][hKeyOwner6]);
	    INI_WriteString(hfile, "KeyOwner7", HouseInfo[houseid][hKeyOwner7]);
	    INI_WriteString(hfile, "KeyOwner8", HouseInfo[houseid][hKeyOwner8]);
	    INI_WriteString(hfile, "KeyOwner9", HouseInfo[houseid][hKeyOwner9]);
	    INI_WriteString(hfile, "KeyOwner10", HouseInfo[houseid][hKeyOwner10]);
		INI_Close(hfile);
	}
	return 1;
}

stock GetOwnedHouses(playerid)//Credits to Garsino
{
	new file[40], tmpcount = 0;
	Loop(h, MAX_HOUSES)
	{
	    format(file, sizeof(file), HOUSE_FILE, h);
	    if(fexist(file))
	    {
	    	if(!strcmp(pNick(playerid), GetHouseOwner(h), true))
		    {
		        tmpcount++;
		    }
		}
	}
	return tmpcount;
}

stock GetHouseOwnerEx(houseid)//Credits to Garsino
{
	new file[40];
	format(file, sizeof(file), HOUSE_FILE, houseid);
 	if(fexist(file))
  	{
   		Loop(i, GetMaxPlayers())
   		{
	    	if(!strcmp(pNick(i), GetHouseOwner(houseid), true))
   			{
      			return i;
   			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock UnloadHouses()//Credits to Garsino
{
	Loop(h, MAX_HOUSES)
	{
		DestroyHouseEntrance(h, TYPE_OUT);
		DestroyHouseEntrance(h, TYPE_INT);
		Delete3DTextLabel(HouseLabel[h]);
	}
	return 1;
}

stock GetHouseValue(houseid)//Credits to Garsino
{
	new file[40];
	format(file, sizeof(file), HOUSE_FILE, houseid);
	if(fexist(file))
	{
		return HouseInfo[houseid][hValue];
	}
	else return 1;
}

stock GetHouseName(houseid)//Credits to Garsino
{
	new file[40], hname[50];
	format(hname, 64, "%s", "For-Sale");
	format(file, sizeof(file), HOUSE_FILE, houseid);
	if(fexist(file))
	{
	    format(hname, 64, "%s", HouseInfo[houseid][hName]);
		return hname;
	}
	return hname;
}

stock GetHouseOwner(houseid)//Credits to Garsino
{
	new file[40], howner[MAX_PLAYER_NAME];
	format(howner, MAX_PLAYER_NAME, "Nobody");
	format(file, sizeof(file), HOUSE_FILE, houseid);
	if(fexist(file))
	{
	    format(howner, MAX_PLAYER_NAME, "%s", HouseInfo[houseid][hOwner]);
		return howner;
	}
	return howner;
}

stock IsHouseInRangeOfHouse(house, house2, Float:range = 250.0)//Credits to Garsino
{
	new file[40], file2[40];
	format(file, sizeof(file), HOUSE_FILE, house);
	format(file2, sizeof(file2), HOUSE_FILE, house2);
	if(fexist(file) && fexist(file2))
	{
		if(PointInRangeOfPoint(range, HouseInfo[house][hCPOutX], HouseInfo[house][hCPOutY], HouseInfo[house][hCPOutZ], HouseInfo[house2][hCPOutX], HouseInfo[house2][hCPOutY], HouseInfo[house2][hCPOutZ]))
		{
		    return 1;
		}
	}
	return 0;
}

stock CreateCorrectHouseExitCP(houseid)//Credits to Garsino
{
    new file[40];
	format(file, sizeof(file), HOUSE_FILE, houseid);
	switch(HouseInfo[houseid][hHouseInterior])
	{
		case 6: HouseCPInt[houseid] = CreateDynamicCP(2196.84, -1204.36, 1049.02, 1.0, (houseid + 1000), 6, -1, 4.0);// 1 Story
		case 7: HouseCPInt[houseid] = CreateDynamicCP(225.7121, 1021.4438, 1084.0177, 1.0, (houseid + 1000), 7, -1, 4.0);// Apartment
		case 9: HouseCPInt[houseid] = CreateDynamicCP(2317.77, -1026.76, 1050.21, 1.0, (houseid + 1000), 9, -1, 4.0);// 2 Story
		case 12: HouseCPInt[houseid] = CreateDynamicCP(2324.41, -1149.54, 1050.71, 1.0, (houseid + 1000), 12, -1, 4.0); // Small Mansion
		case 5: HouseCPInt[houseid] = CreateDynamicCP(140.28, 1365.92, 1083.85, 1.0, (houseid + 1000), 5, -1, 4.0);// Large Mansion
	}
	return 1;
}

stock SetPlayerHouseInterior(playerid, house)//Credits to Garsino
{
    new file[40];
    format(file, sizeof(file), HOUSE_FILE, house);
	switch(HouseInfo[house][hHouseInterior])
	{
	 	case 6:
		{
		 	SetPlayerPosEx(playerid, 2193.9001, -1202.4185, 1049.0234, 6, (house + 1000));
    		SetPlayerFacingAngle(playerid, 91.9386); // 1 Story House Interior - Spawnpoint
		}
	 	case 7:
		{
		 	SetPlayerPosEx(playerid, 225.8993, 1023.9148, 1084.0078, 7, (house + 1000));
    		SetPlayerFacingAngle(playerid, 358.4921); // Apartment Interior - Spawnpoint
		}
		case 9:
		{
			SetPlayerPosEx(playerid, 2320.0730, -1023.9533, 1050.2109, 9, (house + 1000));
			SetPlayerFacingAngle(playerid, 358.4915); // 2 Story House Interior - Spawnpoint
		}
		case 12:
		{
		 	SetPlayerPosEx(playerid, 2324.4490, -1145.2841, 1050.7101, 12, (house + 1000));
			SetPlayerFacingAngle(playerid, 357.5873); // Small Mansion Interior - Spawnpoint
		}
		case 5:
		{
			SetPlayerPosEx(playerid, 140.1788, 1369.1936, 1083.8641, 5, (house + 1000));
			SetPlayerFacingAngle(playerid, 359.2263); // Large Mansion Interior - Spawnpoint
		}
	}
}

stock pNick(playerid)//Credits to Garsino
{
	new GHNick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, GHNick, MAX_PLAYER_NAME);
 	return GHNick;
}

stock PointInRangeOfPoint(Float:range, Float:x2, Float:y2, Float:z2, Float:X2, Float:Y2, Float:Z2)//Credits to Garsino
{
    X2 -= x2;
    Y2 -= y2;
    Z2 -= z2;
    return ((X2 * X2) + (Y2 * Y2) + (Z2 * Z2)) < (range * range);
}

stock ReturnPercent(Float:amount, Float:procent)//Credits to Garsino
{
	return floatround((amount / 100 * procent));
}

stock SetPlayerPosEx(playerid, Float:posX, Float:posY, Float:posZ, Interior = 0, World = 0)//Credits to Garsino
{
	SetPlayerVirtualWorld(playerid, World);
	SetPlayerInterior(playerid, Interior);
	SetPlayerPos(playerid, posX, posY, posZ);
	SetCameraBehindPlayer(playerid);
	return 1;
}

stock GetFreeHouseID()//Credits to Garsino
{
	new file[40];
    Loop(h, MAX_HOUSES)
    {
        format(file, sizeof(file), HOUSE_FILE, h);
        if(!fexist(file))
        {
            return h;
		}
	}
    return -1;
}

stock GetTotalHouses()//Credits to Garsino
{
	new tmpcount, file[40];
    Loop(h, MAX_HOUSES)
    {
        format(file, sizeof(file), HOUSE_FILE, h);
        if(fexist(file))
        {
            tmpcount++;
		}
	}
    return tmpcount;
}

stock UpdateHouseText(houseid)//Credits to Garsino
{
	new labeltext[50], file[40];
	format(file, sizeof(file), HOUSE_FILE, houseid);
	if(fexist(file))
	{
	    if(!strcmp(HouseInfo[houseid][hOwner], "Nobody", false))
	    {
			format(labeltext, sizeof(labeltext), "%s", GetHouseName(houseid));
			Update3DTextLabelText(HouseLabel[houseid], YELLOW, labeltext);
		}
		else
		{
			format(labeltext, sizeof(labeltext), "%s", GetHouseName(houseid));
			Update3DTextLabelText(HouseLabel[houseid], YELLOW, labeltext);
		}
    }
}

stock DestroyHouseEntrance(houseid, type)//Credits to Garsino
{
    if(type == TYPE_OUT) { DestroyDynamicCP(HouseCPOut[houseid]); }
    if(type == TYPE_INT) { DestroyDynamicCP(HouseCPInt[houseid]); }
	return 1;
}

stock GivePlayerCash(playerid, money)
{
    ServerSideCash[playerid] += money;
    ResetServerCash(playerid);
    UpdateServerCash(playerid,ServerSideCash[playerid]);
    return ServerSideCash[playerid];
}

stock SetPlayerCash(playerid, money)
{
    ServerSideCash[playerid] = money;
    ResetServerCash(playerid);
    UpdateServerCash(playerid,ServerSideCash[playerid]);
    return ServerSideCash[playerid];
}

stock ResetPlayerCash(playerid)
{
    ServerSideCash[playerid] = 0;
    ResetServerCash(playerid);
    UpdateServerCash(playerid,ServerSideCash[playerid]);
    return ServerSideCash[playerid];
}

stock GetPlayerCash(playerid)
{
    return ServerSideCash[playerid];
}

stock GetName(playerid)
{
	new pName[24];
    GetPlayerName(playerid, (pName), sizeof(pName));
    return pName;
}

stock SaveBankStats(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new bFilee[40];
    	format(bFilee, sizeof(bFilee), BANK_FILE, GetName(playerid));
		new INI:file = INI_Open(bFilee);
	
 		INI_WriteInt(file, "Balance", BankInfo[playerid][Balance]);
		INI_WriteInt(file, "Credit", BankInfo[playerid][Credit]);
		INI_WriteInt(file, "Debt", BankInfo[playerid][Debt]);
		INI_WriteInt(file, "Fees", BankInfo[playerid][Fees]);
		INI_WriteInt(file, "Transactions", BankInfo[playerid][Transactions]);
		INI_Close(file);
	}
	return 1;
}

stock CopRadio(color,const string[])
{
	foreach(Player, i)
	{
		if(GetPlayerState(i) != PLAYER_STATE_NONE)
		{
			if(IsACop(i))
			{
				SendClientMessage(i, color, string);
				PlayerPlaySound(i, 2607, 0.0, 0.0, 10.0);
				PlayCrimeReportForPlayer(i, 4, 22);
			}
		}
	}
	return 1;
}

stock SkillBroadCast(hColor, szMessage[], SkillID) {
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pSkill] >= SkillID) {
			SendClientMessage(i, hColor, szMessage);
		}
	}
	return 1;
}

stock MedicRadio(color,const string[])
{
	foreach(Player, i)
	{
		if(GetPlayerState(i) != PLAYER_STATE_NONE)
		{
			if(GetTeam{i} == CLASS_MEDIC)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}

stock SendAdminMessage(color,const astring[])
{
	foreach(Player, i)
	{
		if(GetPlayerState(i) != PLAYER_STATE_NONE)
		{
			if(IsPlayerAdmin(i))
			{
				SendClientMessage(i, color, astring);
			}
			else if(PlayerInfo[i][aLevel] >= 1)
			{
				SendClientMessage(i, color, astring);
			}
		}
	}
	return 1;
}

stock SendVIPMessage(color,const astring[])
{
	foreach(Player, i)
	{
		if(GetPlayerState(i) != PLAYER_STATE_NONE)
		{
			if(PlayerInfo[i][vLevel] >= 1)
			{
				SendClientMessage(i, color, astring);
			}
		}
	}
	return 1;
}

stock MakeNumber()
{
	Number[0] = random(99) +1;
	Number[1] = random(99) +1;
	Number[2] = random(99) +1;
	Number[3] = random(99) +1;
	Number[4] = random(99) +1;
	Number[5] = random(99) +1;
	return 1;
}

stock MakePlayersLottoNumbers(playerid)
{
	PlayersLottoNumbers[0][playerid] = random(99) +1;
	PlayersLottoNumbers[1][playerid] = random(99) +1;
	PlayersLottoNumbers[2][playerid] = random(99) +1;
	PlayersLottoNumbers[3][playerid] = random(99) +1;
	PlayersLottoNumbers[4][playerid] = random(99) +1;
	PlayersLottoNumbers[5][playerid] = random(99) +1;
	return 1;
}

stock SaveFightStats(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new file[40];
		format(file, sizeof(file), STYLE_FILE, GetName(playerid));
		new INI:ffile = INI_Open(file);

		INI_WriteInt(ffile, "FightStyle", FightStyleID{playerid});
		INI_Close(ffile);
	}
	return 1;
}

stock SaveSkillLevels(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new file[40];
		format(file, sizeof(file), SLEVELS_FILE, GetName(playerid));
		new INI:ffile = INI_Open(file);

    	INI_WriteInt(ffile, "CraftSkill", PlayerInfo[playerid][pCraftSkill]);
    	INI_WriteInt(ffile, "ThiefSkill", PlayerInfo[playerid][pThiefSkill]);
    	INI_WriteInt(ffile, "FoodSkill", PlayerInfo[playerid][pFoodSkill]);
    	INI_WriteInt(ffile, "StreetSkill", PlayerInfo[playerid][pStreetSkill]);
    	INI_WriteInt(ffile, "MechSkill", PlayerInfo[playerid][pMechSkill]);
    	INI_WriteInt(ffile, "WeaponSkill", PlayerInfo[playerid][pWeaponSkill]);
    	INI_WriteInt(ffile, "MedicSkill", PlayerInfo[playerid][pMedicSkill]);
    	INI_WriteInt(ffile, "KidnapSkill", PlayerInfo[playerid][pKidnapSkill]);
    	INI_WriteInt(ffile, "RapeSkill", PlayerInfo[playerid][pRapeSkill]);
    	INI_WriteInt(ffile, "HitmanSkill", PlayerInfo[playerid][pHitmanSkill]);
    	INI_WriteInt(ffile, "WhoreSkill", PlayerInfo[playerid][pWhoreSkill]);
    	INI_WriteInt(ffile, "DrugSkill", PlayerInfo[playerid][pDrugSkill]);
    	INI_WriteInt(ffile, "PickPktSkill", PlayerInfo[playerid][pPickPktSkill]);
    	INI_WriteInt(ffile, "ConArtSkill", PlayerInfo[playerid][pConArtSkill]);
    	INI_WriteInt(ffile, "LawyerSkill", PlayerInfo[playerid][pLawyerSkill]);
    	INI_WriteInt(ffile, "SmugglerSkill", PlayerInfo[playerid][pSmugglerSkill]);
    	INI_WriteInt(ffile, "TreasureSkill", PlayerInfo[playerid][pTreasureSkill]);
    	INI_WriteInt(ffile, "FishSkill", PlayerInfo[playerid][pFishSkill]);
    	INI_WriteInt(ffile, "GuardSkill", PlayerInfo[playerid][pGuardSkill]);
		INI_Close(ffile);
	}
	return 1;
}

stock SaveSettings(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new file[40];
		format(file, sizeof(file), SETTINGS_FILE, GetName(playerid));
		new INI:ffile = INI_Open(file);

		INI_WriteInt(ffile, "PMs", PMs{playerid});
		INI_WriteInt(ffile, "JoinMsg", JoinMsg{playerid});
		INI_WriteInt(ffile, "QuitMsg", QuitMsg{playerid});
		INI_WriteInt(ffile, "KickMsg", KickMsg{playerid});
		INI_WriteInt(ffile, "TimeoutMsg", TimeoutMsg{playerid});
		INI_WriteInt(ffile, "TDMenu", TDMenu{playerid});
		INI_WriteInt(ffile, "NameTags", NameTags{playerid});
		INI_WriteInt(ffile, "NTDD", NTDD{playerid});
		INI_WriteInt(ffile, "TogFPS", TogFPS{playerid});
		INI_Close(ffile);
	}
	return 1;
}

stock SaveDegreeStats(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new file[40];
		format(file, sizeof(file), DEGREE_FILE, GetName(playerid));
    	new INI:dfile = INI_Open(file);
    
    	INI_WriteInt(dfile, "dReal", DegreeInfo[playerid][dReal]);
    	INI_WriteInt(dfile, "dLaw", DegreeInfo[playerid][dLaw]);
    	INI_WriteInt(dfile, "dDefense", DegreeInfo[playerid][dDefense]);
    	INI_WriteInt(dfile, "dHealth", DegreeInfo[playerid][dHealth]);
    	INI_WriteInt(dfile, "dMechanic", DegreeInfo[playerid][dMechanic]);
    	INI_WriteInt(dfile, "dDealer", DegreeInfo[playerid][dDealer]);
    	INI_WriteInt(dfile, "dWeapons", DegreeInfo[playerid][dWeapons]);
		INI_Close(dfile);
	}
	return 1;
}

stock SaveUserStats(playerid)
{
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		new file[60];
		new score = GetPlayerScore(playerid), cash = GetPlayerCash(playerid), wanted = GetPlayerWantedLevel(playerid), jail = JailTime[playerid], cage = CageTime[playerid];
		new Float:armour, Float:health;
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);
		PlayerInfo[playerid][pScore] = score;
		PlayerInfo[playerid][pCash] = cash;
		PlayerInfo[playerid][pWanted] = wanted;
		PlayerInfo[playerid][pArmour] = armour;
		PlayerInfo[playerid][pHealth] = armour;
		PlayerInfo[playerid][jTime] = jail;
		PlayerInfo[playerid][cTime] = cage;
		format(file, sizeof(file), USER_FILE, GetName(playerid));
    	new INI:ufile = INI_Open(file);
    	INI_WriteString(ufile, "pPass", PlayerInfo[playerid][pPass]);
    	INI_WriteInt(ufile, "aLevel",PlayerInfo[playerid][aLevel]);
    	INI_WriteInt(ufile, "vLevel",PlayerInfo[playerid][vLevel]);
    	INI_WriteInt(ufile, "pCash", cash);
    	INI_WriteInt(ufile, "pScore", score);
    	INI_WriteInt(ufile, "pKills", PlayerInfo[playerid][pKills]);
    	INI_WriteInt(ufile, "pDeaths", PlayerInfo[playerid][pDeaths]);
    	INI_WriteInt(ufile, "pHoldups", PlayerInfo[playerid][pHoldups]);
    	INI_WriteInt(ufile, "pCrimes", PlayerInfo[playerid][pCrimes]);
    	INI_WriteInt(ufile, "pFined", PlayerInfo[playerid][pFined]);
    	INI_WriteInt(ufile, "pArrests", PlayerInfo[playerid][pArrests]);
    	INI_WriteInt(ufile, "pTakedowns", PlayerInfo[playerid][pTakedowns]);
    	INI_WriteInt(ufile, "pTickets", PlayerInfo[playerid][pTickets]);
    	INI_WriteInt(ufile, "pRope", PlayerInfo[playerid][pRope]);
    	INI_WriteInt(ufile, "pPaintCan", PlayerInfo[playerid][pPaintCan]);
    	INI_WriteInt(ufile, "pScissors", PlayerInfo[playerid][pScissors]);
    	INI_WriteInt(ufile, "pKits", PlayerInfo[playerid][pKits]);
    	INI_WriteInt(ufile, "vLock", PlayerInfo[playerid][vLock]);
    	INI_WriteInt(ufile, "Helper", PlayerInfo[playerid][Helper]);
    	INI_WriteInt(ufile, "hHelper", PlayerInfo[playerid][hHelper]);
    	INI_WriteInt(ufile, "pWarns", PlayerInfo[playerid][pWarns]);
    	INI_WriteInt(ufile, "pKicks", PlayerInfo[playerid][pKicks]);
    	INI_WriteInt(ufile, "pJoins", PlayerInfo[playerid][pJoins]);
    	INI_WriteInt(ufile, "pMaterials", PlayerInfo[playerid][pMaterials]);
    	INI_WriteInt(ufile, "Banned", PlayerInfo[playerid][Banned]);
    	INI_WriteInt(ufile, "jTime", jail);
    	INI_WriteFloat(ufile, "pArmour", armour);
    	INI_WriteFloat(ufile, "pHealth", health);
    	INI_WriteInt(ufile, "pWanted", wanted);
    	INI_WriteInt(ufile, "cTime", cage);
    	INI_WriteInt(ufile, "Skill", PlayerInfo[playerid][pSkill]);
		INI_Close(ufile);
	}
	return 1;
}

stock CalculateWealth(playerid)
{
	new wealth = GetPlayerCash(playerid) + BankInfo[playerid][Balance];
	return wealth;
}

stock SetPlayerTeamFromClass(playerid, classid)
{
	switch(classid)
	{
        case 0..2:
		{
		    GetTeam{playerid} = CLASS_MEDIC;
		    GameTextForPlayer(playerid, "~n~~n~~w~Medics", 5000, 5);
		    return 1;
		}
		case 3..6:
		{
		    GetTeam{playerid} = CLASS_CIA;
		    GameTextForPlayer(playerid, "~n~~n~~w~CIA Agents", 5000, 5);
		    return 1;
		}
		case 7..9:
		{
		    GetTeam{playerid} = CLASS_COPS;
		    GameTextForPlayer(playerid, "~n~~n~~b~Cops", 5000, 5);
		    return 1;
		}
		case 10:
		{
		    GetTeam{playerid} = CLASS_ARMY;
		    GameTextForPlayer(playerid, "~n~~n~~g~Army Soldiers", 5000, 5);
		    return 1;
		}
		case 11:
		{
		    GetTeam{playerid} = CLASS_FBI;
		    GameTextForPlayer(playerid, "~n~~n~~w~FBI Agents", 5000, 5);
		    return 1;
		}
		case 12..99:
		{
		    GetTeam{playerid} = CLASS_CIV;
		    GameTextForPlayer(playerid, "~n~~n~~r~Civilians", 5000, 5);
		}
	}
	return 1;
}

stock IsPlayerInInvalidNosVehicle(playerid)//Credits to Donya
{
    new vehicleid = GetPlayerVehicleID(playerid);
    #define MAX_INVALID_NOS_VEHICLES 52
    new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
    {
        581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
        509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
        452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
    };
    if(IsPlayerInAnyVehicle(playerid))
    {
        for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
        {
            if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
        }
    }
    return false;
}

stock IsPlayerInZone(playerid, zoneid)
{
	if(zoneid == -1) return 0;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	if(x >= ZoneNames[zoneid][zone_minx] && x < ZoneNames[zoneid][zone_maxx]
	&& y >= ZoneNames[zoneid][zone_miny] && y < ZoneNames[zoneid][zone_maxy]
	&& z >= ZoneNames[zoneid][zone_minz] && z < ZoneNames[zoneid][zone_maxz]
	&& z < 1200.0000) return 1;
	return 0;
}

/*stock Float:GetPlayerSpeed(playerid)
{
    new Float:SpeedX, Float:SpeedY, Float:SpeedZ;
    new Float:Speed;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), SpeedX, SpeedY, SpeedZ);
    else GetPlayerVelocity(playerid, SpeedX, SpeedY, SpeedZ);
    Speed = floatsqroot(floatadd(floatpower(SpeedX, 2.0), floatpower(SpeedY, 2.0)));
    return floatmul(Speed, 200.0);
}*/

stock DisplayGroupMembers(groupid, playerid)
{
    new amount[2], string[200], shortstr[55], pname[24];
    format(string, sizeof(string), "%s (%d):", GroupInfo[groupid][grname], groupid);
	SendClientMessage(playerid, ORANGE, string);
	string = "";
	foreach(Player, x)
	{
	    if(IsPlayerConnected(x) && pGroupInfo[x][gid] == groupid)
	    {
	        amount[0] ++;
	        amount[1] ++;
	        GetPlayerName(x, pname, 24);
	        if(GroupInfo[groupid][leader] != x) format(shortstr, sizeof(shortstr), "%s (%d)", pname, x);
	        if(GroupInfo[groupid][leader] == x) format(shortstr, sizeof(shortstr), "[LEADER]%s (%d)", pname, x);
	        if(amount[1] == 1) format(string, sizeof(string), "%s", shortstr);
	        if(amount[1] != 1) format(string, sizeof(string), "%s, %s", string, shortstr);
			if(amount[0] == 6)
	        {
	            strdel(string, strlen(string)-1, strlen(string));
				SendClientMessage(playerid, ORANGE, string);
			    string = "";
			    amount[0] = 0;
	        }
	    }
	}
	strdel(string, strlen(string)-1, strlen(string));
	if(amount[0] != 0) SendClientMessage(playerid, ORANGE, string);
	return 1;
}

stock ListGroups(playerid)
{
	new amount[2], string[200], shortstr[55];
	SendClientMessage(playerid, ORANGE, "Current groups:");
	for(new x=0; x < MAX_GROUPS; x++)
	{
		if(GroupInfo[x][active])
		{
	 		amount[0] ++;
	 		amount[1] ++;
	 		format(shortstr, sizeof(shortstr), "%s (%d)", GroupInfo[x][grname], x);
			if(amount[1] == 1) format(string, sizeof(string), "%s", shortstr);
	        if(amount[1] != 1) format(string, sizeof(string), "%s, %s", string, shortstr);
			if(amount[0] == 4)
			{
			    SendClientMessage(playerid, ORANGE, string);
			    string = "";
			    amount[0] = 0;
			}
		}
	}
	if(amount[1] == 0) SendClientMessage(playerid, RED, "There are no active groups at the moment.");
	if(amount[1] != 0) SendClientMessage(playerid, ORANGE, string);
	return 1;
}



stock SendMessageToLeader(groupi, message[])
{
    return SendClientMessage(GroupInfo[groupi][leader], ORANGE, message);
}

stock GroupJoin(playerid, groupi)
{
	pGroupInfo[playerid][gid] = groupi;
	pGroupInfo[playerid][order] = GroupMembers(groupi);
    pGroupInfo[playerid][attemptjoin] = -1;
    pGroupInfo[playerid][invited] = -1;
    new pname[24], string[130];
	GetPlayerName(playerid, pname, 24);
    format(string, sizeof(string), "%s (%d) has joined the group.", pname, playerid);
    SendMessageToAllGroupMembers(groupi, string);
	format(string, sizeof(string), "You have joined group %s (%d)", GroupInfo[groupi][grname] ,groupi);
	SendClientMessage(playerid, YELLOW, string);
	return 1;
}

stock FindNextSlot()
{
	new id;
	while(GroupInfo[id][active]) id ++;
	return id;
}

stock IsGroupTaken(grpname[])
{
	for(new x; x < MAX_GROUPS; x++)
	{
	    if(GroupInfo[x][active] == 1)
	    {
			if(!strcmp(grpname, GroupInfo[x][grname], false) && strlen(GroupInfo[x][grname]) != 0) return 1;
		}
	}
	return 0;
}

stock GroupInvite(playerid, groupid)
{
    return pGroupInfo[playerid][invited] = groupid;
}

stock CreateGroup(grpname[], owner)
{
	new slotid = FindNextSlot();
	GroupInfo[slotid][leader] = owner;
	format(GroupInfo[slotid][grname], 75, "%s", grpname);
	GroupInfo[slotid][active] = 1;
	pGroupInfo[owner][gid] = slotid;
	pGroupInfo[owner][order] = 1;
	new string[120];
	format(string, sizeof(string), "Group %s (%d) has been created.", grpname, slotid);
	SendClientMessage(owner, ORANGE, string);
	return slotid;
}

stock LeaveGroup(playerid, reason)
{
	new groupid = pGroupInfo[playerid][gid], orderid = pGroupInfo[playerid][order], string[200], pname[24];
	pGroupInfo[playerid][gid] = -1;
	pGroupInfo[playerid][order] = -1;
	GroupCheck(groupid, orderid);
	GetPlayerName(playerid, pname, 24);
	if(reason == 0)
	{
 		format(string, sizeof(string), "%s (%d) has left the group. [Left]", pname, playerid);
 		SendClientMessage(playerid, YELLOW, "You have left the group.");
 	}
	if(reason == 1)
	{
		format(string, sizeof(string), "%s (%d) has left the group. [Kicked]", pname, playerid);
        SendClientMessage(playerid, RED, "You have been kicked from the group.");
	}
    if(reason == 2) format(string, sizeof(string), "%s (%d) has left the group. [Disconnected]", pname, playerid);
	SendMessageToAllGroupMembers(groupid, string);
	return 1;
}

stock GroupCheck(groupid, orderid)
{
	new gmems = GroupMembers(groupid);
	if(!gmems) GroupInfo[groupid][active] = 0;
	if(gmems != 0) ChangeMemberOrder(groupid, orderid);
	return 1;
}

stock GroupMembers(groupid)
{
    if(!GroupInfo[groupid][active]) return 0;
	new groupmembers;
	foreach(Player, i)
	{
		if(IsPlayerConnected(i) && pGroupInfo[i][gid] == groupid) groupmembers++;
	}
	return groupmembers;
}

stock ChangeMemberOrder(groupid, orderid)
{
	foreach(Player, x)
	{
		if(pGroupInfo[x][gid] != groupid || pGroupInfo[x][order] < orderid) continue;
		pGroupInfo[x][order] --;
		if(IsPlayerConnected(x) && pGroupInfo[x][order] == 1)
		{
			GroupInfo[groupid][leader] = x;
			new string[150], pname[24];
			GetPlayerName(x, pname, 24);
			format(string, sizeof(string), "%s (%d) is now the group leader.", pname, x);
			SendMessageToAllGroupMembers(groupid, string);
		}
	}
	return 1;
}

stock SendMessageToAllGroupMembers(groupid, message[])
{
	if(!GroupInfo[groupid][active]) return 0;
	foreach(Player, x)
	{
		if(pGroupInfo[x][gid] == groupid) SendClientMessage(x, ORANGE, message);
	}
	SendAdminMessage(GREY, message);
	return 1;
}

stock IsPlayerHoldingAGun(playerid)
{
	new answer = false, NINEMM = 22, SILENCED = 23, DEAGLE = 24, SHOTGUN = 25, SAWNOFF = 26, COMBAT = 27;
	new UZI = 28, MPFIVE = 29, AKFORTYSEVEN = 30, MFOUR = 31, TECNINE = 32, RIFLE = 33, SNIPER = 34;
	if(GetPlayerWeapon(playerid) == NINEMM || GetPlayerWeapon(playerid) == SILENCED || GetPlayerWeapon(playerid) == DEAGLE ||
	GetPlayerWeapon(playerid) == SHOTGUN || GetPlayerWeapon(playerid) == SAWNOFF || GetPlayerWeapon(playerid) == COMBAT ||
	GetPlayerWeapon(playerid) == UZI || GetPlayerWeapon(playerid) == MPFIVE || GetPlayerWeapon(playerid) == AKFORTYSEVEN ||
	GetPlayerWeapon(playerid) == MFOUR || GetPlayerWeapon(playerid) == TECNINE || GetPlayerWeapon(playerid) == RIFLE ||
	GetPlayerWeapon(playerid) == SNIPER)
	{
	    answer = true;
	}
	return answer;
}

stock GetVehicleDriverID(vehicleid)
{
    foreach(Player, i)
    {
        if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
        if(GetPlayerVehicleID(i) == vehicleid)
        {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock IsPlayerInOwnedVehicle(playerid, vehicleid)
{
	if(IsShopVehicle[vehicleid] != -1)
	{
		if(!strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[vehicleid]][vOwner], false))
		{
		    if(GetPlayerVehicleID(playerid) == vehicleid)
		    {
				return 1;
			}
		}
	}
	return 0;
}

stock IsPlayerNearLawEnforcement(playerid)
{
	new Float:cPos[3], Float:range = 100.0;
	foreach(Player, i)
	{
	    if(GetTeam{i} == CLASS_CIV || GetTeam{i} == CLASS_MEDIC) continue;
	    GetPlayerPos(i, cPos[0], cPos[1], cPos[2]);
	    if(IsPlayerInRangeOfPoint(playerid, range, cPos[0], cPos[1], cPos[2]))
	    {
	        return 1;
	    }
	}
	return 0;
}

stock IsPlayerNearNPC(playerid)
{
	new Float:cPos[3], Float:range = 10.0;
	foreach(Player, i)
	{
	    if(GetTeam{i} == CLASS_CIV || GetTeam{i} == CLASS_MEDIC || GetTeam{i} == CLASS_COPS || GetTeam{i} == CLASS_CIA || GetTeam{i} == CLASS_FBI || GetTeam{i} == CLASS_ARMY) continue;
	    GetPlayerPos(i, cPos[0], cPos[1], cPos[2]);
	    if(IsPlayerInRangeOfPoint(playerid, range, cPos[0], cPos[1], cPos[2]))
	    {
	        return 1;
	    }
	}
	return 0;
}

stock IsPlayerInWater(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
	return 0;
}

stock IsPlayerAiming(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) || (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
	return 0;
}

stock IsPlayerUndergoingHoldup(playerid)
{
	if(IsRobbingIsle{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingVegas{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingRedsands{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingCalg{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingDrag{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingBank1{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingBank2{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingBank3{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingBank4{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingLVPD{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingBar{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu1{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu2{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu3{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu4{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu5{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingAmmu6{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingFBI{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingUNI{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingCIA{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingClub{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingGym{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingShot1{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingShot2{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingShot3{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingShot4{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingShot5{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingCluck1{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingCluck2{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingCluck3{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingStore1{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingStore2{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingStore3{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingStore4{playerid} == true)
	{
	    return 1;
	}
	else if(IsRobbingPizza{playerid} == true)
	{
	    return 1;
	}
	else return 0;
}

stock GunPath(playerid)
{
    new file[64];
    format(file, sizeof(file), GUN_FILE, GetName(playerid));
    return file;
}

stock PosPath(playerid)
{
    new file[64];
    format(file, sizeof(file), POS_FILE, GetName(playerid));
    return file;
}

stock SaveGunStats(playerid)
{
	if(fexist(GunPath(playerid)))
	{
		GetPlayerWeaponData(playerid, 0, GunInfo[playerid][gSlot0_gun], GunInfo[playerid][gSlot0_ammo]);
		GetPlayerWeaponData(playerid, 1, GunInfo[playerid][gSlot1_gun], GunInfo[playerid][gSlot1_ammo]);
		GetPlayerWeaponData(playerid, 2, GunInfo[playerid][gSlot2_gun], GunInfo[playerid][gSlot2_ammo]);
		GetPlayerWeaponData(playerid, 3, GunInfo[playerid][gSlot3_gun], GunInfo[playerid][gSlot3_ammo]);
		GetPlayerWeaponData(playerid, 4, GunInfo[playerid][gSlot4_gun], GunInfo[playerid][gSlot4_ammo]);
		GetPlayerWeaponData(playerid, 5, GunInfo[playerid][gSlot5_gun], GunInfo[playerid][gSlot5_ammo]);
		GetPlayerWeaponData(playerid, 6, GunInfo[playerid][gSlot6_gun], GunInfo[playerid][gSlot6_ammo]);
		GetPlayerWeaponData(playerid, 7, GunInfo[playerid][gSlot7_gun], GunInfo[playerid][gSlot7_ammo]);
		GetPlayerWeaponData(playerid, 8, GunInfo[playerid][gSlot8_gun], GunInfo[playerid][gSlot8_ammo]);
		GetPlayerWeaponData(playerid, 9, GunInfo[playerid][gSlot9_gun], GunInfo[playerid][gSlot9_ammo]);
		GetPlayerWeaponData(playerid, 10, GunInfo[playerid][gSlot10_gun], GunInfo[playerid][gSlot10_ammo]);
		GetPlayerWeaponData(playerid, 11, GunInfo[playerid][gSlot11_gun], GunInfo[playerid][gSlot11_ammo]);
		GetPlayerWeaponData(playerid, 12, GunInfo[playerid][gSlot12_gun], GunInfo[playerid][gSlot12_ammo]);

		new INI:file = INI_Open(GunPath(playerid));
	    INI_WriteInt(file, "gSlot0_gun", GunInfo[playerid][gSlot0_gun]);
	    INI_WriteInt(file, "gSlot0_ammo", GunInfo[playerid][gSlot0_ammo]);
	    INI_WriteInt(file, "gSlot1_gun", GunInfo[playerid][gSlot1_gun]);
	    INI_WriteInt(file, "gSlot1_ammo", GunInfo[playerid][gSlot1_ammo]);
	    INI_WriteInt(file, "gSlot2_gun", GunInfo[playerid][gSlot2_gun]);
	    INI_WriteInt(file, "gSlot2_ammo", GunInfo[playerid][gSlot2_ammo]);
	    INI_WriteInt(file, "gSlot3_gun", GunInfo[playerid][gSlot3_gun]);
	    INI_WriteInt(file, "gSlot3_ammo", GunInfo[playerid][gSlot3_ammo]);
	    INI_WriteInt(file, "gSlot4_gun", GunInfo[playerid][gSlot4_gun]);
	    INI_WriteInt(file, "gSlot4_ammo", GunInfo[playerid][gSlot4_ammo]);
	    INI_WriteInt(file, "gSlot5_gun", GunInfo[playerid][gSlot5_gun]);
	    INI_WriteInt(file, "gSlot5_ammo", GunInfo[playerid][gSlot5_ammo]);
	    INI_WriteInt(file, "gSlot6_gun", GunInfo[playerid][gSlot6_gun]);
	    INI_WriteInt(file, "gSlot6_ammo", GunInfo[playerid][gSlot6_ammo]);
	    INI_WriteInt(file, "gSlot7_gun", GunInfo[playerid][gSlot7_gun]);
	    INI_WriteInt(file, "gSlot7_ammo", GunInfo[playerid][gSlot7_ammo]);
	    INI_WriteInt(file, "gSlot8_gun", GunInfo[playerid][gSlot8_gun]);
	    INI_WriteInt(file, "gSlot8_ammo", GunInfo[playerid][gSlot8_ammo]);
	    INI_WriteInt(file, "gSlot9_gun", GunInfo[playerid][gSlot9_gun]);
	    INI_WriteInt(file, "gSlot9_ammo", GunInfo[playerid][gSlot9_ammo]);
	    INI_WriteInt(file, "gSlot10_gun", GunInfo[playerid][gSlot10_gun]);
	    INI_WriteInt(file, "gSlot10_ammo", GunInfo[playerid][gSlot10_ammo]);
	    INI_WriteInt(file, "gSlot11_gun", GunInfo[playerid][gSlot11_gun]);
	    INI_WriteInt(file, "gSlot11_ammo", GunInfo[playerid][gSlot11_ammo]);
	    INI_WriteInt(file, "gSlot12_gun", GunInfo[playerid][gSlot12_gun]);
	    INI_WriteInt(file, "gSlot12_ammo", GunInfo[playerid][gSlot12_ammo]);
	    INI_Close(file);
	}
	return 1;
}

stock SavePosStats(playerid)
{
	if(IsLoggedIn{playerid} == 1 && HasSpawned{playerid} == true)
	{
		new Float:x, Float:y, Float:z, Float:a, interior, world;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		interior = GetPlayerInterior(playerid);
		world = GetPlayerVirtualWorld(playerid);
		if(fexist(PosPath(playerid)))
		{
			new INI:file = INI_Open(PosPath(playerid));
		    INI_WriteFloat(file, "rPos_X", x);
		    INI_WriteFloat(file, "rPos_Y", y);
		    INI_WriteFloat(file, "rPos_Z", z);
		    INI_WriteFloat(file, "rPos_A", a);
		    INI_WriteInt(file, "rInterior", interior);
		    INI_WriteInt(file, "rWorld", world);
		    INI_Close(file);
		}
	}
	return 1;
}

stock RemoveOwnedVehs(playerid)
{
	new count = 0;
	for(new v = 0; v < MAX_SHOP_VEHICLES; v++)
	{
		if(IsShopVehicle[v] != -1)
		{
	    	if(!strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[v]][vOwner], false))
	        {
	            new file[40];
				format(file, sizeof(file), VEH_FILE, IsShopVehicle[v]);
				if(fexist(file))
				{
					fremove(file);
					count++;
		            if(count == MAX_VIP_VEHS)
		            {
		                break;
		            }
		            else continue;
				}
	        }
		}
	}
	return 1;
}

stock SellBiz(bizid)
{
	new file[40], bowner[24], bname[50];
	format(file, sizeof(file), BIZ_FILE, bizid);
	format(bname, sizeof(bname), "For-Sale");
	format(bowner, sizeof(bowner), "%s", DEFAULT_BIZ_OWNER_NAME);
	Update3DTextLabelText(bLabel[bizid], YELLOW, bizlabel);
	BizInfo[bizid][bOwner] = bowner;
	BizInfo[bizid][bName] = bname;
	BizInfo[bizid][bEarnings] = 0;
	SaveBizStats(bizid);
	return 1;
}

stock SellHouse(houseid)
{
	new gname[40], gowner[24];
	format(gowner,sizeof(gowner), "Nobody");
	format(gname,sizeof(gname), "For-Sale");
	//format(gname, sizeof(gname), "This house is for sale!\n House Type: 1 Story House\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", HouseInfo[houseid][hValue], houseid);
	HouseInfo[houseid][hOwner] = gowner;
	HouseInfo[houseid][hName] = gname;
	new stringg[24];
	format(stringg, sizeof(stringg), "Empty");
	HouseInfo[houseid][hKeyOwner1] = stringg;
	HouseInfo[houseid][hKeyOwner2] = stringg;
	HouseInfo[houseid][hKeyOwner3] = stringg;
	HouseInfo[houseid][hKeyOwner4] = stringg;
	HouseInfo[houseid][hKeyOwner5] = stringg;
	HouseInfo[houseid][hKeyOwner6] = stringg;
	HouseInfo[houseid][hKeyOwner7] = stringg;
	HouseInfo[houseid][hKeyOwner8] = stringg;
	HouseInfo[houseid][hKeyOwner9] = stringg;
	HouseInfo[houseid][hKeyOwner10] = stringg;
	Update3DTextLabelText(HouseLabel[houseid], YELLOW, gname);
	/*Loop(h2, MAX_HOUSES)
	{
		if(IsHouseInRangeOfHouse(houseid, h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != houseid)
		{
			format(file2, sizeof(file2), HOUSE_FILE, h2);
			HouseInfo[h2][hValue] = HouseInfo[h2][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SELLING_PERCENT_RETURN);
			SaveHouseStats(h2);
		}
	}*/
	SaveHouseStats(houseid);
	return 1;
}

stock PreloadAnimationLibrary(playerid, animlib[])
{
    return ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
}

stock PropertySet(name[],value[])//Credits to DracoBlue
{
  setproperty(0, "", dprop_PRIVATE_hash(name), value);
}

dprop_PRIVATE_hash(buf[])//Credits to DracoBlue
{
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

main()
{
    print("[---------------------------------------]");
    print("[--------- Gamemode: ACnR "Version" ---------]");
    print("[---------------------------------------]");
	WasteDeAMXersTime();//Credits to Mauzen
}

new Text3D:ConnectedBot1;
new Text3D:ConnectedBot2;
new Text3D:ConnectedBot3;
new Text3D:ConnectedBot4;
new Text3D:ConnectedBot5;

public ConnectBot1()
{
    ConnectNPC("[BOT]OfficerDurland", "lvpddeskcop");
    SetTimer("ConnectBot2", 1000, false);
    printf("[BOT]OfficerDurland has connected to the server!");
}
public ConnectBot2()
{
	ConnectNPC("[BOT]AlaskaAirlines","at400_ls");
    SetTimer("ConnectBot3", 1000, false);
    printf("[BOT]AlaskaAirlines has connected to the server!");
}
public ConnectBot3()
{
    ConnectNPC("[BOT]DeltaAirways","at400_lv");
    SetTimer("ConnectBot4", 1000, false);
    printf("[BOT]DeltaAirways has connected to the server!");
}
public ConnectBot4()
{
    ConnectNPC("[BOT]UnitedAirlines","at400_sf");
    printf("[BOT]UnitedAirlines has connected to the server!");
}
public LoadFPS(playerid)
{
    if(TogFPS{playerid} == 1) { ShowFPSCounter(playerid); }
}

stock token_by_delim(const string[], return_str[], delim, start_index)
{
	new x=0;
	while(string[start_index] != EOS && string[start_index] != delim) {
	    return_str[x] = string[start_index];
	    x++;
	    start_index++;
	}
	return_str[x] = EOS;
	if(string[start_index] == EOS) start_index = (-1);
	return start_index;
}

stock LoadStaticVehiclesFromFile(const filename[])
{
	new File:file_ptr;
	new line[256];
	new var_from_line[64];
	new vehicletype;
	new Float:SpawnX;
	new Float:SpawnY;
	new Float:SpawnZ;
	new Float:SpawnRot;
    new Color1, Color2;
	new index;
	new vehicles_loaded;

	file_ptr = fopen(filename,filemode:io_read);
	if(!file_ptr) return 0;

	vehicles_loaded = 0;

	while(fread(file_ptr,line,256) > 0)
	{
	    index = 0;

	    // Read type
  		index = token_by_delim(line,var_from_line,',',index);
  		if(index == (-1)) continue;
  		vehicletype = strval(var_from_line);
   		if(vehicletype < 400 || vehicletype > 611) continue;

  		// Read X, Y, Z, Rotation
  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnX = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnY = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnZ = floatstr(var_from_line);

  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		SpawnRot = floatstr(var_from_line);

  		// Read Color1, Color2
  		index = token_by_delim(line,var_from_line,',',index+1);
  		if(index == (-1)) continue;
  		Color1 = strval(var_from_line);

  		index = token_by_delim(line,var_from_line,';',index+1);
  		Color2 = strval(var_from_line);

		AddStaticVehicleEx(vehicletype,SpawnX,SpawnY,SpawnZ,SpawnRot,Color1,Color2,(30*60)); // respawn 30 minutes

		vehicles_loaded++;
	}

	fclose(file_ptr);
	printf("Loaded %d vehicles from: %s",vehicles_loaded,filename);
	return vehicles_loaded;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(NameTags{playerid} == 1)
    {
    	ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
    }
    else
    {
    	ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    }
    return 1;
}

public OnGameModeInit()
{
	new mapnamestring[40];
	format(mapnamestring, sizeof(mapnamestring), "mapname ACnR %s", Version);
	SendRconCommand(mapnamestring);
    SetGameModeText("Cops And Robbers [LV]");
	LoadDynamicDoors();

    ConnectNPC("[BOT]Elvis", "elvis");
    printf("[BOT]Elvis has connected to the server!");
    SetTimer("ConnectBot1", 1000, false);

    bot1 = CreateVehicle(577, 0.0, 0.0, 5.0, 0.0, 3, 3, 5000); // AT400_LOS_SANTOS
    bot2 = CreateVehicle(577, 0.0, 0.0, 5.0, 0.0, 3, 3, 5000); // AT400_LAS_VENTURAS
    bot3 = CreateVehicle(577, 0.0, 0.0, 5.0, 0.0, 3, 3, 5000); // AT400_SAN_FIERRO

	ConnectedBot1 = Create3DTextLabel("[BOT]Elvis (0)",COLOR_WHITE,0.0, 0.0,0.0,30.0,0);
	ConnectedBot2 = Create3DTextLabel("[BOT]OfficerDurland (1)",BLUE,0.0, 0.0,0.0,30.0,0);
	ConnectedBot3 = Create3DTextLabel("[BOT]AlaskaAirlines (2)",COLOR_WHITE,0.0, 0.0,0.0,30.0,0);
	ConnectedBot4 = Create3DTextLabel("[BOT]DeltaAirways (3)",COLOR_WHITE,0.0, 0.0,0.0,30.0,0);
	ConnectedBot5 = Create3DTextLabel("[BOT]UnitedAirlines (4)",COLOR_WHITE,0.0, 0.0,0.0,30.0,0);

	Loop(h, MAX_HOUSES)
	{
	    new file[40], labeltext[40];
		format(file, sizeof(file), HOUSE_FILE, h);
	    if(fexist(file))
    	{
        	INI_ParseFile(file, "LoadHouse_%s", .bExtra = true, .extra = h);
        	HouseCPOut[h] = CreateDynamicCP(HouseInfo[h][hCPOutX], HouseInfo[h][hCPOutY], HouseInfo[h][hCPOutZ], 1.0, HouseInfo[h][hWorld], HouseInfo[h][hSpawnInterior], -1, 4.0);
			CreateCorrectHouseExitCP(h);
			format(labeltext, sizeof(labeltext), "%s", GetHouseName(h));
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, HouseInfo[h][hCPOutX], HouseInfo[h][hCPOutY], HouseInfo[h][hCPOutZ] + 0.5, 30.0, HouseInfo[h][hWorld], 1);
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i++)
	{
	    new file[40];
		format(file, sizeof(file), BIZ_FILE, i);
		if(fexist(file))
		{
    		INI_ParseFile(file, "LoadBiz_%s", .bExtra = true, .extra = i);

			bizentercp[i] = CreateDynamicCP(BizInfo[i][bExtX], BizInfo[i][bExtY], BizInfo[i][bExtZ], 1.0, 0, 0, -1, 4.0);
			bizexitcp[i] = CreateDynamicCP(BizInfo[i][bIntX], BizInfo[i][bIntY], BizInfo[i][bIntZ], 1.0, BizInfo[i][bVWorld], BizInfo[i][bInterior], -1, 4.0);
			bizrobberycp[i] = CreateDynamicCP(BizInfo[i][bRobX], BizInfo[i][bRobY], BizInfo[i][bRobZ], 1.0, BizInfo[i][bVWorld], BizInfo[i][bInterior], -1, 4.0);

			format(bizlabel, sizeof(bizlabel), "%s", BizInfo[i][bName]);
			bLabel[i] = Create3DTextLabel(bizlabel, YELLOW, BizInfo[i][bExtX], BizInfo[i][bExtY], BizInfo[i][bExtZ]+0.5, 30.0, 0, 1);
		}
	}
	
 	for(new p = 0; p < MAX_PLAYERS; p++)
	{
	    ACnRInfo[p] = TextDrawCreate(18.000000, 428.000000, "_");
		TextDrawAlignment(ACnRInfo[p], 0);
		TextDrawBackgroundColor(ACnRInfo[p], 0x000000ff);
		TextDrawFont(ACnRInfo[p], 2);
		TextDrawLetterSize(ACnRInfo[p], 0.199999, 0.899999);
		TextDrawColor(ACnRInfo[p], 0xffffffff);
		TextDrawSetOutline(ACnRInfo[p], 1);
		TextDrawSetProportional(ACnRInfo[p], 1);
		TextDrawSetShadow(ACnRInfo[p], 1);

		BomberStage{p} = 0;
	}

	foreach(Player, r)
	{
	    pGroupInfo[r][gid] = -1;
		pGroupInfo[r][order] = -1;
		pGroupInfo[r][invited] = -1;
		pGroupInfo[r][attemptjoin] = -1;
		
		KillTimer(biztimer{r});
    	KillTimer(attimer{r});
    	KillTimer(isletimer{r});
		KillTimer(vegastimer{r});
		KillTimer(redsandstimer{r});
		KillTimer(calgtimer{r});
		KillTimer(dragtimer{r});
		KillTimer(banktimer{r});
		KillTimer(lvpdtimer{r});
		KillTimer(bartimer{r});
		KillTimer(ammutimer{r});
		KillTimer(shottimer{r});
		KillTimer(clucktimer{r});
		KillTimer(storetimer{r});
		KillTimer(pizzatimer{r});
		KillTimer(clubtimer{r});
		KillTimer(gymtimer{r});
		KillTimer(fbitimer{r});
		KillTimer(unitimer{r});
		KillTimer(ciatimer{r});
		KillTimer(ZoneTimer[r]);
		KillTimer(JailTimer[r]);
		KillTimer(CageTimer[r]);
		
		ZoneTimer[r] = SetTimerEx("Update_Zones", 1000, true, "d", r);
    	ZoneUpdates[r] = 1;
		Player_Zone[r] = -1;

		IsPlayersFirstSpawn{r} = true;

		HasDied{r} = false;
    	HasSpawned{r} = false;
    	IsPlayerUsingTuneMenu{r} = false;
    	HasBeenArrested{r} = false;
    	IsNewbieMuted{r} = false;
    	HasShieldAttached{r} = false;
    	HasBandanaAttached{r} = false;
    	HasBeenTied{r} = false;
    	HasBeenCuffed{r} = false;
    	IsCaged{r} = false;
    	IsInCellCP{r} = false;
    	IsInCellCP1{r} = false;
    	IsInCellCP2{r} = false;
    	IsInCellCP3{r} = false;
    	IsInCellCP4{r} = false;
    	IsInCellCP5{r} = false;
    	IsInCellCP6{r} = false;
    	CanESC{r} = true;
    	GoToJail{r} = false;
		IsJailed{r} = false;
    	HasSavedPos{r} = false;
    	HasSpawned{r} = false;
    	IsPlayerEditingObject{r} = false;
    	IsPlayerAttachingObject{r} = false;
    	IsPlayerRobbingBiz{r} = false;
    	IsPlayerSetBuilder{r} = false;
		IsPlayerRobbingHouse{r} = false;
		IsPlayerInArena{r} = false;
		IsPlayerGettingMatsNV{r} = false;
		IsPlayerGettingMatsBS{r} = false;
    	IsRobbingIsle{r} = false;
    	IsRobbingVegas{r} = false;
    	IsRobbingRedsands{r} = false;
    	IsRobbingCalg{r} = false;
    	IsRobbingDrag{r} = false;
    	IsRobbingLVPD{r} = false;
    	IsRobbingClub{r} = false;
    	IsRobbingGym{r} = false;
    	IsRobbingBank1{r} = false;
    	IsRobbingBank2{r} = false;
    	IsRobbingBank3{r} = false;
    	IsRobbingBank4{r} = false;
    	IsRobbingLVPD{r} = false;
    	IsRobbingBar{r} = false;
    	IsRobbingFBI{r} = false;
    	IsRobbingUNI{r} = false;
    	IsRobbingCIA{r} = false;
    	IsRobbingAmmu1{r} = false;
    	IsRobbingAmmu2{r} = false;
    	IsRobbingAmmu3{r} = false;
    	IsRobbingAmmu4{r} = false;
    	IsRobbingAmmu5{r} = false;
    	IsRobbingAmmu6{r} = false;
    	IsRobbingShot1{r} = false;
    	IsRobbingShot2{r} = false;
    	IsRobbingShot3{r} = false;
    	IsRobbingShot4{r} = false;
    	IsRobbingShot5{r} = false;
    	IsRobbingCluck1{r} = false;
    	IsRobbingCluck2{r} = false;
    	IsRobbingCluck3{r} = false;
    	IsRobbingStore1{r} = false;
    	IsRobbingStore2{r} = false;
    	IsRobbingStore3{r} = false;
    	IsRobbingStore4{r} = false;
    	IsRobbingPizza{r} = false;
    	HasBeenIssuedTicket{r} = false;
    	IsVIPInColorMode{r} = false;
    	HasChangedSkin{r} = false;
    	IsPlayerUsingAnim{r} = false;
    	HasPlayerDiedInJail{r} = false;
    	HasPlayerDiedInCage{r} = false;
		HasBandanaAttached{r} = false;
		HasShieldAttached{r} = false;
		IsAdminUnderCover{r} = false;

 		RemovePlayerAttachedObject(r, 0);
		RemovePlayerAttachedObject(r, 1);

    	SpecInfo[r][IsSpectating] = -1;
    	IsAdminSpectating{r} = false;
    	IsPlayerBeingSpectated{r} = false;
    	PlayerBeingSpectatedBy[r] = -1;

		hasenteredtower{r} = 0;

    	IsInCell{r} = 0;
    	InMateID[r] = 0;

    	BizRobCP[r] = -1;
    	BizID[r] = -1;

    	HasHit[r] = 0;
    	HasStreetCall[r] = 0;
    	HasFoodCall[r] = 0;
    	HasLawyerCall[r] = 0;
    	HasMechCall[r] = 0;
    	HasCraftsCall[r] = 0;
    	HasWhoreCall[r] = 0;
    	HasWeaponsCall[r] = 0;
		HasPlacedHit[r] = -1;
		BomberStage{r} = 0;

    	IsLoggedIn{r} = 0;
    	BribeTo[r] = -1;
		Bribe[r] = -1;
		BribeFrom[r] = -1;
    	IsInGod{r} = 0;
    	IsOnduty{r} = 0;
    	IsInGodCar{r} = 0;
    	IsMuted{r} = 0;
    	HasLotteryTicket{r} = 0;
    	HasMadeEvent{r} = 0;
		IsAtEvent{r} = 0;
		HasAdminStoppedJoins = 0;
		text_line_count{r} = 0;
    	HasSetCheckpoint{r} = 0;
    	lastx[r] = 0.0;
		lasty[r] = 0.0;
		lastz[r] = 0.0;
		chattingwith[r] = -1;
		shotsfired[r] = 0;

		pGroupInfo[r][gid] = -1;
		pGroupInfo[r][invited] = -1;
		pGroupInfo[r][attemptjoin] = -1;

    	verifydestroycar{r} = 0;

    	for(new o = 0; o < MAX_SET_OBJECTS; o++)
    	{
    		GetSetObjects[r][o] = -1;
    	}
		GetSetObjectsCount[r] = 0;
    	
    	SetPlayerColor(r, GREY);

 		TextDrawShowForPlayer(r, ACnRInfo[r]);
 		TextDrawSetString(ACnRInfo[r], "Atlantis Cops & Robbers "Version"");
	}
	
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    IsShopVehicle[v] = -1;

	    VehicleBombOwner[v] = INVALID_PLAYER_ID;//bomb system

	    GetVehicleCurrentHealth[v] = 1000.0;
	    GetVehicleHealth(v, GetVehicleCurrentHealth[v]);

	    GetVehicleFuel[v] = 75 + random(25);
	}

	for(new line; line<15; line++)
	{
    	format(XMsgStr[line], 128, "_");
	}
    XMsg[2] = TextDrawCreate(140, 374.000000, XMsgStr[2]);
    XMsg[3] = TextDrawCreate(140, 383.000000, XMsgStr[3]);
    XMsg[4] = TextDrawCreate(140, 392.000000, XMsgStr[4]);
    XMsg[5] = TextDrawCreate(140, 410.000000, XMsgStr[5]);
    XMsg[6] = TextDrawCreate(140, 410.000000, XMsgStr[6]);
    XMsg[7] = TextDrawCreate(140, 419.000000, XMsgStr[7]);
    XMsg[8] = TextDrawCreate(140, 428.000000, XMsgStr[8]);
    XMsg[9] = TextDrawCreate(140, 436.000000, XMsgStr[9]);
    for(new line; line<15; line++)
	{
    	TextDrawLetterSize(XMsg[line], 0.230000, 1.100000);
    	TextDrawSetShadow(XMsg[line], 0);
    	TextDrawTextSize(XMsg[line], 640, 480);
    	TextDrawBoxColor(XMsg[line], 0x000000FF);
    	TextDrawSetProportional(XMsg[line], 1);
    	TextDrawFont(XMsg[line], 1);
    	TextDrawSetOutline(XMsg[line], 1);
    	TextDrawShowForAll(XMsg[line]);
	}

	LVPD_pickup_gun = CreatePickup(356, 1, 2293.1216,2455.5334,10.8203, -1);
	LVPD_pickup_arm = CreatePickup(1242, 1, 2293.1194,2447.1709,10.8203, -1);
	
	FBI_pickup_gun = CreatePickup(356, 1, 2493.1833,2394.5808,10.8203, -1);
	FBI_pickup_arm = CreatePickup(1242, 1, 2493.1838,2400.7966,10.8203, -1);
	
	CIA_pickup_gun = CreatePickup(356, 1, 946.9702,1730.2723,8.8516, -1);
	CIA_pickup_arm = CreatePickup(1242, 1, 946.9492,1736.2869,8.8516, -1);

	Create3DTextLabel("Las Venturas University\n\nCommand's: /robbery", YELLOW, -2032.79, -117.39, 1034.80 + 0.5, 100.0, 0, 1);
	Create3DTextLabel("Las Venturas Gym\n\nCommand's: /robbery", YELLOW, 766.7718, -59.7159, 1000.6563 + 0.5, 100.0, 0, 1);
	Create3DTextLabel("Las Venturas Night Club\n\nCommand's: /robbery", YELLOW, 499.9675, -20.6944, 1000.6797 + 0.5, 100.0, 0, 1);
	Create3DTextLabel("Well Stacked Pizzas\n\nCommand's: /robpizza", YELLOW, 374.7570, -118.8264, 1001.4995 + 0.5, 100.0, 0, 1);
	Create3DTextLabel("The Emerald Isle Casino\n\nCommand's: /robcasino", YELLOW, 1139.7198, -4.0644, 1000.6719 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("Las Venturas Casino\n\nCommand's: /robcasino", YELLOW, 1139.7198, -4.0644, 1000.6719 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("Redsands Casino\n\nCommand's: /robcasino", YELLOW, 1139.7198, -4.0644, 1000.6719 + 0.5, 100.0, 3, 1);
	Create3DTextLabel("Caligulas Casino\n\nCommand's: /robcasino", YELLOW, 2156.6917, 1599.5377, 1006.1797 + 0.5, 100.0, 0, 1);
	Create3DTextLabel("4 Dragons Casino\n\nCommand's: /robcasino", YELLOW, 1955.3691, 1018.0455, 992.4688 + 0.5, 100.0, 0, 1);

	Create3DTextLabel("Las Venturas Bank\nLas Venturas Square Branch\n\nCommand's: /robbank", YELLOW, 2316.6169, -7.3947, 26.7422 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("Las Venturas Bank\nEl Quebrados Branch\n\nCommand's: /robbank", YELLOW, 2316.6169, -7.3947, 26.7422 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("Las Venturas Bank\nFort Carson Branch\n\nCommand's: /robbank", YELLOW, 2316.6169, -7.3947, 26.7422 + 0.5, 100.0, 3, 1);
	Create3DTextLabel("Las Venturas Bank\nTierra Robada Branch\n\nCommand's: /robbank", YELLOW, 2316.6169, -7.3947, 26.7422 + 0.5, 100.0, 4, 1);

	Create3DTextLabel("24/7 Store\n\nCommand's: /robstore", YELLOW, -10.6035, -178.2635, 1003.5469 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("24/7 Store\n\nCommand's: /robstore", YELLOW, -10.6035, -178.2635, 1003.5469 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("24/7 Store\n\nCommand's: /robstore", YELLOW, -10.6035, -178.2635, 1003.5469 + 0.5, 100.0, 3, 1);
	Create3DTextLabel("24/7 Store\n\nCommand's: /robstore", YELLOW, -10.6035, -178.2635, 1003.5469 + 0.5, 100.0, 4, 1);

	Create3DTextLabel("Cluck'n Bell\n\nCommand's: /robcluck", YELLOW, 371.5888, -6.0188, 1001.8589 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("Cluck'n Bell\n\nCommand's: /robcluck", YELLOW, 371.5888, -6.0188, 1001.8589 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("Cluck'n Bell\n\nCommand's: /robcluck", YELLOW, 371.5888, -6.0188, 1001.8589 + 0.5, 100.0, 3, 1);

	Create3DTextLabel("Burger Shot\n\nCommand's: /robshot", YELLOW, 376.5498, -67.4389, 1001.5078 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("Burger Shot\n\nCommand's: /robshot", YELLOW, 376.5498, -67.4389, 1001.5078 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("Burger Shot\n\nCommand's: /robshot", YELLOW, 376.5498, -67.4389, 1001.5078 + 0.5, 100.0, 3, 1);
	Create3DTextLabel("Burger Shot\n\nCommand's: /robshot", YELLOW, 376.5498, -67.4389, 1001.5078 + 0.5, 100.0, 4, 1);
	Create3DTextLabel("Burger Shot\n\nCommand's: /robshot", YELLOW, 376.5498, -67.4389, 1001.5078 + 0.5, 100.0, 5, 1);

	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 1, 1);
	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 2, 1);
	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 3, 1);
	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 4, 1);
	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 5, 1);
	Create3DTextLabel("Ammunation\n\nCommand's: /robammu", YELLOW, 295.5833, -80.8050, 1001.5156 + 0.5, 100.0, 6, 1);

	Create3DTextLabel("Las Venturas Bar\n\nCommand's: /robbery", YELLOW, 496.4771, -76.0378, 998.7578 + 0.5, 100.0, 0, 1);

	Create3DTextLabel("Admin Tower Entrance\n\nAccess: Admin/VIP ONLY", YELLOW, 2147.0127, 2425.3252, 65.2773 + 0.5, 5.0, 0, 1);

    Create3DTextLabel("Las Venturas Materials Factory\n\nCommand's: /getmats", YELLOW, 966.2469, 2160.6836, 10.8203 + 0.5, 150.0, 0, 1);
    Create3DTextLabel("Las Venturas Materials Factory\n\nCommand's: /getmats", YELLOW, -2488.5205, 2295.3135, 4.9844 + 0.5, 150.0, 0, 1);
	
	Create3DTextLabel("Las Venturas FBI HQ Car Park\n\nAccess: FBI ONLY", YELLOW, 242.2486,66.3108,1003.6406 + 0.5, 30.0, 0, 1);

	Create3DTextLabel("LVPD\n\nBuilding Elevator", YELLOW, 2297.1174, 2451.5051, 10.8203 + 0.5, 30.0, 0, 1);
	Create3DTextLabel("LVPD\n\nBuilding Elevator", YELLOW, 2296.0713, 2458.1235, 38.6875 + 0.5, 30.0, 0, 1);
	Create3DTextLabel("LVPD\n\nBuilding Elevator", YELLOW, 2268.0745, 2449.2795, 3.5313 + 0.5, 30.0, 0, 1);
	Create3DTextLabel("LVPD\n\nBuilding Elevator", YELLOW, 2268.0991, 2449.2891, -7.1953 + 0.5, 30.0, 0, 1);
	Create3DTextLabel("LVPD\n\nBuilding Elevator", YELLOW, 196.6970, 168.1543, 1003.1533 + 0.5, 30.0, 0, 1);

    Create3DTextLabel("Admin Tower Hanger\n\nCommand's: /openhanger /closehanger", YELLOW, 2159.2090, 2414.2146, 65.2773 + 0.5, 30.0, 0, 1);

    Create3DTextLabel("Las Venturas FBI HQ Security Gate\n\nCommand's: /openhq /closehq", YELLOW, 2517.08227539, 2346.28271484, 13.30023003, 30.0, 0, 1);
    Create3DTextLabel("LVPD Security Gate\n\nCommand's: /openpd /closepd", YELLOW, 2335.0812988281, 2443.8461914063, 7.3274974822998, 30.0, 0, 1);
    Create3DTextLabel("LVPD Security Gate\n\nCommand's: /openpd /closepd", YELLOW, 2293.9602050781, 2499.248046875, 5.5885953903198, 30.0, 0, 1);

	Create3DTextLabel("Las Venturas Arena\n\nCommands: /enterarena /exitarena", YELLOW, 1099.5729, 1601.4722, 12.5469 + 0.5, 30.0, 0, 1);

    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 2114.8848, 920.2251, 10.8203 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 2639.7700, 1106.1627, 10.8203 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 2202.4160, 2474.7686, 10.8203 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 2147.2354, 2747.9351, 10.8203 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 1596.1118, 2198.9944, 10.8203 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, 612.0298, 1695.0731, 6.9922 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, -1328.3317, 2677.4412, 50.0625 + 0.5, 50.0, 0, 1);
    Create3DTextLabel("Las Venturas Service Station\n\nCommand's: /service", YELLOW, -1471.3004, 1864.1031, 32.6328 + 0.5, 50.0, 0, 1);

    Create3DTextLabel("Las Venturas Airport Service Station\n\nCommand's: /service", YELLOW, 1602.5015,1615.4475,10.8203 + 2.0, 150.0, 0, 1);
    Create3DTextLabel("Bayside Marina Service Station\n\nCommand's: /service", YELLOW, -2322.4451,2298.0378,-0.5677 + 2.0, 150.0, 0, 1);
    
    Create3DTextLabel("LVPD\nWeapon Pickup Point\n\nCommand's: /pickup", YELLOW, 2293.1216,2455.5334,10.8203 + 0.5, 25.0, 0, 1);
    Create3DTextLabel("Las Venturas FBI HQ\nWeapon Pickup Point\n\nCommand's: /pickup", YELLOW, 2493.1833,2394.5808,10.8203 + 0.5, 25.0, 0, 1);
    Create3DTextLabel("Las Venturas CIA HQ\nWeapon Pickup Point\n\nCommand's: /pickup", YELLOW, 946.9702,1730.2723,8.8516 + 0.5, 25.0, 0, 1);
    
    Create3DTextLabel("LVPD\nArmour Pickup Point\n\nCommand's: /pickup", YELLOW, 2293.1194,2447.1709,10.8203 + 0.5, 25.0, 0, 1);
    Create3DTextLabel("Las Venturas FBI HQ\nArmour Pickup Point\n\nCommand's: /pickup", YELLOW, 2493.1838,2400.7966,10.8203 + 0.5, 25.0, 0, 1);
    Create3DTextLabel("Las Venturas CIA HQ\nArmour Pickup Point\n\nCommand's: /pickup", YELLOW, 946.9492,1736.2869,8.8516 + 0.5, 25.0, 0, 1);
    
    Create3DTextLabel("/climbsign", YELLOW, 2304.0759, 2382.6260, 14.9083, 5.0, 0, 1);
    
    Create3DTextLabel("LVPD", YELLOW, 2287.0400,2432.3660,10.8203 + 0.5, 25.0, 0, 1);//1
	Create3DTextLabel("LVPD", YELLOW, 2337.1648,2459.3130,14.9742 + 0.5, 25.0, 0, 1);//2
	Create3DTextLabel("LVPD", YELLOW, 2296.0713,2458.1235,38.6875 + 0.5, 25.0, 0, 1);//Roof
	
	Create3DTextLabel("Las Venturas FBI HQ", YELLOW, 2447.6692,2376.2556,12.1635 + 0.5, 25.0, 0, 1);//front
	Create3DTextLabel("Las Venturas FBI HQ", YELLOW, 2487.7542,2397.2356,10.8203 + 0.5, 25.0, 0, 1);//back
	Create3DTextLabel("Las Venturas CIA HQ", YELLOW, 937.0844,1733.2168,8.8516 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Las Venturas Bank\nLas Venturas Square Branch", YELLOW, 2270.9761,2293.8179,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Bank\nEl Quebrados Branch", YELLOW, -1457.9816,2589.9771,55.9957 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Bank\nFort Carson Branch", YELLOW, -179.1975,1133.1324,19.7422 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Bank\nTierra Robada Branch", YELLOW, -828.1474,1504.5988,19.8529 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Las Venturas City Hall", YELLOW, 2412.5039,1123.8190,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Hospital", YELLOW, 1607.3329,1816.7660,10.8203 + 0.5, 150.0, 0, 1);//
	Create3DTextLabel("Las Venturas Night Club", YELLOW, 2311.2742,2324.2349,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Gym", YELLOW, 1968.7693,2295.8730,16.4559 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas University", YELLOW, 2375.5786,2306.3044,8.1406 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Airport", YELLOW, 1672.5485,1447.8712,10.7881 + 0.5, 150.0, 0, 1);//
	Create3DTextLabel("Las Venturas Motors", YELLOW, 1735.7432, 1866.1516, 10.8203 + 0.5, 150.0, 0, 1);
	Create3DTextLabel("Las Venturas Apartments", YELLOW, 2364.8955,2377.6169,10.8203 + 0.5, 25.0, 0, 1);

	Create3DTextLabel("The Emerald Isle Casino", YELLOW, 2127.5869,2379.6211,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Las Venturas Casino", YELLOW, 2016.9768,1916.4065,12.3424 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Caligulas Casino", YELLOW, 2196.9570,1677.1637,12.3672 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("4 Dragons Casino", YELLOW, 2019.3196,1007.7487,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Redsands Casino", YELLOW, 1658.4960,2250.0437,11.0701 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Ammunation", YELLOW, 2159.5405,943.1776,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Ammunation", YELLOW, 2319.3486,2391.8047,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Ammunation", YELLOW, 776.7208,1871.4360,4.9068 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Ammunation", YELLOW, -316.1609,829.8887,14.2422 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Ammunation", YELLOW, -1508.8851,2610.7004,55.8359 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Ammunation", YELLOW, 2556.9512,2065.3730,11.0995 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Burger Shot", YELLOW, 2367.0552,2071.0693,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Burger Shot", YELLOW, 2472.8655,2034.1702,11.0625 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Burger Shot", YELLOW, 1157.9246,2072.2874,11.0625 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Burger Shot", YELLOW, 2169.4143,2795.9263,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Burger Shot", YELLOW, 1872.2554,2071.8850,11.0625 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Cluck'n Bell", YELLOW, 2393.2737,2041.5657,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Cluck'n Bell", YELLOW, 173.0402,1177.1461,14.7578 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("Cluck'n Bell", YELLOW, -1213.8292,1830.3749,41.9297 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("24/7 Store", YELLOW, 2452.5308,2065.1902,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("24/7 Store", YELLOW, 2546.5271,1972.6571,10.8203 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("24/7 Store", YELLOW, 2194.9390,1990.9948,12.2969 + 0.5, 25.0, 0, 1);//
	Create3DTextLabel("24/7 Store", YELLOW, 2247.6702,2396.1687,10.8203 + 0.5, 25.0, 0, 1);//

	Create3DTextLabel("Well Stacked Pizzas", YELLOW, 2351.8555,2533.6199,10.8203 + 0.5, 25.0, 0, 1);//
	
	Create3DTextLabel("Las Venturas Bar", YELLOW, 2305.9966,2377.8203,11.2208 + 0.5, 25.0, 0, 1);//
	
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1728.4685,-1671.1666,27.1953 + 0.5, 100.0, 10, 1);//
	
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1731.1501,-1668.5820,27.1953 + 0.5, 100.0, 10, 1);//

	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.7915,-1643.9325,27.2035 + 0.5, 100.0, 10, 1);//

	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5035,-1641.3409,27.2124 + 0.5, 100.0, 10, 1);//

	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1710.8021,-1643.9214,23.6797 + 0.5, 100.0, 10, 1);//

	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 1, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 2, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 3, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 4, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 5, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 6, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 7, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 8, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 9, 1);//
	Create3DTextLabel("Elevator\n\nCommand's: /elevator", YELLOW, 1713.5140,-1641.3318,23.6797 + 0.5, 100.0, 10, 1);//

    CantJoinEvent = 0;
	HasEventStarted = 0;
	
	CountStatus = 0;

    EnableStuntBonusForAll(0);
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_GLOBAL);
    ShowNameTags(1);
    DisableInteriorEnterExits();
    AllowInteriorWeapons(0);
    //SetWorldTime(12);

    //Medics
    AddPlayerClassEx(0,274,1346.2122,-1756.6079,13.5078,344.6872,0,0,0,0,0,0);//0
    AddPlayerClassEx(0,275,1346.2122,-1756.6079,13.5078,344.6872,0,0,0,0,0,0);//1
    AddPlayerClassEx(0,276,1346.2122,-1756.6079,13.5078,344.6872,0,0,0,0,0,0);//2
    //CIA
	AddPlayerClassEx(2,163,1568.6379,-1695.5450,5.8906,179.4654,3,1,26,200,31,400); // 3
	AddPlayerClassEx(2,164,1568.6379,-1695.5450,5.8906,179.4654,3,1,26,200,31,400); // 4
	AddPlayerClassEx(2,165,1568.6379,-1695.5450,5.8906,179.4654,3,1,26,200,31,400); // 5
	AddPlayerClassEx(2,166,1568.6379,-1695.5450,5.8906,179.4654,3,1,26,200,31,400); // 6
    //Cops
	AddPlayerClassEx(3,282,1568.6379,-1695.5450,5.8906,179.4654,3,1,27,200,31,400); // 7
	AddPlayerClassEx(3,283,1568.6379,-1695.5450,5.8906,179.4654,3,1,27,200,31,400); //
	AddPlayerClassEx(3,288,1568.6379,-1695.5450,5.8906,179.4654,3,1,27,200,31,400); //
	//Army
	AddPlayerClassEx(4,287,1568.6379,-1695.5450,5.8906,179.4654,24,99999,26,99999,31,99999); // 10
	//FBI
	AddPlayerClassEx(5,286,1568.6379,-1695.5450,5.8906,179.4654,3,1,26,200,31,400);//11
	//Civ
	AddPlayerClassEx(1,20,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,400);//12
	AddPlayerClassEx(1,19,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,244,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,17,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,15,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,90,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,12,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,21,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,22,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,28,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,103,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,104,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,105,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,106,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,107,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,108,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,109,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,110,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,111,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,113,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,114,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,115,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,116,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,117,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,118,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,119,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,120,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,121,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,122,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,123,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,124,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,125,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,126,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,128,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,129,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,130,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,131,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,132,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,133,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);//50
	AddPlayerClassEx(1,134,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,135,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,136,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,137,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,138,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,139,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,140,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,141,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,142,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,143,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,144,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,145,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,146,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,147,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,148,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,149,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,150,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,151,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,152,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,153,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,154,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);//71
    AddPlayerClassEx(1,155,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,156,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,157,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,158,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,159,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,160,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,161,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
    AddPlayerClassEx(1,162,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,264,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,257,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,24,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,60,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,245,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,23,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,29,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,63,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,96,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,122,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,123,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,256,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,85,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
	AddPlayerClassEx(1,147,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,170,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,180,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,187,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
	AddPlayerClassEx(1,186,1346.2122,-1756.6079,13.5078,344.6872,5,1,26,50,31,200);
 	AddPlayerClassEx(1,247,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);
    AddPlayerClassEx(1,248,-1328.2207,-291.2531,14.1484,358.5105,5,1,26,50,31,200);//99

    new bloodbanger1 = AddStaticVehicleEx(504,-1338.50000000,935.90002441,1036.30004883,20.00000000,20,1,300); //Bloodring Banger
	new bloodbanger2 = AddStaticVehicleEx(504,-1341.90002441,935.20001221,1036.30004883,19.99511719,6,1,300); //Bloodring Banger
	new bloodbanger3 = AddStaticVehicleEx(504,-1345.30004883,934.09997559,1036.30004883,20.00000000,3,1,300); //Bloodring Banger
	new bloodbanger4 = AddStaticVehicleEx(504,-1332.00000000,938.20001221,1036.30004883,19.99511719,7,1,300); //Bloodring Banger
	new bloodbanger5 = AddStaticVehicleEx(504,-1335.30004883,937.00000000,1036.30004883,19.99511719,7,1,300); //Bloodring Banger
	new bloodbanger6 = AddStaticVehicleEx(504,-1328.30004883,939.40002441,1036.30004883,19.99511719,101,1,300); //Bloodring Banger
	new bloodbanger7 = AddStaticVehicleEx(504,-1318.40002441,943.00000000,1036.40002441,19.99511719,31,1,300); //Bloodring Banger
	new bloodbanger8 = AddStaticVehicleEx(504,-1324.89941406,940.59960938,1036.40002441,19.99511719,86,1,300); //Bloodring Banger
	new bloodbanger9 = AddStaticVehicleEx(504,-1321.69995117,941.79998779,1036.40002441,19.99511719,8,1,300); //Bloodring Banger
	LinkVehicleToInterior(bloodbanger1, 15);
	LinkVehicleToInterior(bloodbanger2, 15);
	LinkVehicleToInterior(bloodbanger3, 15);
	LinkVehicleToInterior(bloodbanger4, 15);
	LinkVehicleToInterior(bloodbanger5, 15);
	LinkVehicleToInterior(bloodbanger6, 15);
	LinkVehicleToInterior(bloodbanger7, 15);
	LinkVehicleToInterior(bloodbanger8, 15);
	LinkVehicleToInterior(bloodbanger9, 15);

    /*AddStaticVehicleEx(487,2386.6675,2380.3911,151.1142,90.7906,-1,-1,300); //Apartments heli
    
    AddStaticVehicleEx(601,2229.78881836,2454.39843750,-7.52291632,270.00000000,-1,-1,300); //S.W.A.T. Van
    AddStaticVehicleEx(601,2229.69580078,2461.11425781,-7.51733255,270.00000000,-1,-1,300); //S.W.A.T. Van
    AddStaticVehicleEx(598,2250.80590820,2431.73681641,-7.58312511,0.00000000,102,1,300); //Police Car (LVPD)
    AddStaticVehicleEx(599,2268.30102539,2431.63208008,-7.06799841,0.00000000,102,1,300); //Police Ranger
    AddStaticVehicleEx(427,2290.28149414,2431.29931641,-7.20512486,0.00000000,102,1,300); //Enforcer
    AddStaticVehicleEx(523,2281.57739258,2431.32495117,-7.79274750,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(523,2281.51879883,2428.92333984,-7.79274750,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(523,2281.58984375,2433.67163086,-7.79274750,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(598,2255.12255859,2431.78442383,-7.58312511,0.00000000,102,1,300); //Police Car (LVPD)
    AddStaticVehicleEx(523,2281.21508789,2433.46191406,2.93381500,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(523,2281.24877930,2431.22412109,2.93381500,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(523,2281.22314453,2428.67846680,2.93381500,45.00000000,-1,-1,300); //HPV1000
    AddStaticVehicleEx(599,2263.90527344,2431.22998047,3.65856409,0.00000000,102,1,300); //Police Ranger
    AddStaticVehicleEx(598,2246.55859375,2431.70385742,3.14343715,0.00000000,102,1,300); //Police Car (LVPD)
    AddStaticVehicleEx(427,2290.14892578,2431.18847656,3.52143764,0.00000000,102,1,300); //Enforcer
    AddStaticVehicleEx(598,2255.83911133,2460.04199219,10.69031239,180.00000000,102,1,300); //Police Car (LVPD)
    AddStaticVehicleEx(599,2273.36547852,2476.71118164,11.20543861,180.00000000,102,1,300); //Police Ranger
    AddStaticVehicleEx(497,2293.42675781,2439.86254883,47.24252319,90.00000000,102,1,300); //Police Maverick
    AddStaticVehicleEx(497,2268.22314453,2439.59570312,47.24156189,270.00000000,102,1,300); //Police Maverick
    AddStaticVehicleEx(497,2279.82421875,2451.24121094,47.24252319,270.00000000,102,1,300); //Police Maverick
    AddStaticVehicleEx(487,2093.25683594,2414.27172852,74.84359741,0.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,2268.08789062,1595.83630371,101.61640930,0.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,2268.05664062,1698.86047363,101.62446594,180.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(593,1289.76147461,1324.05639648,11.37049484,270.00000000,-1,-1,300); //Dodo
    AddStaticVehicleEx(593,1289.93322754,1361.41540527,11.37049484,270.00000000,-1,-1,300); //Dodo
    AddStaticVehicleEx(487,1314.97460938,1399.87854004,11.08531284,180.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,1345.94714355,1399.96972656,11.07797909,180.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,1299.49316406,1399.91845703,11.08531284,180.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,1330.33923340,1399.92419434,11.08531284,180.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(513,1447.54748535,1211.20214844,11.60506916,0.00000000,-1,1,300); //Stunt
    AddStaticVehicleEx(513,1435.86621094,1211.45214844,11.60506916,0.00000000,-1,1,300); //Stunt
    AddStaticVehicleEx(513,1423.86303711,1211.59655762,11.60506916,0.00000000,-1,1,300); //Stunt
    AddStaticVehicleEx(513,1411.95837402,1211.67211914,11.60506916,0.00000000,-1,1,300); //Stunt
    AddStaticVehicleEx(577,1584.68713379,1188.54150391,9.81250000,180.00000000,-1,1,300); //AT-400
    AddStaticVehicleEx(592,1567.93286133,1448.33728027,12.32543945,90.00000000,-1,1,300); //Andromada
    AddStaticVehicleEx(519,1340.08496094,1606.63916016,11.74180031,270.00000000,-1,-1,300); //Shamal
    AddStaticVehicleEx(519,1338.94812012,1578.35620117,11.82038498,270.00000000,-1,-1,300); //Shamal
    AddStaticVehicleEx(469,1377.64538574,1769.98901367,10.92031288,270.00000000,-1,-1,300); //Sparrow
    AddStaticVehicleEx(469,1400.39770508,1770.06188965,10.92031288,90.00000000,-1,-1,300); //Sparrow
    AddStaticVehicleEx(487,1644.93859863,1539.56042480,11.04898930,45.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(487,1623.79907227,1536.78015137,11.06519222,315.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(476,282.51660156,2023.79333496,18.81077766,270.00000000,-1,1,300); //Rustler
    AddStaticVehicleEx(476,283.11029053,1989.45153809,18.81077766,270.00000000,-1,1,300); //Rustler
    AddStaticVehicleEx(476,283.06112671,1955.96276855,18.81077766,270.00000000,-1,1,300); //Rustler
    AddStaticVehicleEx(470,291.35003662,2045.06323242,17.75063705,270.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,291.39349365,2051.12524414,17.75063705,270.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,291.29373169,2056.90551758,17.75063705,270.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,300.10961914,2063.94848633,17.75063705,180.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,308.25936890,2063.83593750,17.75063705,180.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,316.24908447,2063.54687500,17.75063705,180.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,324.86636353,2044.06591797,17.75063705,90.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,325.01782227,2050.29907227,17.75063705,90.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(470,325.30059814,2056.43432617,17.75063705,90.00000000,-1,-1,300); //Patriot
    AddStaticVehicleEx(469,365.24517822,2535.73510742,16.76532173,0.00000000,-1,-1,300); //Sparrow
    AddStaticVehicleEx(487,-2227.63159180,2326.37792969,7.81187534,0.00000000,-1,1,300); //Maverick
    AddStaticVehicleEx(411,-2251.29003906,2326.91723633,4.61249971,90.00000000,3,1,300); //Infernus
    AddStaticVehicleEx(460,-2406.76049805,2313.23510742,2.12892199,270.00000000,1,1,300); //Skimmer
    AddStaticVehicleEx(452,-2222.77465820,2397.70947266,0.00000000,45.00000000,3,1,300); //Speeder
    AddStaticVehicleEx(453,-2254.27197266,2429.91479492,0.00000000,225.00000000,-1,-1,300); //Reefer
    AddStaticVehicleEx(493,-2235.58959961,2451.06787109,0.00000000,225.00000000,-1,1,300); //Jetmax
    AddStaticVehicleEx(454,-2201.74487305,2418.69653320,0.00000000,45.00000000,1,1,300); //Tropic
    AddStaticVehicleEx(473,-2324.94873047,2332.78295898,0.00000000,180.00000000,1,1,300); //Dinghy
    AddStaticVehicleEx(431,-2273.57153320,2293.19946289,5.07021332,0.00000000,1,1,300); //Bus
    AddStaticVehicleEx(560,-2273.11401367,2315.35571289,4.62518835,270.00000000,86,1,300); //Sultan
    AddStaticVehicleEx(468,-2514.27246094,2353.29272461,4.74370813,90.00000000,3,1,300); //Sanchez
    AddStaticVehicleEx(495,-2467.75024414,2223.47241211,5.40382385,0.00000000,2,1,300); //Sandking
    AddStaticVehicleEx(521,-2479.52734375,2242.99121094,4.50412750,0.00000000,3,1,300); //FCR-900
    AddStaticVehicleEx(475,-2443.77807617,2242.57495117,4.74375010,0.00000000,6,1,300); //Sabre
    AddStaticVehicleEx(559,-1934.03100586,2377.33959961,49.25401306,110.00000000,1,1,300); //Jester
    AddStaticVehicleEx(522,-1213.44140625,1841.45678711,41.37912750,0.00000000,3,1,300); //NRG-500
    AddStaticVehicleEx(489,-865.62023926,1560.31738281,24.66424179,90.00000000,117,1,300); //Rancher
    AddStaticVehicleEx(424,-866.35522461,1541.32458496,22.53878021,270.00000000,-1,1,300); //BF Injection
    AddStaticVehicleEx(557,-304.71380615,1582.72509766,75.35937500,134.99987793,-1,-1,300); //Monster B
    AddStaticVehicleEx(579,-1259.12316895,2715.86108398,50.16113663,30.00000000,3,1,300); //Huntley
    AddStaticVehicleEx(468,-1512.54760742,2612.92163086,55.54172134,180.00000000,20,1,300); //Sanchez
    AddStaticVehicleEx(489,-1482.81018066,2570.31494141,56.19606400,90.00000000,3,1,300); //Rancher
    AddStaticVehicleEx(541,-766.46319580,2759.93261719,45.47343826,0.00000000,-1,1,300); //Bullet
    AddStaticVehicleEx(422,-222.77868652,2595.31323242,62.78312683,180.00000000,1,1,300); //Bobcat
    AddStaticVehicleEx(468,-274.24240112,2655.67846680,62.38910294,90.00000000,3,1,300); //Sanchez
    AddStaticVehicleEx(489,-338.66711426,1161.68615723,20.10231400,180.00000000,3,1,300); //Rancher
    AddStaticVehicleEx(468,-177.46932983,1127.12792969,19.50218773,90.00000000,6,1,300); //Sanchez
    AddStaticVehicleEx(475,-89.42066956,1220.83496094,19.64218712,0.00000000,3,1,300); //Sabre
    AddStaticVehicleEx(545,-84.00588226,1077.33190918,19.69218826,0.00000000,1,1,300); //Hustler
    AddStaticVehicleEx(522,1115.65563965,2069.68969727,10.48069000,0.00000000,-1,1,300); //NRG-500
    AddStaticVehicleEx(560,1116.78125000,2217.04199219,16.52372551,0.00000000,3,1,300); //Sultan
    AddStaticVehicleEx(429,1100.05981445,2228.45825195,16.46875000,0.00000000,6,1,300); //Banshee
    AddStaticVehicleEx(402,701.44372559,1947.57971191,5.47906208,0.00000000,3,1,300); //Buffalo
    AddStaticVehicleEx(468,773.77392578,1885.53930664,4.75634766,0.00000000,6,1,300); //Sanchez
    AddStaticVehicleEx(451,1026.12036133,1785.55529785,10.58468437,270.00000000,86,1,300); //Turismo
    AddStaticVehicleEx(480,1089.69335938,1795.37634277,10.67031288,0.00000000,-1,-1,300); //Comet
    AddStaticVehicleEx(522,2117.70043945,960.04205322,10.47336578,270.00000000,-1,1,300); //NRG-500
    AddStaticVehicleEx(535,2135.22509766,988.01055908,10.66031265,0.00000000,3,1,300); //Slamvan
    AddStaticVehicleEx(562,2133.00390625,1022.46417236,10.57386208,90.00000000,2,1,300); //Elegy
    AddStaticVehicleEx(506,2141.75830078,1009.62872314,10.61242580,270.00000000,115,1,300); //Super GT
    AddStaticVehicleEx(415,2171.89990234,1019.23492432,10.66983414,90.00000000,1,1,300); //Cheetah
    AddStaticVehicleEx(411,2039.03405762,1030.31945801,10.47187519,180.00000000,86,1,300); //Infernus
    AddStaticVehicleEx(477,2107.00097656,1397.68432617,10.67031288,0.00000000,3,1,300); //ZR-350
    AddStaticVehicleEx(429,2145.66918945,1398.09729004,10.56251717,0.00000000,-1,1,300); //Banshee
    AddStaticVehicleEx(541,2136.08740234,1409.24865723,10.52031231,0.00000000,6,1,300); //Bullet
    AddStaticVehicleEx(559,2129.80517578,1409.55688477,10.57437611,0.00000000,115,1,300); //Jester
    AddStaticVehicleEx(522,2148.73242188,1408.14440918,10.48069000,0.00000000,1,1,300); //NRG-500
    AddStaticVehicleEx(521,2185.83496094,1662.69750977,10.75563145,90.00000000,3,1,300); //FCR-900
    AddStaticVehicleEx(439,2165.10327148,1787.39440918,10.82031250,0.00000000,1,1,300); //Stallion
    AddStaticVehicleEx(603,2171.76562500,1799.99951172,10.82298756,180.00000000,3,1,300); //Phoenix
    AddStaticVehicleEx(565,2224.94677734,1787.08947754,10.51224327,0.00000000,-1,1,300); //Flash
    AddStaticVehicleEx(562,2198.90502930,1810.25964355,10.57386208,0.00000000,3,1,300); //Elegy
    AddStaticVehicleEx(560,2191.30517578,1810.27026367,10.62528801,0.00000000,85,1,300); //Sultan
    AddStaticVehicleEx(522,2199.53027344,1856.31079102,10.48069000,0.00000000,6,1,300); //NRG-500
    AddStaticVehicleEx(463,2179.84863281,1879.42346191,10.43731213,180.00000000,-1,1,300); //Freeway
    AddStaticVehicleEx(463,2191.47265625,1879.29748535,10.43731213,180.00000000,-1,1,300); //Freeway
    AddStaticVehicleEx(463,2183.66113281,1879.40124512,10.43731213,180.00000000,-1,1,300); //Freeway
    AddStaticVehicleEx(463,2187.55761719,1879.31213379,10.43731213,180.00000000,-1,1,300); //Freeway
    AddStaticVehicleEx(579,2177.34448242,1856.72790527,10.91895008,0.00000000,-1,1,300); //Huntley
    AddStaticVehicleEx(420,2046.48571777,1895.78637695,11.85387039,5.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2045.93444824,1903.73925781,11.97865391,0.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2045.77050781,1911.48376465,11.98437214,0.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2045.64416504,1919.67199707,11.98511314,0.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2045.87878418,1927.46923828,11.98647594,0.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2046.26257324,1935.61694336,11.85957050,350.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2161.03320312,1674.22619629,10.66251469,345.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2162.17602539,1680.93017578,10.67031193,0.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(411,2171.18115234,1989.04492188,10.62031269,90.00000000,3,1,300); //Infernus
    AddStaticVehicleEx(429,2186.30102539,1983.43725586,10.57031250,270.00000000,-1,1,300); //Banshee
    AddStaticVehicleEx(522,2186.43310547,2004.16809082,10.48069000,90.00000000,6,1,300); //NRG-500
    AddStaticVehicleEx(461,2104.08984375,2089.20288086,10.49481392,90.00000000,2,1,300); //PCJ-600
    AddStaticVehicleEx(560,2103.08789062,2072.80834961,10.62528801,270.00000000,1,1,300); //Sultan
    AddStaticVehicleEx(559,2105.50512695,2206.56079102,10.57437611,0.00000000,-1,-1,300); //Jester
    AddStaticVehicleEx(468,2208.61816406,2326.35327148,10.58031273,90.00000000,3,-1,300); //Sanchez
    AddStaticVehicleEx(431,2129.46875000,2338.28051758,10.92187500,90.00000000,-1,1,300); //Bus
    AddStaticVehicleEx(420,2121.06591797,2357.96728516,10.52187443,90.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2127.75634766,2358.04516602,10.52187443,90.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(420,2134.43115234,2358.12719727,10.52187443,90.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(560,2104.39428711,2396.01049805,27.82841301,90.00000000,2,1,300); //Sultan
    AddStaticVehicleEx(522,2068.94946289,2419.54589844,49.18381500,270.00000000,1,-1,300); //NRG-500
    AddStaticVehicleEx(562,2274.15112305,2336.77661133,10.57386208,270.00000000,6,-1,300); //Elegy
    AddStaticVehicleEx(522,2300.51416016,2373.04174805,10.48069000,180.00000000,6,1,300); //NRG-500
    AddStaticVehicleEx(560,2263.97680664,2407.86303711,10.62528801,90.00000000,3,1,300); //Sultan
    AddStaticVehicleEx(559,2426.56323242,2547.62866211,21.62906265,0.00000000,1,1,300); //Jester
    AddStaticVehicleEx(480,2454.65380859,2529.47216797,21.72500038,0.00000000,6,1,300); //Comet
    AddStaticVehicleEx(420,2632.92065430,2348.93579102,10.52187443,110.00000000,6,1,300); //Taxi
    AddStaticVehicleEx(506,2584.90649414,2250.13891602,10.61242580,0.00000000,3,1,300); //Super GT
    AddStaticVehicleEx(429,2594.00268555,2249.94384766,10.57031250,0.00000000,6,1,300); //Banshee
    AddStaticVehicleEx(522,2591.93383789,2278.92529297,10.48069000,270.00000000,-1,1,300); //NRG-500
    AddStaticVehicleEx(562,2449.60131836,1991.10913086,10.57386208,0.00000000,86,1,300); //Elegy
    AddStaticVehicleEx(415,2392.37158203,1667.78137207,10.66983414,0.00000000,2,1,300); //Cheetah
    AddStaticVehicleEx(411,2399.58227539,1629.46289062,10.62031269,0.00000000,-1,1,300); //Infernus
    AddStaticVehicleEx(496,2285.72387695,1518.85534668,42.60803986,0.00000000,3,1,300); //Blista Compact
    AddStaticVehicleEx(562,2301.70434570,1448.04711914,42.57386017,90.00000000,1,1,300); //Elegy
    AddStaticVehicleEx(559,2352.88354492,1430.04406738,42.56966019,90.00000000,5,1,300); //Jester
    AddStaticVehicleEx(522,2301.93969727,1429.63879395,10.48379135,90.00000000,86,1,300); //NRG-500
    AddStaticVehicleEx(522,1024.61157227,1727.02075195,10.48069000,0.00000000,-1,1,300); //NRG-500
    AddStaticVehicleEx(541,1479.69152832,2839.66967773,10.52031231,180.00000000,6,1,300); //Bullet
    AddStaticVehicleEx(522,1473.59729004,2879.38159180,10.48069000,0.00000000,2,1,300); //NRG-500
    AddStaticVehicleEx(579,2199.94921875,2787.44921875,10.91895008,0.00000000,-1,1,300); //Huntley
    AddStaticVehicleEx(493,577.76812744,2881.34008789,0.00000000,0.00000000,6,1,300); //Jetmax
    AddStaticVehicleEx(473,254.27734375,2926.64599609,0.00000000,0.00000000,1,1,300); //Dinghy
    AddStaticVehicleEx(539,-912.83636475,2697.13916016,42.01718903,134.99987793,3,1,300); //Vortex
    AddStaticVehicleEx(539,-910.45239258,2694.65112305,42.01718903,134.99450684,3,1,300); //Vortex
    AddStaticVehicleEx(460,-945.37951660,2646.10864258,42.91524124,90.00000000,6,1,300); //Skimmer
    AddStaticVehicleEx(473,-803.52404785,2236.03491211,41.06027985,90.00000000,1,1,300); //Dinghy
    AddStaticVehicleEx(493,-646.49047852,875.76416016,0.00000000,230.00000000,3,1,300); //Jetmax
    AddStaticVehicleEx(471,-673.39166260,962.12573242,11.70781231,0.00000000,-1,1,300); //Quad
    AddStaticVehicleEx(471,-675.72509766,962.16168213,11.70781231,0.00000000,-1,1,300); //Quad
    AddStaticVehicleEx(460,163.86344910,633.84851074,1.93145168,180.00000000,6,1,300); //Skimmer
    AddStaticVehicleEx(493,1628.54968262,571.55743408,0.00000000,90.00000000,3,1,300); //Jetmax
    AddStaticVehicleEx(473,2293.29101562,519.01049805,0.00000000,90.00000000,1,1,300); //Dinghy
    AddStaticVehicleEx(493,2356.85913086,518.14135742,0.00000000,270.00000000,-1,1,300); //Jetmax
    AddStaticVehicleEx(416,1614.75854492,1840.48767090,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1608.58483887,1840.30639648,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1602.26782227,1840.23645020,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1595.85021973,1840.08825684,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1623.98181152,1819.74584961,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1591.49658203,1819.29321289,11.11988831,0.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1589.22814941,1849.05664062,11.11988831,180.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(416,1625.69116211,1849.47875977,11.11988831,180.00000000,1,3,300); //Ambulance
    AddStaticVehicleEx(560,1684.52404785,2244.39331055,10.62528801,0.00000000,-1,1,300); //Sultan
    AddStaticVehicleEx(522,1613.95471191,2217.19140625,10.48069000,90.00000000,3,1,300); //NRG-500
    AddStaticVehicleEx(461,1515.77978516,2268.51245117,10.49481392,0.00000000,1,1,300); //PCJ-600
    AddStaticVehicleEx(409,1482.22167969,2255.97924805,10.95406723,45.00000000,1,1,300); //Stretch
    AddStaticVehicleEx(535,1498.96081543,2291.08325195,10.66031265,0.00000000,6,1,300); //Slamvan
    AddStaticVehicleEx(535,1916.14086914,708.81341553,10.66031265,0.00000000,2,1,300); //Slamvan
    AddStaticVehicleEx(567,1925.85815430,709.18566895,10.79865456,0.00000000,86,1,300); //Savanna
    AddStaticVehicleEx(468,2260.54785156,2295.81884766,10.58031273,0.00000000,3,1,300); //Sanchez
    AddStaticVehicleEx(481,2239.24755859,2225.61132812,10.42908859,0.00000000,-1,-1,300); //BMX
    AddStaticVehicleEx(534,2520.92602539,936.03967285,10.65087605,0.00000000,5,1,300); //Remington
    AddStaticVehicleEx(536,2775.31591797,1294.84533691,10.60000038,0.00000000,86,1,300); //Blade
    AddStaticVehicleEx(567,2781.75512695,1294.62072754,10.72834206,0.00000000,86,1,300); //Savanna
    AddStaticVehicleEx(576,2610.56689453,1684.46972656,10.57031250,90.00000000,6,1,300); //Tornado
    AddStaticVehicleEx(567,2853.19165039,2352.82470703,10.79865456,90.00000000,3,1,300); //Savanna
    AddStaticVehicleEx(576,1494.45263672,2848.07836914,10.57031250,0.00000000,1,1,300); //Tornado
    AddStaticVehicleEx(567,1102.38000488,1793.87976074,10.79865456,0.00000000,2,1,300); //Savanna
    AddStaticVehicleEx(534,1527.46179199,2203.48535156,10.64318943,0.00000000,2,1,300); //Remington
    
    //CIA Vehicles
    AddStaticVehicleEx(421,981.87567139,1727.72729492,8.65487671,90.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,981.92291260,1733.13476562,8.64843750,90.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,982.10382080,1739.11267090,8.64843750,90.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,981.96887207,1722.03112793,8.65487671,90.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,982.11962891,1744.82702637,8.64843750,90.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.82800293,1758.88232422,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,967.95336914,1758.88122559,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,960.39080811,1758.89721680,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,968.71392822,1707.53161621,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,960.54913330,1707.50305176,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.30004883,1707.43127441,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.64489746,1740.43103027,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.60534668,1744.72705078,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.71447754,1749.06091309,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.09326172,1725.85156250,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.05175781,1721.60876465,8.64843750,270.00000000,0,0,300); //Washington
    AddStaticVehicleEx(421,952.09997559,1717.15429688,8.64843750,270.00000000,0,0,300); //Washington
    
    //FBI Vehicles
    AddStaticVehicleEx(487,2491.46948242,2337.66503906,11.08531284,0.00000000, 0, 0,300); //Maverick
    AddStaticVehicleEx(601,2463.59033203,2346.21704102,10.75052166,270.00000000, 0, 0,300); //S.W.A.T. Van
    AddStaticVehicleEx(528,2481.59350586,2336.77392578,11.00531197,0.00000000, 0, 0,300); //FBI Truck
    AddStaticVehicleEx(490,2510.83154297,2398.87768555,11.14043903,90.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2515.72851562,2396.82592773,4.53106403,180.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2524.35351562,2397.42065430,4.45640326,180.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2514.46801758,2377.18920898,4.53106403,90.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2514.56591797,2368.14208984,4.53802586,90.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2541.06689453,2381.67871094,4.53106403,90.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(490,2541.36254883,2367.53491211,4.53106403,90.00000000, 0, 0,300); //FBI Rancher
    AddStaticVehicleEx(601,2484.07910156,2356.71264648,4.14114618,270.00000000, 0, 0,300); //S.W.A.T. Van
    AddStaticVehicleEx(490,2510.86840820,2394.19018555,11.14043903,90.00000000, 0, 0,300); //FBI Rancher

    //Admin Tower sea sparrow
	AddStaticVehicleEx(447,2166.42070000,2416.29420000,65.28900000,89.50180000,9,100,300); //Seasparrow
	
	//Army Vehicles
	AddStaticVehicleEx(520,334.01202393,1988.92614746,18.56019974,90.00000000,-1,-1,300); //Hydra
	AddStaticVehicleEx(425,334.01202393,1956.67578125,18.56019974,90.00000000,-1,-1,300); //Hunter
	AddStaticVehicleEx(520,334.01202393,1973.26062012,18.49162483,90.00000000,-1,-1,300); //Hydra*/
	
		// SPECIAL
	total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/trains.txt");
	total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/pilots.txt");

   	// LAS VENTURAS
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/lv_law.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/lv_airport.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/lv_gen.txt");

    // SAN FIERRO
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/sf_law.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/sf_airport.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/sf_gen.txt");

    // LOS SANTOS
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/ls_law.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/ls_airport.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/ls_gen_inner.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/ls_gen_outer.txt");

    // OTHER AREAS
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/whetstone.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/bone.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/flint.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/tierra.txt");
    total_vehicles_from_files += LoadStaticVehiclesFromFile("vehicles/red_county.txt");

    printf("Total vehicles from files: %d",total_vehicles_from_files);

	//FBI Objects
    CreateObject(972,2492.00805664,2331.20654297,7.90011835,0.00000000,0.00000000,270.00000000); //object(tunnelentrance) (1)
    CreateObject(3934,2491.52368164,2338.38452148,9.82031250,0.00000000,0.00000000,90.00000000); //object(helipad01) (1)

	//LVPD Roof/NVS + hospital objects + Admin Tower objects + Las Venturas Barriers
	CreateObject(984,2300.52246094,2437.31665039,46.61420441,0.00000000,0.00000000,0.00000000); //object(fenceshit2)(1)
	CreateObject(984,2300.49609375,2450.07958984,46.61420441,0.00000000,0.00000000,0.00000000); //object(fenceshit2)(2)
	CreateObject(983,2300.49853516,2454.53735352,46.66107941,0.00000000,0.00000000,0.00000000); //object(fenceshit3)(1)
	CreateObject(982,2277.75073242,2457.66870117,46.66011810,0.00000000,0.00000000,90.00000000); //object(fenceshit)(1)
	CreateObject(984,2265.80664062,2457.66088867,46.61324310,0.00000000,0.00000000,90.00000000); //object(fenceshit2)(3)
	CreateObject(983,2297.34619141,2457.67749023,46.66107941,0.00000000,0.00000000,90.00000000); //object(fenceshit3)(2)
	CreateObject(984,2259.40991211,2451.21093750,46.61324310,0.00000000,0.00000000,0.00000000); //object(fenceshit2)(4)
	CreateObject(984,2259.39257812,2441.17846680,46.61324310,0.00000000,0.00000000,0.00000000); //object(fenceshit2)(5)
	CreateObject(984,2265.58593750,2433.10205078,46.61324310,0.00000000,0.00000000,75.00000000); //object(fenceshit2)(6)
	CreateObject(8613,2295.49487305,2461.85791016,42.05892181,0.00000000,0.00000000,180.00000000); //object(vgssstairs03_lvs)(1)
	CreateObject(1690,2291.99487305,2460.57324219,38.37448502,0.00000000,0.00000000,90.00000000); //object(gen_roofbit4)(1)
	CreateObject(1693,2286.33886719,2466.18115234,39.20254135,0.00000000,0.00000000,90.00000000); //object(roofstuff12)(1)
	CreateObject(983,2288.90771484,2458.89306641,38.37105560,0.00000000,0.00000000,0.00000000); //object(fenceshit3)(4)
	CreateObject(3109,2296.87646484,2457.74243164,38.87907410,0.00000000,0.00000000,90.00000000); //object(imy_la_door)(1)
	CreateObject(984,2295.27465820,2470.78662109,38.32418060,0.00000000,0.00000000,90.00000000); //object(fenceshit2)(7)
	CreateObject(982,2301.67333984,2458.06445312,38.37105560,0.00000000,0.00000000,0.00000000); //object(fenceshit)(2)
	CreateObject(983,2298.52709961,2445.28295898,38.37105560,0.00000000,0.00000000,90.00000000); //object(fenceshit3)(6)
	CreateObject(984,2278.17675781,2431.20874023,46.61324310,0.00000000,0.00000000,88.00000000); //object(fenceshit2)(8)
	CreateObject(984,2290.93701172,2430.98437500,46.61420441,0.00000000,0.00000000,90.00000000); //object(fenceshit2)(9)
	CreateObject(983,2297.33227539,2430.99536133,46.66107941,0.00000000,0.00000000,90.00000000); //object(fenceshit3)(7)
	CreateObject(3934,2280.88476562,2451.21606445,45.97752380,0.00000000,0.00000000,0.00000000); //object(helipad01)(1)
	CreateObject(3934,2269.08178711,2439.58300781,45.97656250,0.00000000,0.00000000,0.00000000); //object(helipad01)(2)
	CreateObject(3934,2292.60107422,2439.83813477,45.97752380,0.00000000,0.00000000,0.00000000); //object(helipad01)(3)
	CreateObject(988,2176.52929688,2411.84863281,72.93386078,0.00000000,0.00000000,179.99450684); //object(ws_apgate)(1)
	CreateObject(988,2179.17456055,2409.19018555,72.93386078,0.00000000,0.00000000,87.99499512); //object(ws_apgate)(2)
	CreateObject(988,2176.53002930,2406.43090820,72.93386078,0.00000000,0.00000000,0.00000000); //object(ws_apgate)(3)
	CreateObject(988,2173.80566406,2409.08984375,72.93386078,0.00000000,0.00000000,270.00000000); //object(ws_apgate)(4)
	CreateObject(10631,2329.07617188,2392.76171875,14.16549015,0.00000000,0.00000000,90.00000000); //object(ammunation_sfs)(1)
	CreateObject(17542,2305.39941406,2386.21777344,13.68864727,0.00000000,0.00000000,0.00000000); //object(gangshops6_lae2)(1)
	CreateObject(4018,2307.38134766,2327.16772461,9.82031250,0.00000000,0.00000000,90.00000000); //object(newbuildsm02)(1)
	CreateObject(4022,2325.13159180,2322.71118164,12.90466309,0.00000000,0.00000000,270.00000000); //object(foodmart1_lan)(1)
	CreateObject(5140,2333.61816406,2374.35839844,12.06770134,0.00000000,0.00000000,0.00000000); //object(snpedtatshp)(1)
	CreateObject(5392,2324.89672852,2291.85522461,13.09587669,0.00000000,0.00000000,113.00000000); //object(laestripmall1)(1)
	CreateObject(5727,2309.49121094,2280.29199219,14.51833725,0.00000000,0.00000000,90.00000000); //object(holbuild10_law)(1)
	CreateObject(9302,2328.83276367,2264.32299805,17.16249084,0.00000000,0.00000000,270.00000000); //object(sfn_town01)(1)
	CreateObject(3934,1399.06689453,1770.04882812,9.82030869,0.00000000,0.00000000,0.00000000); //object(helipad01)(4)
	CreateObject(3934,1378.40234375,1770.02819824,9.82031250,0.00000000,0.00000000,0.00000000); //object(helipad01)(5)
	CreateObject(3109,2328.00000000,2375.10009766,11.10000038,0.00000000,0.00000000,0.00000000); //object(imy_la_door)(1)
	CreateObject(7073,2304.80834961,2380.43041992,32.17508698,0.00000000,0.00000000,0.00000000); //object(vegascowboy1)(1)
	CreateObject(7392,2298.59155273,2315.93530273,32.03757858,0.00000000,0.00000000,0.00000000); //object(vegcandysign1)(1)
	CreateObject(3109,2320.20654297,2321.08593750,11.01188850,0.00000000,0.00000000,0.00000000); //object(imy_la_door)(2)
	CreateObject(1337,2328.49316406,2311.21899414,10.46953773,0.00000000,0.00000000,0.00000000); //object(binnt07_la)(2)
	CreateObject(1337,2329.54736328,2311.23217773,10.46953773,0.00000000,0.00000000,0.00000000); //object(binnt07_la)(3)
	CreateObject(1338,2329.69628906,2308.84912109,10.53162193,0.00000000,0.00000000,45.00000000); //object(binnt08_la)(1)
	CreateObject(1265,2328.52246094,2310.10595703,10.28935623,0.00000000,0.00000000,0.00000000); //object(blackbag2)(1)
	CreateObject(971,2178.24218750,2406.22167969,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(1)
	CreateObject(971,2187.07031250,2406.22167969,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2169.48046875,2406.22167969,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(3)
	CreateObject(971,2160.73437500,2406.22167969,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(4)
	CreateObject(971,2169.48046875,2406.22167969,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(5)
	CreateObject(971,2151.90332031,2406.22167969,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(4)
	CreateObject(971,2147.45410156,2410.61230469,67.79814911,0.00000000,0.00000000,270.00000000); //object(subwaygate)(4)
	CreateObject(971,2147.45410156,2419.33789062,67.79814911,0.00000000,0.00000000,270.00000000); //object(subwaygate)(4)
	CreateObject(2933,2147.45458984,2425.33593750,67.00295258,0.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(1)
	CreateObject(3279,2176.35937500,2422.17675781,72.03385925,0.00000000,0.00000000,0.00000000); //object(a51_spottower)(1)
	CreateObject(971,2191.39257812,2410.61230469,74.90959930,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2191.39257812,2419.41210938,74.90959930,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(4729,2262.64355469,2429.61596680,31.06085968,0.00000000,0.00000000,290.00000000); //object(billbrdlan2_01)(1)
	CreateObject(970,2173.96386719,2413.98437500,72.58534241,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2173.96435547,2418.09667969,72.58534241,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(2)
	CreateObject(2985,2173.96826172,2407.05761719,89.16670990,0.00000000,0.00000000,270.00000000); //object(minigun_base)(1)
	CreateObject(971,2187.07031250,2427.06005859,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2178.24121094,2427.05957031,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2160.73437500,2427.06005859,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2151.90405273,2427.06005859,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2169.48046875,2427.05957031,67.79814911,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2169.64086914,2427.05957031,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(2933,2151.86035156,2425.33691406,78.44499207,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(3)
	CreateObject(2933,2160.56933594,2425.33691406,78.44499207,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(4)
	CreateObject(2949,2147.41748047,2426.06250000,64.27732849,0.00000000,0.00000000,0.00000000); //object(kmb_lockeddoor)(1)
	CreateObject(971,2186.94921875,2417.00878906,78.48342896,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2186.94921875,2409.79785156,78.48342896,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(2933,2147.45458984,2425.33740234,74.20119476,0.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(5)
	CreateObject(2933,2187.01367188,2425.33691406,78.44499207,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(6)
	CreateObject(971,2160.73437500,2427.05957031,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(971,2151.90332031,2427.05957031,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(2933,2165.02343750,2425.33691406,82.80363464,0.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2187.01440430,2425.33740234,71.93672180,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(9)
	CreateObject(2933,2187.01440430,2407.93920898,71.93672180,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(10)
	CreateObject(971,2169.48046875,2427.05957031,81.99254608,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(2933,2187.01440430,2422.18725586,78.43632507,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(11)
	CreateObject(971,2174.45214844,2427.24291992,6.62782478,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(2933,2151.86035156,2422.18652344,78.44499207,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(12)
	CreateObject(2933,2160.56933594,2422.18725586,78.44499207,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(13)
	CreateObject(971,2178.24218750,2406.22167969,81.99254608,0.00000000,0.00000000,0.00000000); //object(subwaygate)(1)
	CreateObject(2933,2182.63867188,2425.33691406,82.80363464,0.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(15)
	CreateObject(3934,2153.37353516,2414.46386719,64.27732849,0.00000000,0.00000000,0.00000000); //object(helipad01)(1)
	CreateObject(971,2169.48046875,2406.22167969,81.99254608,0.00000000,0.00000000,0.00000000); //object(subwaygate)(5)
	CreateObject(971,2182.63867188,2410.61230469,81.99254608,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2160.73437500,2406.22167969,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(5)
	CreateObject(971,2151.90332031,2406.22167969,74.90959930,0.00000000,0.00000000,0.00000000); //object(subwaygate)(4)
	CreateObject(971,2182.63867188,2419.41210938,81.99254608,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2147.45410156,2419.33789062,74.90959930,0.00000000,0.00000000,270.00000000); //object(subwaygate)(4)
	CreateObject(971,2147.45410156,2410.61230469,74.90959930,0.00000000,0.00000000,270.00000000); //object(subwaygate)(4)
	CreateObject(971,2165.20507812,2419.41210938,81.99254608,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2165.11914062,2410.61230469,81.99254608,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2178.27734375,2416.76953125,92.68190002,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2169.45214844,2416.76953125,92.68190002,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2178.24218750,2409.79785156,88.98333740,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2178.24218750,2415.56640625,88.98333740,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2169.48046875,2415.56689453,88.98333740,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2169.48046875,2409.79785156,88.98333740,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(2933,2169.45214844,2425.36547852,92.68190002,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(4)
	CreateObject(2933,2178.27734375,2425.36547852,92.68190002,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(4)
	CreateObject(2933,2169.45214844,2421.99291992,92.68190002,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(4)
	CreateObject(2933,2178.27734375,2421.99291992,92.68190002,90.00000000,90.00000000,90.00000000); //object(pol_comp_gate)(4)
	CreateObject(971,2169.48046875,2409.79785156,92.68190002,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(971,2178.24218750,2409.79785156,92.68190002,90.00000000,90.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(2933,2164.98193359,2422.63671875,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2164.98193359,2414.02270508,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2164.98193359,2410.69384766,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2169.39501953,2427.00292969,87.27803040,0.00000000,0.00000000,0.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2178.20434570,2427.00292969,87.27803040,0.00000000,0.00000000,0.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2182.63867188,2422.63671875,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2182.63867188,2414.02270508,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2182.63867188,2410.69384766,87.28232574,0.00000000,0.00000000,90.00000000); //object(pol_comp_gate)(7)
	CreateObject(971,2191.39306641,2422.63256836,74.90959930,0.00000000,0.00000000,90.00000000); //object(subwaygate)(4)
	CreateObject(2933,2169.45825195,2406.32177734,87.28232574,0.00000000,0.00000000,0.00000000); //object(pol_comp_gate)(7)
	CreateObject(2933,2178.24218750,2406.32177734,87.28232574,0.00000000,0.00000000,0.00000000); //object(pol_comp_gate)(7)
	CreateObject(970,2164.99462891,2424.94775391,89.49114990,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(971,2178.24121094,2427.05957031,81.99254608,0.00000000,0.00000000,0.00000000); //object(subwaygate)(2)
	CreateObject(970,2164.99462891,2420.80664062,89.49114990,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99462891,2416.65112305,89.49114990,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99462891,2412.54125977,89.49114990,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2408.40820312,89.49114990,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2408.35058594,89.51819611,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60595703,2412.45458984,89.51819611,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60595703,2416.58105469,89.51819611,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60595703,2420.75756836,89.51819611,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2424.89062500,89.51819611,0.00000000,0.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2180.54687500,2426.97949219,89.51819611,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2176.42065430,2426.98022461,89.51819611,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2172.29882812,2426.98022461,89.51819611,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2168.15844727,2426.98022461,89.51819611,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2167.10058594,2426.97949219,89.51819611,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2167.10058594,2406.32812500,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2180.52343750,2406.32812500,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2176.24047852,2406.32812500,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2172.12695312,2406.32812500,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2168.02026367,2406.32812500,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2167.10058594,2419.14379883,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2171.25903320,2419.14379883,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2180.56127930,2419.14379883,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2172.20507812,2419.14379883,89.49114990,0.00000000,0.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(16101,2182.55517578,2406.33813477,89.00520325,0.00000000,0.00000000,0.00000000); //object(des_windsockpole)(1)
	CreateObject(16101,2165.03027344,2406.33813477,89.00520325,0.00000000,0.00000000,0.00000000); //object(des_windsockpole)(2)
	CreateObject(16101,2165.00000000,2427.00073242,89.00520325,0.00000000,0.00000000,0.00000000); //object(des_windsockpole)(3)
	CreateObject(16101,2182.55517578,2427.00024414,88.79048920,0.00000000,0.00000000,0.00000000); //object(des_windsockpole)(4)
	CreateObject(1710,2184.82373047,2418.41992188,72.03385925,0.00000000,0.00000000,0.00000000); //object(kb_couch07)(1)
	CreateObject(1710,2188.55639648,2414.58178711,72.03125000,0.00000000,0.00000000,180.00000000); //object(kb_couch07)(2)
	CreateObject(2235,2186.17822266,2416.01757812,72.00386047,0.00000000,0.00000000,0.00000000); //object(coffee_med_6)(1)
	CreateObject(970,2180.46264648,2406.32812500,92.09720612,0.00000000,180.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2176.34912109,2406.32812500,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2172.21362305,2406.32812500,92.09720612,0.00000000,180.00000000,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2168.11083984,2406.32812500,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2167.12377930,2406.32812500,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2167.09033203,2426.97949219,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2180.53247070,2426.97949219,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2176.41674805,2426.97949219,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2172.29199219,2426.97949219,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2168.16381836,2426.97949219,92.09720612,0.00000000,179.99450684,0.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2424.89575195,92.09720612,0.00000000,180.00000000,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2408.45166016,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2412.55786133,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2416.71826172,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2182.60546875,2420.81420898,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2408.43823242,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2412.70947266,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2416.79956055,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2420.93750000,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(970,2164.99414062,2424.99414062,92.09720612,0.00000000,179.99450684,90.00000000); //object(fencesmallb)(1)
	CreateObject(994,2306.57958984,2325.51416016,9.82031250,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier2)(1)
	CreateObject(994,2312.81787109,2319.29150391,9.82031250,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier2)(2)
	CreateObject(994,2312.81787109,2313.16552734,9.82031250,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier2)(3)
	CreateObject(3109,2320.19995117,2392.60009766,11.39999962,0.00000000,0.00000000,0.00000000); //object(imy_la_door)(1)
	CreateObject(4602,2384.50000000,2377.69921875,80.00000000,0.00000000,0.00000000,0.00000000); //object(laskyscrap4_lan) (1)
	CreateObject(1696,2391.29980469,2371.09960938,150.89999390,0.00000000,0.00000000,0.00000000); //object(roofstuff15) (1)
	CreateObject(1697,2377.19921875,2370.29980469,151.50000000,0.00000000,0.00000000,90.00000000); //object(roofstuff16) (1)
	CreateObject(1689,2384.19921875,2369.29980469,151.10000610,0.00000000,0.00000000,0.00000000); //object(gen_roofbit3) (1)
	CreateObject(1689,2304.05004883,2379.39990234,14.80000019,0.00000000,0.00000000,0.00000000); //object(gen_roofbit3) (2)
	CreateObject(2964,2303.80004883,2387.69995117,13.60000038,0.00000000,0.00000000,0.00000000); //object(k_pooltablesm) (1)
	CreateObject(1723,2302.69995117,2394.19995117,13.60000038,0.00000000,0.00000000,0.00000000); //object(mrk_seating1) (1)
	CreateObject(1724,2300.89990234,2393.19995117,13.60000038,0.00000000,0.00000000,45.00000000); //object(mrk_seating1b) (1)
	CreateObject(1723,2304.69995117,2390.89990234,13.60000038,0.00000000,0.00000000,180.00000000); //object(mrk_seating1) (2)
	CreateObject(1822,2303.19995117,2392.00000000,13.60000038,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (1)
	CreateObject(14467,2307.50000000,2393.30004883,16.39999962,0.00000000,0.00000000,0.00000000); //object(carter_statue) (1)
	CreateObject(2693,2308.60009766,2387.50000000,14.30000019,0.00000000,0.00000000,225.00000000); //object(cj_banner11) (1)
	CreateObject(2692,2299.60009766,2387.30004883,14.39999962,0.00000000,0.00000000,135.00000000); //object(cj_banner10) (1)
	CreateObject(2930,2294.60009766,2494.50000000,4.90000010,0.00000000,0.00000000,0.00000000); //object(chinatgate) (1)
	CreateObject(8615,2341.00000000,2376.60009766,12.27999973,0.00000000,0.00000000,90.00000000); //object(vgssstairs04_lvs) (1)
	CreateObject(8615,2336.00000000,2381.60009766,16.70000076,0.00000000,0.00000000,0.00000000); //object(vgssstairs04_lvs) (2)
	CreateObject(3934,2334.00000000,2370.00000000,14.00000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (1)
	CreateObject(3934,2325.60009766,2387.69995117,18.50000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (2)
	CreateObject(3934,2335.00000000,2397.89990234,18.50000000,0.00000000,0.00000000,0.00000000); //object(helipad01) (3)
	CreateObject(17037,2344.39990234,2398.30004883,12.30000019,0.00000000,0.00000000,0.00000000); //object(cuntw_carport2_) (1)
	CreateObject(17037,2350.69995117,2398.30004883,12.30000019,0.00000000,0.00000000,0.00000000); //object(cuntw_carport2_) (2)
	CreateObject(997,2363.30004883,2375.39990234,9.80000019,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (1)
	CreateObject(997,2363.30004883,2379.80004883,9.80000019,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (2)

    hanger1 = CreateObject(971,2151.81958008,2409.79785156,78.44499207,90.00000000,0.00000000,0.00000000); //object(subwaygate) (6)//Hanger gate 1 a
    hanger2 = CreateObject(971,2160.73437500,2409.79785156,78.44499207,90.00000000,0.00000000,0.00000000); //object(subwaygate) (7)//Hanger gate 2 b
    hanger3 = CreateObject(971,2151.81958008,2417.00878906,78.44499207,90.00000000,0.00000000,0.00000000); //object(subwaygate) (8)//Hanger gate 3 a
    hanger4 = CreateObject(971,2160.73437500,2417.00878906,78.44499207,90.00000000,0.00000000,0.00000000); //object(subwaygate) (9)//Hanger gate 4 b

    PDGate1 = CreateObject(971,2335.01538086,2444.08398438,7.29924774,0.00000000,0.00000000,60.00000000);
    PDGate2 = CreateObject(971,2293.96020508,2499.41804688,5.58859539,0.00000000,0.00000000,270.00000000);
    FBIGate = CreateObject(971,2517.08227539,2346.28271484,13.30023003,0.00000000,0.00000000,90.00000000);

    //Las Venturas border road blocks
    CreateObject(16439,2767.08007812,616.00415039,9.00294018,0.00000000,0.00000000,0.00000000);//object(cn2_roadblock04)(1)
    CreateObject(16439,1807.35485840,810.45111084,11.60946751,0.00000000,0.00000000,0.00000000);//object(cn2_roadblock04)(2)
    CreateObject(16439,1787.06494141,808.73736572,11.54383755,0.00000000,0.00000000,0.00000000);//object(cn2_roadblock04)(3)
    CreateObject(16439,431.50555420,599.63507080,19.75279999,0.00000000,0.00000000,40.00000000);//object(cn2_roadblock04)(4)
    CreateObject(16439,-139.09741211,476.76919556,12.80009651,0.00000000,0.00000000,345.00000000);//object(cn2_roadblock04)(5)
    CreateObject(16439,-841.30529785,1068.37365723,35.25149155,0.00000000,0.00000000,305.00000000);//object(cn2_roadblock04)(6)
    CreateObject(16439,-1133.82653809,1094.28027344,39.02075958,0.00000000,0.00000000,315.00000000);//object(cn2_roadblock04)(7)
    CreateObject(16439,-1145.38061523,1105.58654785,39.08648300,0.00000000,0.00000000,315.00000000);//object(cn2_roadblock04)(8)
    CreateObject(16439,-2673.82910156,2140.45605469,56.11046219,0.00000000,0.00000000,0.00000000);//object(cn2_roadblock04)(9)
    CreateObject(16439,-2689.45605469,2140.29321289,56.11046219,0.00000000,0.00000000,0.00000000);//object(cn2_roadblock04)(10)
    
    //LVPD (Interior) Elevator door/jail cell map bug fix/es
    CreateObject(18758,193.92813110,168.20587158,1003.91552734,0.00000000,0.00000000,180.00000000); //object(thebolla04) (1)
	CreateObject(18756,197.69393921,168.27279663,1003.98919678,0.00000000,0.00000000,0.00000000); //object(thebowl12) (1)
	CreateObject(18757,197.70196533,168.30268860,1003.98437500,0.00000000,0.00000000,0.00000000); //object(thebowl10) (1)
	CreateObject(971,187.82812500,163.59570312,1001.96997070,90.00000000,0.00000000,0.00000000); //object(subwaygate) (10)
	CreateObject(971,187.82812500,173.83906555,1001.96997070,90.00000000,0.00000000,0.00000000); //object(subwaygate) (11)
	CreateObject(971,187.82812500,172.48437500,1005.52325439,0.00000000,0.00000000,0.00000000); //object(subwaygate) (12)
	CreateObject(971,187.82812500,163.98730469,1005.52325439,0.00000000,0.00000000,179.99450684); //object(subwaygate) (13)
	CreateObject(971,191.68965149,165.70367432,1005.52325439,0.00000000,0.00000000,90.00000000); //object(subwaygate) (14)
	CreateObject(971,191.68965149,171.70838928,1005.52325439,0.00000000,0.00000000,90.00000000); //object(subwaygate) (15)
	CreateObject(971,187.77001953,165.70367432,1005.52325439,0.00000000,0.00000000,270.00000000); //object(subwaygate) (14)
	CreateObject(971,187.77001953,171.70838928,1005.52325439,0.00000000,0.00000000,270.00000000); //object(subwaygate) (14)
	CreateObject(971,193.60169983,163.98730469,1005.52325439,0.00000000,0.00000000,179.99450684); //object(subwaygate) (13)
	CreateObject(971,195.85380554,165.70367432,1005.52325439,0.00000000,0.00000000,270.00000000); //object(subwaygate) (14)
	CreateObject(971,193.82131958,163.59570312,1001.96997070,90.00000000,0.00000000,0.00000000); //object(subwaygate) (10)
	
	//Threshold's Map (DONATOR) - 79 objects
	CreateObject(7885, 2082, 2819.1999511719, 9.6999998092651, 0, 0, 123.99996948242);
	CreateObject(3475, 2068.2998046875, 2752.69921875, 12.199999809265, 0, 0, 90);
	CreateObject(3475, 2071.3000488281, 2752.6999511719, 12.199999809265, 0, 0, 90);
	CreateObject(3475, 2074.2998046875, 2752.69921875, 12.199999809265, 0, 0, 90);
	CreateObject(3475, 2077.1000976563, 2755.3999023438, 12.199999809265, 0, 0, 180);
	CreateObject(3475, 2077.1000976563, 2761.3999023438, 12.199999809265, 0, 0, 179.99450683594);
	CreateObject(3475, 2077.6999511719, 2767.1999511719, 12.199999809265, 0, 0, 169.99450683594);
	CreateObject(3475, 2079.8000488281, 2772.6999511719, 12.199999809265, 0, 0, 147.99145507813);
	CreateObject(3475, 2083.69921875, 2777.19921875, 12.199999809265, 0, 0, 131.98974609375);
	CreateObject(3749, 2095.3994140625, 2782.099609375, 15.699999809265, 0, 0, 7.998046875);
	CreateObject(3475, 2065.5, 2755.3000488281, 12, 0, 0, 0);
	CreateObject(3475, 2065.6000976563, 2761.1000976563, 12, 0, 0, 0);
	CreateObject(3475, 2065.6000976563, 2766.8999023438, 12, 0, 0, 0);
	CreateObject(3475, 2065.6000976563, 2772.8000488281, 12, 0, 0, 0);
	CreateObject(3475, 2065.6000976563, 2778.6999511719, 12, 0, 0, 0);
	CreateObject(3475, 2065.6000976563, 2783.1000976563, 12, 0, 0, 0);
	CreateObject(3475, 2062.6000976563, 2786.3400878906, 12, 0, 0, 90);
	CreateObject(3475, 2056.8999023438, 2786.3999023438, 12, 0, 0, 90);
	CreateObject(3475, 2051, 2786.3999023438, 12, 0, 0, 90);
	CreateObject(3475, 2045.1999511719, 2786.3999023438, 12, 0, 0, 90);
	CreateObject(3475, 2040.6999511719, 2788.6000976563, 12, 0, 0, 36);
	CreateObject(3475, 2037.1999511719, 2793.3999023438, 12, 0, 0, 35.996704101563);
	CreateObject(3475, 2033.8000488281, 2798.1000976563, 12, 0, 0, 35.996704101563);
	CreateObject(3475, 2030.3000488281, 2802.8999023438, 12, 0, 0, 35.996704101563);
	CreateObject(3475, 2028.5, 2808, 12, 0, 0, 1.9967041015625);
	CreateObject(3475, 2028.3000488281, 2813.6999511719, 12, 0, 0, 1.9940185546875);
	CreateObject(3475, 2028.0999755859, 2819.5, 12, 0, 0, 1.9940185546875);
	CreateObject(3475, 2027.9000244141, 2825.3999023438, 12, 0, 0, 1.9940185546875);
	CreateObject(3475, 2030.0999755859, 2829.8000488281, 12.300000190735, 0, 0, 303.99401855469);
	CreateObject(3475, 2035, 2833.1000976563, 12.39999961853, 0, 0, 303.99169921875);
	CreateObject(3475, 2107.8999023438, 2783.3000488281, 12.199999809265, 0, 0, 269.98974609375);
	CreateObject(3475, 2113.8999023438, 2783.3000488281, 12.199999809265, 0, 0, 269.98901367188);
	CreateObject(3475, 2117.1799316406, 2786.3000488281, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.1999511719, 2792.1000976563, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.1999511719, 2798, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.1999511719, 2803.6999511719, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2809.5, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2815.5, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2821.3000488281, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2827.1000976563, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.2998046875, 2827.099609375, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2833, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3000488281, 2838.8999023438, 12.199999809265, 0, 0, 0);
	CreateObject(3475, 2117.3999023438, 2844.8000488281, 12.199999809265, 0, 0, 0);
	CreateObject(3749, 2126.6000976563, 2849.8000488281, 15.699999809265, 0, 0, 4);
	CreateObject(3475, 2039.9000244141, 2836.3000488281, 12.5, 0, 0, 303.99169921875);
	CreateObject(3475, 2044.6999511719, 2839.6000976563, 12.60000038147, 0, 0, 303.99169921875);
	CreateObject(3475, 2049.8999023438, 2842.1999511719, 12.699999809265, 0, 0, 289.99169921875);
	CreateObject(3475, 2055.3999023438, 2844.1999511719, 13.10000038147, 0, 0, 289.98962402344);
	CreateObject(3475, 2060.6999511719, 2846.6999511719, 13.300000190735, 0, 0, 302);
	CreateObject(3475, 2065.6999511719, 2849.8000488281, 13.300000190735, 0, 0, 301.99768066406);
	CreateObject(3475, 2070.6000976563, 2852.8999023438, 13.300000190735, 0, 0, 301.99768066406);
	CreateObject(3475, 2075.6999511719, 2856.1000976563, 13.300000190735, 0, 0, 301.99768066406);
	CreateObject(3475, 2080.6999511719, 2859.1999511719, 13.300000190735, 0, 0, 301.99768066406);
	CreateObject(3475, 2085.8000488281, 2862.3000488281, 13.300000190735, 0, 0, 302);
	CreateObject(3475, 2090.8000488281, 2865.3999023438, 13.300000190735, 0, 0, 301.99768066406);
	CreateObject(3475, 2095.6000976563, 2868.8999023438, 13.300000190735, 0, 0, 309.99768066406);
	CreateObject(3475, 2100.1000976563, 2872.6999511719, 13.300000190735, 0, 0, 309.99572753906);
	CreateObject(3475, 2104.6000976563, 2876.5, 13.300000190735, 0, 0, 309.99572753906);
	CreateObject(3475, 2109.1999511719, 2880.1999511719, 12.800000190735, 0, 0, 309.99572753906);
	CreateObject(3475, 2114.1000976563, 2882.8999023438, 12.10000038147, 0, 0, 287.99572753906);
	CreateObject(3475, 2119.6999511719, 2883.3999023438, 12.10000038147, 0, 0, 261.99560546875);
	CreateObject(3475, 2124.6999511719, 2881.1000976563, 12.10000038147, 0, 0, 227.99096679688);
	CreateObject(3475, 2129.1000976563, 2877.1000976563, 12.10000038147, 0, 0, 227.98828125);
	CreateObject(3475, 2132.6000976563, 2872.5, 12.10000038147, 0, 0, 205.98826599121);
	CreateObject(3475, 2134.1000976563, 2867.1000976563, 12.10000038147, 0, 0, 183.98815917969);
	CreateObject(3475, 2134.5, 2861.1999511719, 12.10000038147, 0, 0, 183.98803710938);
	CreateObject(3475, 2134.8999023438, 2855.3000488281, 12.10000038147, 0, 0, 183.98803710938);
	CreateObject(7917, 2082, 2819.1999511719, 9.6999998092651, 0, 0, 123.99996948242);
	CreateObject(683, 2110.1999511719, 2812.8000488281, 9.8000001907349, 0, 0, 0);
	CreateObject(683, 2072.6000976563, 2764.1999511719, 9.8000001907349, 0, 0, 0);
	CreateObject(683, 2071.6999511719, 2792.3000488281, 9.8000001907349, 0, 0, 0);
	CreateObject(683, 2034, 2823, 9.8000001907349, 0, 0, 0);
	CreateObject(683, 2095.5, 2865.5, 9.8000001907349, 0, 0, 0);
	CreateObject(3472, 2113.1999511719, 2791.6000976563, 9.8000001907349, 0, 0, 0);
	CreateObject(3472, 2074.1999511719, 2775.1999511719, 10, 0, 0, 0);
	CreateObject(9833, 2124.3999023438, 2866.8999023438, 13, 0, 0, 0);
	CreateObject(14637, 2096, 2779.3000488281, 16.799999237061, 0, 0, 278);

    CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_BASE_BOTT_CP, 2268.0991,2449.2891,-7.1953);
	SetCheckpointInterior(LVPD_BASE_BOTT_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_BASE_TOP_CP, 2268.0745,2449.2795,3.5313);
	SetCheckpointInterior(LVPD_BASE_BOTT_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_ENT_1_CP, 2287.0400,2432.3660,10.8203);
	SetCheckpointInterior(LVPD_BASE_BOTT_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_ENT_2_CP, 2337.1648,2459.3130,14.9742);
	SetCheckpointInterior(LVPD_BASE_BOTT_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_TOP_CPARK_CP, 2297.1174,2451.5051,10.8203);
	SetCheckpointInterior(LVPD_BASE_BOTT_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_ROOF_CP, 2296.0713,2458.1235,38.6875);
	SetCheckpointInterior(LVPD_ROOF_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, NV_BANK_CP, 2270.9761,2293.8179,10.8203);
	SetCheckpointInterior(NV_BANK_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, ISLE_CP, 2127.5869,2379.6211,10.8203);
	SetCheckpointInterior(ISLE_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, VEGAS_CP, 2016.9768,1916.4065,12.3424);
	SetCheckpointInterior(VEGAS_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, CALG_CP, 2196.9570,1677.1637,12.3672);
	SetCheckpointInterior(CALG_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, DRAG_CP, 2019.3196,1007.7487,10.8203);
	SetCheckpointInterior(DRAG_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU1_CP, 2159.5405,943.1776,10.8203);
	SetCheckpointInterior(AMMU1_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU6_CP, 2319.3486,2391.8047,10.8203);
	SetCheckpointInterior(AMMU1_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURGER1_CP, 2367.0552,2071.0693,10.8203);
	SetCheckpointInterior(BURGER1_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK1_CP, 2393.2737,2041.5657,10.8203);
	SetCheckpointInterior(CLUCK1_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURGER2_CP, 2472.8655,2034.1702,11.0625);
	SetCheckpointInterior(BURGER2_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, SHOP_24_1_CP, 2452.5308,2065.1902,10.8203);
	SetCheckpointInterior(SHOP_24_1_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, SHOP_24_2_CP, 2546.5271,1972.6571,10.8203);
	SetCheckpointInterior(SHOP_24_2_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, SHOP_24_3_CP, 2194.9390,1990.9948,12.2969);
	SetCheckpointInterior(SHOP_24_3_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, CITYHALL_CP, 2412.5039,1123.8190,10.8203);
	SetCheckpointInterior(CITYHALL_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, SHOP_24_4_CP, 2247.6702,2396.1687,10.8203);
	SetCheckpointInterior(SHOP_24_4_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, REDSANDS_CP, 1658.4960,2250.0437,11.0701);
	SetCheckpointInterior(REDSANDS_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURGER3_CP, 1157.9246,2072.2874,11.0625);
	SetCheckpointInterior(BURGER3_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU2_CP, 776.7208,1871.4360,4.9068);
	SetCheckpointInterior(AMMU2_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK2_CP, 173.0402,1177.1461,14.7578);
	SetCheckpointInterior(CLUCK2_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK3_CP, -1213.8292,1830.3749,41.9297);
	SetCheckpointInterior(CLUCK3_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU3_CP, -316.1609,829.8887,14.2422);
	SetCheckpointInterior(AMMU3_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU4_CP, -1508.8851,2610.7004,55.8359);
	SetCheckpointInterior(AMMU4_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU5_CP, 2556.9512,2065.3730,11.0995);
	SetCheckpointInterior(AMMU5_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURGER4_CP, 2169.4143,2795.9263,10.8203);
	SetCheckpointInterior(BURGER4_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURGER5_CP, 1872.2554,2071.8850,11.0625);
	SetCheckpointInterior(BURGER5_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, ELQ_BANK_CP, -1457.9816,2589.9771,55.9957);
	SetCheckpointInterior(ELQ_BANK_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, FORT_BANK_CP, -179.1975,1133.1324,19.7422);
	SetCheckpointInterior(FORT_BANK_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BARA_BANK_CP, -828.1474,1504.5988,19.8529);
	SetCheckpointInterior(BARA_BANK_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, PIZZA_CP, 2351.8555,2533.6199,10.8203);
	SetCheckpointInterior(PIZZA_CP, 0);
    CreateCheckpoint(GLOBAL_OWNER_ID, NV_BANK_ROB, 2316.6169,-7.3947,26.7422);
	SetCheckpointInterior(NV_BANK_ROB, 0);
	SetCheckpointVirtualWorld(NV_BANK_ROB, 1);
	/*CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_ROB, 230.0261,165.0891,1003.0234);
	SetCheckpointInterior(LVPD_ROB, 3);*/
	CreateCheckpoint(GLOBAL_OWNER_ID, ISLE_ROB, 1139.7198,-4.0644,1000.6719);
	SetCheckpointInterior(ISLE_ROB, 12);
	SetCheckpointVirtualWorld(ISLE_ROB, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, VEGAS_ROB, 1139.7198,-4.0644,1000.6719);
	SetCheckpointInterior(VEGAS_ROB, 12);
	SetCheckpointVirtualWorld(VEGAS_ROB, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, REDSANDS_ROB, 1139.7198,-4.0644,1000.6719);
	SetCheckpointInterior(REDSANDS_ROB, 12);
	SetCheckpointVirtualWorld(REDSANDS_ROB, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, CALG_ROB, 2156.6917,1599.5377,1006.1797);
	SetCheckpointInterior(CALG_ROB, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, DRAG_ROB, 1955.3691,1018.0455,992.4688);
	SetCheckpointInterior(DRAG_ROB, 10);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU1_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU1_ROB, 4);
	SetCheckpointVirtualWorld(AMMU1_ROB, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU2_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU2_ROB, 4);
	SetCheckpointVirtualWorld(AMMU2_ROB, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU3_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU3_ROB, 4);
	SetCheckpointVirtualWorld(AMMU3_ROB, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU4_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU4_ROB, 4);
	SetCheckpointVirtualWorld(AMMU4_ROB, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU5_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU5_ROB, 4);
	SetCheckpointVirtualWorld(AMMU5_ROB, 5);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU6_ROB, 295.5833,-80.8050,1001.5156);
	SetCheckpointInterior(AMMU6_ROB, 4);
	SetCheckpointVirtualWorld(AMMU6_ROB, 6);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG1_ROB, 376.5498,-67.4389,1001.5078);
	SetCheckpointInterior(BURG1_ROB, 10);
	SetCheckpointVirtualWorld(BURG1_ROB, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG2_ROB, 376.5498,-67.4389,1001.5078);
	SetCheckpointInterior(BURG2_ROB, 10);
	SetCheckpointVirtualWorld(BURG2_ROB, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG3_ROB, 376.5498,-67.4389,1001.5078);
	SetCheckpointInterior(BURG3_ROB, 10);
	SetCheckpointVirtualWorld(BURG3_ROB, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK1_ROB, 371.5888,-6.0188,1001.8589);
	SetCheckpointInterior(CLUCK1_ROB, 9);
	SetCheckpointVirtualWorld(CLUCK1_ROB, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK2_ROB, 371.5888,-6.0188,1001.8589);
	SetCheckpointInterior(CLUCK2_ROB, 9);
	SetCheckpointVirtualWorld(CLUCK2_ROB, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK3_ROB, 371.5888,-6.0188,1001.8589);
	SetCheckpointInterior(CLUCK3_ROB, 9);
	SetCheckpointVirtualWorld(CLUCK3_ROB, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG4_ROB, 376.5498,-67.4389,1001.5078);
	SetCheckpointInterior(BURG4_ROB, 10);
	SetCheckpointVirtualWorld(BURG4_ROB, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG5_ROB, 376.5498,-67.4389,1001.5078);
	SetCheckpointInterior(BURG5_ROB, 10);
	SetCheckpointVirtualWorld(BURG5_ROB, 5);
	CreateCheckpoint(GLOBAL_OWNER_ID, ROB_24_1, -10.6035,-178.2635,1003.5469);
	SetCheckpointInterior(ROB_24_1, 17);
	SetCheckpointVirtualWorld(ROB_24_1, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, ROB_24_2, -10.6035,-178.2635,1003.5469);
	SetCheckpointInterior(ROB_24_2, 17);
	SetCheckpointVirtualWorld(ROB_24_2, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, ROB_24_3, -10.6035,-178.2635,1003.5469);
	SetCheckpointInterior(ROB_24_3, 17);
	SetCheckpointVirtualWorld(ROB_24_3, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, ROB_24_4, -10.6035,-178.2635,1003.5469);
	SetCheckpointInterior(ROB_24_4, 17);
	SetCheckpointVirtualWorld(ROB_24_4, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, ELQ_BANK_ROB, 2316.6169,-7.3947,26.7422);
	SetCheckpointInterior(ELQ_BANK_ROB, 0);
	SetCheckpointVirtualWorld(ELQ_BANK_ROB, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, FORT_BANK_ROB, 2316.6169,-7.3947,26.7422);
	SetCheckpointInterior(FORT_BANK_ROB, 0);
	SetCheckpointVirtualWorld(FORT_BANK_ROB, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BARA_BANK_ROB, 2316.6169,-7.3947,26.7422);
	SetCheckpointInterior(BARA_BANK_ROB, 0);
	SetCheckpointVirtualWorld(BARA_BANK_ROB, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, PIZZA_ROB, 374.7570,-118.8264,1001.4995);
	SetCheckpointInterior(PIZZA_ROB, 5);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_ELEV_CP, 196.6970,168.1543,1003.1533);
	SetCheckpointInterior(LVPD_ELEV_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_EXT_1_CP, 288.8626,166.9246,1007.1719);
	SetCheckpointInterior(LVPD_EXT_1_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, LVPD_EXT_2_CP, 238.6626,138.6895,1003.0234);
	SetCheckpointInterior(LVPD_EXT_2_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BANK_EXIT1_CP, 2304.6882,-16.0945,26.7422);
	SetCheckpointInterior(BANK_EXIT1_CP, 0);
	SetCheckpointVirtualWorld(BANK_EXIT1_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, BANK_EXIT2_CP, 2304.6882,-16.0945,26.7422);
	SetCheckpointInterior(BANK_EXIT2_CP, 0);
	SetCheckpointVirtualWorld(BANK_EXIT2_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, BANK_EXIT3_CP, 2304.6882,-16.0945,26.7422);
	SetCheckpointInterior(BANK_EXIT3_CP, 0);
	SetCheckpointVirtualWorld(BANK_EXIT3_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BANK_EXIT4_CP, 2304.6882,-16.0945,26.7422);
	SetCheckpointInterior(BANK_EXIT4_CP, 0);
	SetCheckpointVirtualWorld(BANK_EXIT4_CP, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, ISLE_EXIT_CP, 1133.1321,-15.8296,1000.6797);
	SetCheckpointInterior(ISLE_EXIT_CP, 12);
	SetCheckpointVirtualWorld(ISLE_EXIT_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, VEGAS_EXIT_CP, 1133.1321,-15.8296,1000.6797);
	SetCheckpointInterior(VEGAS_EXIT_CP, 12);
	SetCheckpointVirtualWorld(VEGAS_EXIT_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, REDSANDS_EXIT_CP, 1133.1321,-15.8296,1000.6797);
	SetCheckpointInterior(REDSANDS_EXIT_CP, 12);
	SetCheckpointVirtualWorld(REDSANDS_EXIT_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, CALG_EXIT_CP, 2234.0110,1714.6847,1012.3828);
	SetCheckpointInterior(CALG_EXIT_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, DRAG_EXIT_CP, 2019.0673,1017.8474,996.8750);
	SetCheckpointInterior(DRAG_EXIT_CP, 10);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT1_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT1_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT1_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT2_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT2_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT2_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT3_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT3_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT3_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT4_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT4_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT4_CP, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT5_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT5_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT5_CP, 5);
	CreateCheckpoint(GLOBAL_OWNER_ID, AMMU_EXIT6_CP, 285.8474,-86.7741,1001.5229);
	SetCheckpointInterior(AMMU_EXIT6_CP, 4);
	SetCheckpointVirtualWorld(AMMU_EXIT6_CP,6);
	CreateCheckpoint(GLOBAL_OWNER_ID, CITYHALL_EXT_CP, 390.7683,173.7873,1008.3828);
	SetCheckpointInterior(CITYHALL_EXT_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG1_EXT_CP, 362.8733,-75.1687,1001.5078);
	SetCheckpointInterior(BURG1_EXT_CP, 10);
	SetCheckpointVirtualWorld(BURG1_EXT_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG2_EXT_CP, 362.8733,-75.1687,1001.5078);
	SetCheckpointInterior(BURG2_EXT_CP, 10);
	SetCheckpointVirtualWorld(BURG2_EXT_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG3_EXT_CP, 362.8733,-75.1687,1001.5078);
	SetCheckpointInterior(BURG3_EXT_CP, 10);
	SetCheckpointVirtualWorld(BURG3_EXT_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK1_EXT_CP, 364.9007,-11.7672,1001.8516);
	SetCheckpointInterior(CLUCK1_EXT_CP, 9);
	SetCheckpointVirtualWorld(CLUCK1_EXT_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK2_EXT_CP, 364.9007,-11.7672,1001.8516);
	SetCheckpointInterior(CLUCK2_EXT_CP, 9);
	SetCheckpointVirtualWorld(CLUCK2_EXT_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, CLUCK3_EXT_CP, 364.9007,-11.7672,1001.8516);
	SetCheckpointInterior(CLUCK3_EXT_CP, 9);
	SetCheckpointVirtualWorld(CLUCK3_EXT_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG4_EXT_CP, 362.8733,-75.1687,1001.5078);
	SetCheckpointInterior(BURG4_EXT_CP, 10);
	SetCheckpointVirtualWorld(BURG4_EXT_CP, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, BURG5_EXT_CP, 362.8733,-75.1687,1001.5078);
	SetCheckpointInterior(BURG5_EXT_CP, 10);
	SetCheckpointVirtualWorld(BURG5_EXT_CP, 5);
	CreateCheckpoint(GLOBAL_OWNER_ID, EXT1_24_CP, -25.8424,-188.2505,1003.5469);
	SetCheckpointInterior(EXT1_24_CP, 17);
	SetCheckpointVirtualWorld(EXT1_24_CP, 1);
	CreateCheckpoint(GLOBAL_OWNER_ID, EXT2_24_CP, -25.8424,-188.2505,1003.5469);
	SetCheckpointInterior(EXT2_24_CP, 17);
	SetCheckpointVirtualWorld(EXT2_24_CP, 2);
	CreateCheckpoint(GLOBAL_OWNER_ID, EXT3_24_CP, -25.8424,-188.2505,1003.5469);
	SetCheckpointInterior(EXT3_24_CP, 17);
	SetCheckpointVirtualWorld(EXT3_24_CP, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, EXT4_24_CP, -25.8424,-188.2505,1003.5469);
	SetCheckpointInterior(EXT4_24_CP, 17);
	SetCheckpointVirtualWorld(EXT4_24_CP, 4);
	CreateCheckpoint(GLOBAL_OWNER_ID, PIZZA_EXT_CP, 372.2602,-133.5197,1001.4922);
	SetCheckpointInterior(PIZZA_EXT_CP, 5);
    CreateCheckpoint(GLOBAL_OWNER_ID, HOS_CP, 1607.3329,1816.7660,10.8203);
	SetCheckpointInterior(HOS_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, NIGHT_CLUB_CP, 2311.2742,2324.2349,10.8203);
	SetCheckpointInterior(NIGHT_CLUB_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, NIGHT_CLUB_EXIT_CP, 493.3364,-24.8309,1000.6797);
	SetCheckpointInterior(NIGHT_CLUB_EXIT_CP, 17);
	CreateCheckpoint(GLOBAL_OWNER_ID, NIGHT_CLUB_ROB, 499.9675,-20.6944,1000.6797);
	SetCheckpointInterior(NIGHT_CLUB_ROB, 17);
	CreateCheckpoint(GLOBAL_OWNER_ID, GYM_ENTER_CP, 1968.7693,2295.8730,16.4559);
	SetCheckpointInterior(GYM_ENTER_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, GYM_EXIT_CP, 773.8767,-78.8228,1000.6628);
	SetCheckpointInterior(GYM_EXIT_CP, 7);
	CreateCheckpoint(GLOBAL_OWNER_ID, GYM_STYLE_CP, 766.7718,-59.7159,1000.6563);
	SetCheckpointInterior(GYM_STYLE_CP, 7);
	CreateCheckpoint(GLOBAL_OWNER_ID, GYM_RING_CP, 768.7595,-72.7363,1000.6563);
	SetCheckpointInterior(GYM_RING_CP, 7);

	CreateCheckpoint(GLOBAL_OWNER_ID, FBI_ENTER_CP, 2447.6692,2376.2556,12.1635);
	SetCheckpointInterior(FBI_ENTER_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, FBI_ELEV_OUT, 2487.7542,2397.2356,10.8203);
	SetCheckpointInterior(FBI_ELEV_OUT, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, FBI_EXIT_CP, 246.8062,62.3228,1003.6406);
	SetCheckpointInterior(FBI_EXIT_CP, 6);
	/*CreateCheckpoint(GLOBAL_OWNER_ID, FBI_ROB, 250.0561,69.4203,1003.6406);
	SetCheckpointInterior(FBI_ROB, 6);*/
	CreateCheckpoint(GLOBAL_OWNER_ID, FBI_ELEV_IN, 242.2486,66.3108,1003.6406);
	SetCheckpointInterior(FBI_ELEV_IN, 6);

	CreateCheckpoint(GLOBAL_OWNER_ID, CAR_SHOP, 1735.7432,1866.1516,10.8203);
	CreateCheckpoint(GLOBAL_OWNER_ID, MATS_CP_LV, 966.2469,2160.6836,10.8203);
	CreateCheckpoint(GLOBAL_OWNER_ID, MATS_CP_BS, -2488.5205,2295.3135,4.9844);

	CreateCheckpoint(GLOBAL_OWNER_ID, NV_UNI_CP, 2375.5786,2306.3044,8.1406);

	CreateCheckpoint(GLOBAL_OWNER_ID, NV_UNI_CP2, -2027.00, -104.10, 1034.80);
	SetCheckpointInterior(NV_UNI_CP2, 3);
	CreateCheckpoint(GLOBAL_OWNER_ID, NV_UNI_CP3, -2032.79, -117.39, 1034.80);
	SetCheckpointInterior(NV_UNI_CP3, 3);

	CreateCheckpoint(GLOBAL_OWNER_ID, TOWER_CP, 2147.0127,2425.3252,65.2773);

	CreateCheckpoint(GLOBAL_OWNER_ID, AIRPORT_CP, 1672.5485,1447.8712,10.7881);

	CreateCheckpoint(GLOBAL_OWNER_ID, CIA_CP, 937.0844,1733.2168,8.8516);
	CreateCheckpoint(GLOBAL_OWNER_ID, CIA_CP2, 246.4175,107.2983,1003.2188);
	SetCheckpointInterior(CIA_CP2, 10);
	CreateCheckpoint(GLOBAL_OWNER_ID, CIA_CP3, 246.4467,118.5374,1003.2188);
	SetCheckpointInterior(CIA_CP3, 10);

	CreateCheckpoint(GLOBAL_OWNER_ID, BAR_CP, 2305.9966,2377.8203,11.2208);
	SetCheckpointInterior(BAR_CP, 0);
	CreateCheckpoint(GLOBAL_OWNER_ID, BAR_EXIT_CP, 501.9536,-67.5649,998.7578);
	SetCheckpointInterior(BAR_EXIT_CP, 11);
	CreateCheckpoint(GLOBAL_OWNER_ID, BAR_ROB_CP, 496.4771,-76.0378,998.7578);
	SetCheckpointInterior(BAR_ROB_CP, 11);

	CreateCheckpoint(GLOBAL_OWNER_ID, APARTMENTS_CP, 2364.8955,2377.6169,10.8203);
	SetCheckpointInterior(APARTMENTS_CP, 0);

	StartCheckpointSeeking();
	return 1;
}

public OnGameModeExit()
{
    DestroyPickup(LVPD_pickup_gun);
    DestroyPickup(LVPD_pickup_arm);
    
    DestroyPickup(FBI_pickup_gun);
    DestroyPickup(FBI_pickup_arm);
    
    DestroyPickup(CIA_pickup_gun);
    DestroyPickup(CIA_pickup_arm);
    
	Loop(h, MAX_HOUSES)
	{
    	SaveHouseStats(h);
    }

    for(new b = 0; b < MAX_BUSINESSES; b++)
    {
        SaveBizStats(b);
    }
    
    foreach(Player, p)
    {
    	if(IsPlayerConnected(p) && IsLoggedIn{p} == 1)
		{
			SaveBankStats(p);
			SaveFightStats(p);
			SaveSettings(p);
			SaveSkillLevels(p);
    		SaveUserStats(p);
    		SaveDegreeStats(p);
 		}
 	}

    /*new hfile[40], tmp;
	foreach(Player, i)
	{
	    tmp = GetPVarInt(i, "LastHouseCP");
		format(hfile, sizeof(hfile), HOUSE_FILE, tmp);
		if(!strcmp(GetHouseOwner(tmp), pNick(i), false) && GetPVarInt(i, "IsInHouse") == 1 && fexist(hfile))
		{
			HouseInfo[i][hQuit] = 1;
		}
	}*/
    UnloadHouses();
    UnloadBusinesses();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid)) return 1;
    SetPlayerTeamFromClass(playerid, classid);
    SetPlayerPos(playerid, 2116.0205, 2143.3225, 10.8203);
    SetPlayerFacingAngle(playerid, 89.6528);
    SetPlayerCameraLookAt(playerid, 2116.0205, 2143.3225, 10.8203);
    SetPlayerCameraPos(playerid, 2116.0205 + (5 * floatsin(-89.6528, degrees)), 2143.3225 + (5 * floatcos(-89.6528, degrees)), 10.8203);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(InsideCmdMenu[0][playerid] == 1)
	{
	    if(!strcmp(text, "1", true))
		{
		    ClearMenu(playerid);
			PlayerTextDrawSetString(playerid, CmdMenuTD[6], "/rules - Show the server rules.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[7], "/help - General help commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[8], "/version - Show version information");
			PlayerTextDrawSetString(playerid, CmdMenuTD[9], "/n - Chat for new players to ask for help.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[10], "/report - Submit a report on a player");
		}
	    else if(!strcmp(text, "2", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 2"); }
	    else if(!strcmp(text, "3", true)) { SendClientMessage(playerid, COLOR_GREY, "Messaging Help"); }
	    else if(!strcmp(text, "4", true))
		{
		    ClearMenu(playerid);
			PlayerTextDrawSetString(playerid, CmdMenuTD[6], "/myvehs - Show your owned vehicles.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[7], "/service - Repair/Modify your vehicle at service stations");
			PlayerTextDrawSetString(playerid, CmdMenuTD[8], "/setplate - Set and owned vehicle's license plate");
			PlayerTextDrawSetString(playerid, CmdMenuTD[9], "/boot - Open the vehicles trunk");
			PlayerTextDrawSetString(playerid, CmdMenuTD[10], "/bonnet - Open the vehicles hood");
			PlayerTextDrawSetString(playerid, CmdMenuTD[11], "/deleteveh - Delete an owned vehicle");
			PlayerTextDrawSetString(playerid, CmdMenuTD[12], "/alarm - Activate the vehicle alarm system");
			PlayerTextDrawSetString(playerid, CmdMenuTD[13], "/lights - Turn on your vehicles lights");
			PlayerTextDrawSetString(playerid, CmdMenuTD[14], "/lock(/lk) - Lock your vehicle");
			PlayerTextDrawSetString(playerid, CmdMenuTD[15], "/park - Park your owned vehicle and save its position");
			PlayerTextDrawSetString(playerid, CmdMenuTD[16], "/declineveh - Decline an offer to buy a vehicle");
			PlayerTextDrawSetString(playerid, CmdMenuTD[17], "/acceptveh - Accept an offer to buy a vehicle");
			PlayerTextDrawSetString(playerid, CmdMenuTD[18], "/sellvehto - Sell your owned vehicle to someone");
			PlayerTextDrawSetString(playerid, CmdMenuTD[25], "1. Main Menu");
			InsideCmdMenu[0][playerid] = 0;
			InsideCmdMenu[2][playerid] = 1;
		}
	    else if(!strcmp(text, "5", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 5"); }
	    else if(!strcmp(text, "6", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 6"); }
	    else if(!strcmp(text, "7", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 7"); }
	    else if(!strcmp(text, "8", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 8"); }
	    else if(!strcmp(text, "9", true)) { SendClientMessage(playerid, COLOR_GREY, "You selected number 9"); }
	    else if(!strcmp(text, "10", true))
		{
		    new string[128];
			ClearMenu(playerid);
		    switch(PMs{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. Personal Messages: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. Personal Messages: ~g~ON"); }
			}
		    switch(JoinMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. Join Messages: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. Join Messages: ~g~ON"); }
			}
		    switch(QuitMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. Quit Messages: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. Quit Messages: ~g~ON"); }
			}
		    switch(KickMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. Kick Messages: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. Kick Messages: ~g~ON"); }
			}
		    switch(TimeoutMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. Timeout Messages: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. Timeout Messages: ~g~ON"); }
			}
		    switch(TDMenu{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~DIALOG"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~TEXTDRAW"); }
		        case 2: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~TEXT"); }
			}
		    switch(NameTags{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. Player Name Tags: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. Player Name Tags: ~g~ON"); }
			}
			format(string, sizeof(string), "8. Name Tag Draw Distance: ~g~%d", NTDD{playerid});
			PlayerTextDrawSetString(playerid, CmdMenuTD[13], string);
		    switch(TogFPS{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. FPS Counter: ~r~OFF"); }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. FPS Counter: ~g~ON"); }
			}
		    
			PlayerTextDrawSetString(playerid, CmdMenuTD[25], "10. Main Menu");
			InsideCmdMenu[0][playerid] = 0;
			InsideCmdMenu[1][playerid] = 1;
		}
	    else if(!strcmp(text, "11", true))
		{
			ClearMenu(playerid);
			PlayerTextDrawSetString(playerid, CmdMenuTD[6], "/craftsman - Call for a craftsman to provide services."); // 54 Chars
			PlayerTextDrawSetString(playerid, CmdMenuTD[7], "/lawyer - Call for a lawyer to defend or free you.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[8], "/whore - Call a whore for a good time.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[9], "/food - Call for a food vendor to provide services.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[10],"/street - Call for a street vendor to provide services."); // 55 Chars
			PlayerTextDrawSetString(playerid, CmdMenuTD[11],"/medic - Call a medic to heal or cure you.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[12],"/mechanic - Call for a mechanic to provide services.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[13],"/weapons - Call an Arms Dealer to sell you weapons.");
			PlayerTextDrawSetString(playerid, CmdMenuTD[25], "1. Main Menu");
		}
	    else
		{
			InsideCmdMenu[0][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "Invalid choice. Selection Cancelled.");
			for(new i = 0; i < 28; i++)
			{
				PlayerTextDrawHide(playerid, CmdMenuTD[i]);
			}
		}
	    return 0;
	}
	if(InsideCmdMenu[2][playerid] == 1)
	{
		InsideCmdMenu[0][playerid] = 1;
		InsideCmdMenu[2][playerid] = 0;
		ClearMenu(playerid);
		PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. /genhelp - General Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. /infohelp - Informational Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. /msghelp - Messaging Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. /vehhelp - Vehicle Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. /grouphelp - Group Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. /jailhelp - Jail Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. /classhelp - Class Specific Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[13], "8. /animhelp - Player Animations");
		PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. /actions - Player Actions");
		PlayerTextDrawSetString(playerid, CmdMenuTD[15], "10. /settings - Settings & Options");
		PlayerTextDrawSetString(playerid, CmdMenuTD[16], "11. /services - Service commands");
		return 0;
	}
	if(InsideCmdMenu[1][playerid] == 1)
	{
	    if(!strcmp(text, "1", true))
		{
		    switch(PMs{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. Personal Messages: ~g~ON"); PMs{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. Personal Messages: ~r~OFF"); PMs{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "2", true))
		{
		    switch(JoinMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. Join Messages: ~g~ON"); JoinMsg{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. Join Messages: ~r~OFF"); JoinMsg{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "3", true))
		{
		    switch(QuitMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. Quit Messages: ~g~ON"); QuitMsg{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. Quit Messages: ~r~OFF"); QuitMsg{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "4", true))
		{
		    switch(KickMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. Kick Messages: ~g~ON"); KickMsg{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. Kick Messages: ~r~OFF"); KickMsg{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "5", true))
		{
		    switch(TimeoutMsg{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. Timeout Messages: ~g~ON"); TimeoutMsg{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. Timeout Messages: ~r~OFF"); TimeoutMsg{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "6", true))
		{
		    switch(TDMenu{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~TEXT"); TDMenu{playerid} = 2; } //Dialog
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~DIALOG"); TDMenu{playerid} = 0; } //Textdraw
		        case 2: { PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. Current Menus: ~g~TEXTDRAW"); TDMenu{playerid} = 1; }//Text
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "7", true))
		{
		    switch(NameTags{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. Player Name Tags: ~g~ON"); NameTags{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. Player Name Tags: ~r~OFF"); NameTags{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "8", true))
		{
		    SendClientMessage(playerid, RED, "You can't change this setting here. Please use /tog drawdistance");
		}
	    else if(!strcmp(text, "9", true))
		{
		    switch(TogFPS{playerid}) {
		        case 0: { PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. FPS Counter: ~g~ON"); ShowFPSCounter(playerid); TogFPS{playerid} = 1; }
		        case 1: { PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. FPS Counter: ~r~OFF"); HideFPSCounter(playerid); TogFPS{playerid} = 0; }
			}
			SaveSettings(playerid);
		}
	    else if(!strcmp(text, "10", true))
		{
			InsideCmdMenu[0][playerid] = 1;
			InsideCmdMenu[1][playerid] = 0;
			ClearMenu(playerid);
			PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. /genhelp - General Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. /infohelp - Informational Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. /msghelp - Messaging Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. /vehhelp - Vehicle Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. /grouphelp - Group Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. /jailhelp - Jail Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. /classhelp - Class Specific Commands");
			PlayerTextDrawSetString(playerid, CmdMenuTD[13], "8. /animhelp - Player Animations");
			PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. /actions - Player Actions");
			PlayerTextDrawSetString(playerid, CmdMenuTD[15], "10. /settings - Settings & Options");
			PlayerTextDrawSetString(playerid, CmdMenuTD[16], "11. /services - Service commands");
		}
	    else
		{
			InsideCmdMenu[1][playerid] = 0;
			SendClientMessage(playerid, COLOR_GREY, "Invalid choice. Selection Cancelled.");
			for(new i = 0; i < 28; i++)
			{
				PlayerTextDrawHide(playerid, CmdMenuTD[i]);
			}
		}
	    return 0;
	}
	if(IsMuted{playerid} == 1)
    {
        SendClientMessage(playerid, RED, "[BOT]Elvis: You're muted, you cant speak right now!");
        return 0;
    }
    if(PlayerInfo[playerid][aLevel] == 1 && IsOnduty{playerid} == 1)
    {
        format(fstr, sizeof(fstr), "%s %s: {FFFFFF}%s", ARank1, GetPlayerNameEx(playerid), text);
        SendClientMessageToAll(PURPLE, fstr);
        SetPlayerChatBubble(playerid, text, WHITE, 50, 5000);
        return 0;
    }
	else if(PlayerInfo[playerid][aLevel] == 2 && IsOnduty{playerid} == 1)
    {
        format(fstr, sizeof(fstr), "%s %s: {FFFFFF}%s", ARank2, GetPlayerNameEx(playerid), text);
        SendClientMessageToAll(PURPLE, fstr);
        SetPlayerChatBubble(playerid, text, WHITE, 50, 5000);
        return 0;
    }
    else if(PlayerInfo[playerid][aLevel] == 3 && IsOnduty{playerid} == 1)
    {
        format(fstr, sizeof(fstr), "%s %s: {FFFFFF}%s", ARank3, GetPlayerNameEx(playerid), text);
        SendClientMessageToAll(PURPLE, fstr);
        SetPlayerChatBubble(playerid, text, WHITE, 50, 5000);
        return 0;
    }
    else if(PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
    {
        format(fstr, sizeof(fstr), "%s %s: {FFFFFF}%s", ARank4, GetPlayerNameEx(playerid), text);
        SendClientMessageToAll(PURPLE, fstr);
        SetPlayerChatBubble(playerid, text, WHITE, 50, 5000);
        return 0;
    }
    text_line_count{playerid}++;
	SetTimerEx("ResetTextLines", 5000, false, "d", playerid);
	if(text_line_count{playerid} == 5)
	{
		format(fstr2,sizeof(fstr2),"AdmCmd %s (%d) has been kicked | Reason: Spam", GetPlayerNameEx(playerid), playerid);
		SendClientMessageToAll(RED, fstr2);
		KickEx(playerid);
		return 0;
	}
	else if(text_line_count{playerid} == 3 || text_line_count{playerid} == 4)
	{
		SendClientMessage(playerid, WHITE, "[BOT]Elvis: STOP SPAMMING! or I WILL KICK YOU! [WAIT 5 SECS...]");
		return 0;
	}
	else
	{
	    new tstr[150];
	    format(tstr, sizeof(tstr), "%s: {FFFFFF}%s", GetPlayerNameEx(playerid), text);
        SendClientMessageToAll(GetPlayerColor(playerid), tstr);
		SetPlayerChatBubble(playerid, text, WHITE, 50, 5000);
	}
	return 0;
}

public OnPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid))
    {
        SetPlayerHealth(playerid, 0x7FB00000);
		SetPlayerArmor(playerid, 0x7FB00000);
	    new npcname[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, npcname, sizeof(npcname));
	    if(!strcmp(npcname, "[BOT]Elvis", true))
	    {
	      	Attach3DTextLabelToPlayer(ConnectedBot1, playerid, 0.0, 0.0, 0.0);
    		SetPlayerColor(playerid, WHITE);
			SetPlayerSkin(playerid, 84);
	      	return 1;
	    }
	    if(!strcmp(npcname, "[BOT]OfficerDurland", true))
	    {
	      	Attach3DTextLabelToPlayer(ConnectedBot2, playerid, 0.0, 0.0, 0.0);
    		SetPlayerColor(playerid, BLUE);
	      	return 1;
	    }
	    if(!strcmp(npcname, "[BOT]AlaskaAirlines", true))
	    {
	      	Attach3DTextLabelToPlayer(ConnectedBot3, playerid, 0.0, 0.0, 0.0);
	      	PutPlayerInVehicle(playerid, bot1, 0);
	      	return 1;
	    }
	    if(!strcmp(npcname, "[BOT]DeltaAirways", true))
	    {
	      	Attach3DTextLabelToPlayer(ConnectedBot4, playerid, 0.0, 0.0, 0.0);
	      	PutPlayerInVehicle(playerid, bot2, 0);
	      	return 1;
	    }
	    if(!strcmp(npcname, "[BOT]UnitedAirlines", true))
	    {
	      	Attach3DTextLabelToPlayer(ConnectedBot5, playerid, 0.0, 0.0, 0.0);
	      	PutPlayerInVehicle(playerid, bot3, 0);
	      	return 1;
	    }
	    return 1;
    }

    PreloadAnimationLibrary(playerid, "GRAVEYARD");
	PreloadAnimationLibrary(playerid, "RAPPING");
	PreloadAnimationLibrary(playerid, "PED");
	PreloadAnimationLibrary(playerid, "FOOD");
	PreloadAnimationLibrary(playerid, "SWEET");
	PreloadAnimationLibrary(playerid, "ON_LOOKERS");
	PreloadAnimationLibrary(playerid, "DEALER");
	PreloadAnimationLibrary(playerid, "CRACK");
	PreloadAnimationLibrary(playerid, "SMOKING");
	PreloadAnimationLibrary(playerid, "BEACH");
	PreloadAnimationLibrary(playerid, "PARK");
    
    verifydestroycar{playerid} = 0;
    
    LoadFightStyle(playerid);

    StartCheckpointSeeking();

    HasSpawned{playerid} = true;
    HasShieldAttached{playerid} = true;
    HasBandanaAttached{playerid} = false;
    IsPlayerUsingAnim{playerid} = false;

    ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	IsInGod{playerid} = 0;
	IsInGodCar{playerid} = 0;

	/*if(GetPVarInt(playerid, "FirstSpawn") == 0)
    {
        SetTimerEx("HouseSpawning", 1000, false, "i", playerid);
    }*/
    
    if(IsAdminSpectating{playerid} == true)
	{
	    IsAdminSpectating{playerid} = false;
	    SpecInfo[playerid][IsSpectating] = -1;
	}
    
    if(HasPlayerDiedInJail{playerid} == true && GetTeam{playerid} == CLASS_CIV)
    {
        SendPlayerToJail(playerid);
        return 1;
    }
    
    if(HasPlayerDiedInCage{playerid} == true && CageTime[playerid] > 0)
	{
	    new time = CageTime[playerid];
	    IsPlayersFirstSpawn{playerid} = false;
		ResetPlayerWeapons(playerid);
		SetPlayerWantedLevel(playerid, 0);
		SetPlayerPos(playerid, 2178.3713, 2407.2861, 73.0339);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		IsCaged{playerid} = true;
		SetPlayerArmour(playerid, 0);
		GameTextForPlayer(playerid,"~r~Caged!", 5000, 5);
		if(CageTime[playerid] > 0)
		{
			CageTime[playerid] = 0;
		}
		CageTime[playerid] = time;
		KillTimer(JailTimer[playerid]);
		KillTimer(CageTimer[playerid]);
		CageTimer[playerid] = SetTimerEx("AutoUncage", 1000, true, "%d", playerid);
		return 1;
	}
	
	if(IsPlayersFirstSpawn{playerid} == true)
 	{
 	    if(GetTeam{playerid} == CLASS_CIV)
 	    {
 	        if(PlayerInfo[playerid][pSkill] >= 0)
 	        {
	 	        if(TDMenu{playerid} == 1)
	 	        {
	 	        	SendClientMessage(playerid, -1, "Select your desired skill!");
					InsideSkillMenu[playerid] = 1;
					for(new i = 0; i < 28; i++)
					{
						PlayerTextDrawShow(playerid, CmdMenuTD[i]);
					}
					ClearMenu(playerid);
					new string[80];
					format(string, sizeof(string), "~g~Your last chosen skill: ~y~%s", GetPlayerSkillName(GetPlayerSkill(playerid)));
					PlayerTextDrawSetString(playerid, CmdMenuTD[6], string);
					PlayerTextDrawSetString(playerid, CmdMenuTD[7], "1. Vehicle Thief");
					PlayerTextDrawSetString(playerid, CmdMenuTD[8], "2. Car Mechanic");
					PlayerTextDrawSetString(playerid, CmdMenuTD[9], "3. Food Vendor");
					PlayerTextDrawSetString(playerid, CmdMenuTD[10], "4. Street Vendor");
					PlayerTextDrawSetString(playerid, CmdMenuTD[11], "5. Weapons Dealer");
					PlayerTextDrawSetString(playerid, CmdMenuTD[12], "6. Private Medic");
					PlayerTextDrawSetString(playerid, CmdMenuTD[13], "7. Kinapper");
					PlayerTextDrawSetString(playerid, CmdMenuTD[14], "8. Rapist");
					PlayerTextDrawSetString(playerid, CmdMenuTD[15], "9. Hitman");
					PlayerTextDrawSetString(playerid, CmdMenuTD[16], "10. Whore");
					PlayerTextDrawSetString(playerid, CmdMenuTD[17], "11. Drugs Dealer");
					PlayerTextDrawSetString(playerid, CmdMenuTD[18], "12. Pick Pocket");
					PlayerTextDrawSetString(playerid, CmdMenuTD[19], "13. Con Artist");
					PlayerTextDrawSetString(playerid, CmdMenuTD[20], "14. Lawyer");
					PlayerTextDrawSetString(playerid, CmdMenuTD[21], "15. Drug Smuggler");
					PlayerTextDrawSetString(playerid, CmdMenuTD[22], "16. Treasure Hunter");
					PlayerTextDrawSetString(playerid, CmdMenuTD[23], "17. Fisherman");
					PlayerTextDrawSetString(playerid, CmdMenuTD[24], "18. Craftsman");
					PlayerTextDrawSetString(playerid, CmdMenuTD[25], "19. Bodyguard");
				}
				else if(TDMenu{playerid} == 2)
				{
					InsideSkillMenu2[playerid] = 1;
	    			SendClientMessage(playerid, COLOR_GREEN,"|_______________________________ Choose your desired skill _______________________________|");
					SendClientMessage(playerid, COLOR_GRAD1, "1. Vehicle Thief | 2. Car Mechanic | 3. Food Vendor | 4. Street Vendor | 5. Weapons Dealer");
					SendClientMessage(playerid, COLOR_GRAD2, "6. Private Medic | 7. Kinapper | 8. Rapist | 9. Hitman | 10. Whore");
					SendClientMessage(playerid, COLOR_GRAD3, "11. Drugs Dealer | 12. Pick Pocket | 13. Con Artist | 14. Lawyer | 15. Drug Smuggler");
					SendClientMessage(playerid, COLOR_GRAD4, "16. Treasure Hunter | 17. Fisherman | 18. Craftsman | 19. Bodyguard");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD4, "Dialogs are coming soon!");
				}
			}
 	    }
	    SetPlayerHealth(playerid, 100);
	    SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);

	    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWanted]);

	    ResetPlayerWeapons(playerid);

		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot0_gun], GunInfo[playerid][gSlot0_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot1_gun], GunInfo[playerid][gSlot1_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot2_gun], GunInfo[playerid][gSlot2_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot3_gun], GunInfo[playerid][gSlot3_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot4_gun], GunInfo[playerid][gSlot4_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot5_gun], GunInfo[playerid][gSlot5_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot6_gun], GunInfo[playerid][gSlot6_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot7_gun], GunInfo[playerid][gSlot7_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot8_gun], GunInfo[playerid][gSlot8_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot9_gun], GunInfo[playerid][gSlot9_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot10_gun], GunInfo[playerid][gSlot10_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot11_gun], GunInfo[playerid][gSlot11_ammo]);
		GivePlayerWeapon(playerid, GunInfo[playerid][gSlot12_gun], GunInfo[playerid][gSlot12_ammo]);

		SetPlayerPos(playerid, PosInfo[playerid][rPos_X], PosInfo[playerid][rPos_Y], PosInfo[playerid][rPos_Z]);
		SetPlayerFacingAngle(playerid, PosInfo[playerid][rPos_A]);
		SetPlayerInterior(playerid, PosInfo[playerid][rInterior]);
		SetPlayerVirtualWorld(playerid, PosInfo[playerid][rWorld]);
	}
	
	if(IsPlayersFirstSpawn{playerid} == true)
	{
	    if(PlayerInfo[playerid][cTime] > 0)
	    {
		    new time = PlayerInfo[playerid][cTime];
		    IsPlayersFirstSpawn{playerid} = false;
			ResetPlayerWeapons(playerid);
			SetPlayerWantedLevel(playerid, 0);
			SetPlayerPos(playerid, 2178.3713, 2407.2861, 73.0339);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			IsCaged{playerid} = true;
			SetPlayerArmour(playerid, 0);
			GameTextForPlayer(playerid,"~r~Caged!", 5000, 5);
			if(CageTime[playerid] > 0)
			{
				CageTime[playerid] = 0;
			}
			CageTime[playerid] = time;
			KillTimer(JailTimer[playerid]);
			KillTimer(CageTimer[playerid]);
			CageTimer[playerid] = SetTimerEx("AutoUncage", 1000, true, "%d", playerid);
		}
		ShowMissionGUIFrame(playerid, 0);
		SetTimerEx("LoadFPS", 5000, false, "d", playerid);
		return 1;
	}
	
    //
	if(IsPlayersFirstSpawn{playerid} == true && GetTeam{playerid} == CLASS_CIV && PlayerInfo[playerid][jTime] > 0)
	{
	    IsPlayersFirstSpawn{playerid} = false;
		new cell = random(6);
		if(cell == 0)
		{
	    	new time = PlayerInfo[playerid][jTime];
		    new inmateid = random(100000) + random(123456);
	    	InMateID[playerid] = inmateid;
	    	IsJailed{playerid} = true;
	    	IsInCell{playerid} = 1;//
	    	GoToJail{playerid} = false;
      		JailTime[playerid] = time;
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    	SetPlayerInterior(playerid, 3);
	    	SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 0.0);
	    	SetPlayerColor(playerid, WHITE);
	    	SetPlayerWantedLevel(playerid, 0);
	    	ResetPlayerWeapons(playerid);
	    	SetPlayerPos(playerid, 198.0651, 176.7253, 1003.0234);//
	    	SetPlayerFacingAngle(playerid, 359.4248);//
	    	TogglePlayerControllable(playerid, true);
	    	HasBeenArrested{playerid} = false;
	    	new string[150];
	    	format(string, sizeof(string), "Welcome to LVPD jail cell (1), you have been incarcerated for %d seconds.", time);
	    	SendClientMessage(playerid, RED, string);
	    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
	    	return 1;
    	}
    	else if(cell == 1)
		{
	    	new time = PlayerInfo[playerid][jTime];
		    new inmateid = random(100000) + random(123456);
	    	InMateID[playerid] = inmateid;
	    	IsJailed{playerid} = true;
	    	IsInCell{playerid} = 2;//
	    	GoToJail{playerid} = false;
      		JailTime[playerid] = time;
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    	SetPlayerInterior(playerid, 3);
	    	SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 0.0);
	    	SetPlayerColor(playerid, WHITE);
	    	SetPlayerWantedLevel(playerid, 0);
	    	ResetPlayerWeapons(playerid);
	    	SetPlayerPos(playerid, 193.8369, 176.7251, 1003.0234);//
	    	SetPlayerFacingAngle(playerid, 0.6781);//
	    	TogglePlayerControllable(playerid, true);
	    	HasBeenArrested{playerid} = false;
	    	new string[150];
	    	format(string, sizeof(string), "Welcome to LVPD jail cell (2), you have been incarcerated for %d seconds.", time);
	    	SendClientMessage(playerid, RED, string);
	    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    		return 1;
    	}
    	else if(cell == 2)
		{
	    	new time = PlayerInfo[playerid][jTime];
		    new inmateid = random(100000) + random(123456);
	    	InMateID[playerid] = inmateid;
	    	IsJailed{playerid} = true;
	    	IsInCell{playerid} = 3;//
	    	GoToJail{playerid} = false;
      		JailTime[playerid] = time;
	    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    	SetPlayerInterior(playerid, 3);
	    	SetPlayerVirtualWorld(playerid, 0);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 0.0);
	    	SetPlayerColor(playerid, WHITE);
		    SetPlayerWantedLevel(playerid, 0);
	    	ResetPlayerWeapons(playerid);
    		SetPlayerPos(playerid, 189.5884, 176.7243, 1003.1533);//
    		SetPlayerFacingAngle(playerid, 357.5681);//
    		TogglePlayerControllable(playerid, true);
    		HasBeenArrested{playerid} = false;
    		new string[150];
    		format(string, sizeof(string), "Welcome to LVPD jail cell (3), you have been incarcerated for %d seconds.", time);
    		SendClientMessage(playerid, RED, string);
    		SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    		return 1;
    	}
    	else if(cell == 3)
		{
	    	new time = PlayerInfo[playerid][jTime];
	    	new inmateid = random(100000) + random(123456);
    		InMateID[playerid] = inmateid;
    		IsJailed{playerid} = true;
    		IsInCell{playerid} = 4;//
    		GoToJail{playerid} = false;
      		JailTime[playerid] = time;
    		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    		SetPlayerInterior(playerid, 3);
    		SetPlayerVirtualWorld(playerid, 0);
    		SetPlayerHealth(playerid, 100.0);
    		SetPlayerArmour(playerid, 0.0);
    		SetPlayerColor(playerid, WHITE);
    		SetPlayerWantedLevel(playerid, 0);
    		ResetPlayerWeapons(playerid);
    		SetPlayerPos(playerid, 198.0573, 160.6476, 1003.1533);//
    		SetPlayerFacingAngle(playerid, 178.6532);//
    		TogglePlayerControllable(playerid, true);
    		HasBeenArrested{playerid} = false;
    		new string[150];
    		format(string, sizeof(string), "Welcome to LVPD jail cell (4), you have been incarcerated for %d seconds.", time);
    		SendClientMessage(playerid, RED, string);
    		SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    		return 1;
    	}
    	else if(cell == 4)
		{
	    	new time = PlayerInfo[playerid][jTime];
	    	new inmateid = random(100000) + random(123456);
    		InMateID[playerid] = inmateid;
    		IsJailed{playerid} = true;
    		IsInCell{playerid} = 5;//
    		GoToJail{playerid} = false;
      		JailTime[playerid] = time;
    		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    		SetPlayerInterior(playerid, 3);
    		SetPlayerVirtualWorld(playerid, 0);
    		SetPlayerHealth(playerid, 100.0);
    		SetPlayerArmour(playerid, 0.0);
    		SetPlayerColor(playerid, WHITE);
    		SetPlayerWantedLevel(playerid, 0);
    		ResetPlayerWeapons(playerid);
    		SetPlayerPos(playerid, 193.8127, 160.6480, 1003.1533);//
    		SetPlayerFacingAngle(playerid, 178.0266);//
    		TogglePlayerControllable(playerid, true);
    		HasBeenArrested{playerid} = false;
    		new string[150];
    		format(string, sizeof(string), "Welcome to LVPD jail cell (5), you have been incarcerated for %d seconds.", time);
    		SendClientMessage(playerid, RED, string);
    		SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    		return 1;
    	}
    	else if(cell == 5)
		{
	    	new time = PlayerInfo[playerid][jTime];
	    	new inmateid = random(100000) + random(123456);
    		InMateID[playerid] = inmateid;
    		IsJailed{playerid} = true;
    		IsInCell{playerid} = 6;//
    		GoToJail{playerid} = false;
      		JailTime[playerid] = time;
    		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    		SetPlayerInterior(playerid, 3);
    		SetPlayerVirtualWorld(playerid, 0);
    		SetPlayerHealth(playerid, 100.0);
    		SetPlayerArmour(playerid, 0.0);
    		SetPlayerColor(playerid, WHITE);
    		SetPlayerWantedLevel(playerid, 0);
    		ResetPlayerWeapons(playerid);
    		SetPlayerPos(playerid, 189.5607, 160.6474, 1003.1533);//
    		SetPlayerFacingAngle(playerid, 180.1966);//
    		TogglePlayerControllable(playerid, true);
    		HasBeenArrested{playerid} = false;
    		new string[150];
    		format(string, sizeof(string), "Welcome to LVPD jail cell (6), you have been incarcerated for %d seconds.", time);
    		SendClientMessage(playerid, RED, string);
    		SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
			KillTimer(JailTimer[playerid]);
			JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	}
		return 1;
	}
	//
    
    if(GoToJail{playerid} == true && GetTeam{playerid} == CLASS_CIV)
    {
		SendPlayerToJail(playerid);
		return 1;
	}
	if(HasDied{playerid} == true)
	{
	    new rand = random(sizeof(MedicSpawns));
		SetPlayerPos(playerid, MedicSpawns[rand][0], MedicSpawns[rand][1], MedicSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, MedicSpawns[rand][3]);
	    HasDied{playerid} = false;
	    if(GetTeam{playerid} == CLASS_COPS)
		{
	    	SetPlayerWantedLevel(playerid, 0);
	    	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
			SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
		}
		else if(GetTeam{playerid} == CLASS_CIA)
		{
	    	SetPlayerWantedLevel(playerid, 0);
	    	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
			SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
		}
		else if(GetTeam{playerid} == CLASS_FBI)
		{
	    	SetPlayerWantedLevel(playerid, 0);
	    	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
			SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
		}
    	else if(GetTeam{playerid} == CLASS_ARMY)
		{
        	SetPlayerWantedLevel(playerid, 0);
	    	if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
			SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
		}
		else if(GetTeam{playerid} == CLASS_MEDIC)
		{
        	SetPlayerWantedLevel(playerid, 0);
			ResetPlayerWeapons(playerid);
		}
		else if(GetTeam{playerid} == CLASS_CIV)
		{
	    	SetPlayerWantedLevel(playerid, 0);
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
		}
	}
	if(GetTeam{playerid} == CLASS_COPS)
	{
		PlayerInfo[playerid][pSkill] = 0;
	    ShowPlayerDialog(playerid, COP_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Police",
		"{FFFFFF}You're a police officer, your job is to arrest(/ar) and takedown\nwanted criminals(/pc) and ticket(/tk) suspect civilians(/pc).\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
	else if(GetTeam{playerid} == CLASS_CIA)
	{
		PlayerInfo[playerid][pSkill] = 0;
        ShowPlayerDialog(playerid, CIA_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas CIA",
		"{FFFFFF}You're a undercover cia agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
	else if(GetTeam{playerid} == CLASS_FBI)
	{
		PlayerInfo[playerid][pSkill] = 0;
        ShowPlayerDialog(playerid, FBI_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas FBI",
		"{FFFFFF}You're a undercover fbi agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    else if(GetTeam{playerid} == CLASS_CIV)
	{
	
	}
    else if(GetTeam{playerid} == CLASS_MEDIC)
	{
		PlayerInfo[playerid][pSkill] = 0;
        ShowPlayerDialog(playerid, MEDIC_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Medic",
		"{FFFFFF}You're a medic, your job is to assist members of Las Venturas with\ninjuries using /medic, they can also /medic to call for help.\nUse /m [msg] for [Medic Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    else if(GetTeam{playerid} == CLASS_ARMY)
	{
		PlayerInfo[playerid][pSkill] = 0;
        ShowPlayerDialog(playerid, ARMY_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Army",
		"{FFFFFF}You're a army soldier, your job is to focus on and takedown most\nwanted criminals(/pc) at all costs using army supplied vehicles.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_COPS)
	{
	    SetPlayerWantedLevel(playerid, 0);
	    SetPlayerColor(playerid,BLUE);
	    new rand = random(sizeof(CopSpawns));
		SetPlayerPos(playerid, CopSpawns[rand][0], CopSpawns[rand][1], CopSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, CopSpawns[rand][3]);
		if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
	}
	else if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_CIA)
	{
	    SetPlayerWantedLevel(playerid, 0);
        SetPlayerColor(playerid, WHITE);
        new rand = random(sizeof(CIASpawns));
		SetPlayerPos(playerid, CIASpawns[rand][0], CIASpawns[rand][1], CIASpawns[rand][2]);
		SetPlayerFacingAngle(playerid, CIASpawns[rand][3]);
		if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
	}
	else if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_FBI)
	{
	    SetPlayerWantedLevel(playerid, 0);
        SetPlayerColor(playerid, WHITE);
        new rand = random(sizeof(FBISpawns));
		SetPlayerPos(playerid, FBISpawns[rand][0] + 2.0, FBISpawns[rand][1], FBISpawns[rand][2]);
		SetPlayerFacingAngle(playerid, FBISpawns[rand][3]);
		if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
	}
    else if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_CIV)
	{
        SetPlayerColor(playerid,WHITE);
	    new rand = random(sizeof(CivSpawns));
		SetPlayerPos(playerid, CivSpawns[rand][0], CivSpawns[rand][1], CivSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, CivSpawns[rand][3]);
	}
    else if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_MEDIC)
	{
        SetPlayerWantedLevel(playerid, 0);
		ResetPlayerWeapons(playerid);
        SetPlayerArmour(playerid, 100);
        SetPlayerColor(playerid,PINK);
		new rand = random(sizeof(MedicSpawns));
		SetPlayerPos(playerid, MedicSpawns[rand][0], MedicSpawns[rand][1], MedicSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, MedicSpawns[rand][3]);
	}
    else if(HasDied{playerid} == false && GetTeam{playerid} == CLASS_ARMY)
	{
        SetPlayerWantedLevel(playerid, 0);
        SetPlayerColor(playerid,GREEN);
		new rand = random(sizeof(ArmySpawns));
        SetPlayerPos(playerid, ArmySpawns[rand][0], ArmySpawns[rand][1], ArmySpawns[rand][2]);
		SetPlayerFacingAngle(playerid, ArmySpawns[rand][3]);
		if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		SetPlayerAttachedObject(playerid, 1 , 18637, 1, 0, -0.1, 0.18, 90, 0, 272, 1, 1, 1);
	}
	
	if(IsUnfairDeath{playerid} == true)
	{
	    IsUnfairDeath{playerid} = false;
		GameTextForPlayer(playerid, "~g~Unfair ~r~Death.",3000,5);
		SendClientMessage(playerid, YELLOW, "Unfair death. Continuing current life...");
    }
	
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		SaveBankStats(playerid);
		SaveFightStats(playerid);
		SaveSettings(playerid);
		SaveSkillLevels(playerid);
    	SaveUserStats(playerid);
    	SaveDegreeStats(playerid);
 	}
	IsPlayersFirstSpawn{playerid} = false;
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    TextDrawSetString(ACnRInfo[playerid], "Atlantis Cops & Robbers "Version"");

    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);

	IsPlayersFirstSpawn{playerid} = false;
	
    HasPlayerDiedInCage{playerid} = false;
    if(IsCaged{playerid} == true)
    {
        HasPlayerDiedInCage{playerid} = true;
    }

    HasPlayerDiedInJail{playerid} = false;
    if(IsJailed{playerid} == true)
    {
        HasPlayerDiedInJail{playerid} = true;
    }
    
    if(IsPlayerBeingSpectated{playerid} == true && PlayerBeingSpectatedBy[playerid] != -1)
	{
	    if(IsAdminSpectating{PlayerBeingSpectatedBy[playerid]} == true && SpecInfo[PlayerBeingSpectatedBy[playerid]][IsSpectating] == playerid)
	    {
    		TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], false);
	    }
	}
    
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		SaveBankStats(playerid);
		SaveFightStats(playerid);
		SaveSettings(playerid);
		SaveSkillLevels(playerid);
    	SaveUserStats(playerid);
    	SaveDegreeStats(playerid);
 	}
 	
	if(killerid != INVALID_PLAYER_ID && IsLoggedIn{killerid} == 1)
	{
		SaveBankStats(killerid);
    	SaveUserStats(killerid);
    	SaveDegreeStats(killerid);
 	}
    
    if(IsOnduty{playerid} == 1)
	{
        IsOnduty{playerid} = 0;
		SetPlayerHealth(playerid, 100.0);
	}
    
	if(HasChangedSkin{playerid} == true)
	{
	    HasChangedSkin{playerid} = false;
		new string[150];
	  	format(string,sizeof(string),"%s (%d) has committed suicide...", GetPlayerNameEx(playerid), playerid);
		SendClientMessageToAll(PINK, string);
		SendDeathMessage(playerid, playerid, reason);
	    return 1;
	}
    
	if(killerid == INVALID_PLAYER_ID)
	{

		if(HasHit[playerid] != 0)
    	{
    		format(fstr, sizeof(fstr), "[HIT]: The hit on %s (%d) has been cancelled [Died]", GetPlayerNameEx(playerid), playerid);
        	SendClientMessageToAll(RED, fstr);
        	HasHit[playerid] = 0;
        	HasPlacedHit[playerid] = -1;
        	PlayerInfo[playerid][pDeaths] ++;
   		}
        if((reason == 255) || (killerid == 255))
	    {
			SendDeathMessage(INVALID_PLAYER_ID, playerid, reason);
	    	return 1;
		}
	}

	SendDeathMessage(killerid, playerid, reason);//Below this must ONLY be killerid kills(no INVALID_PLAYER_ID's)
	
    if(PlayerInfo[playerid][vLevel] < 1)
	{
	    if(CalculateWealth(playerid) < 1000000)//Wealth is less then 1M
	    {
	    	new mstring[150], medfee = random(500) + 9500;//Random 10K fees
	    	GivePlayerCash(playerid, -medfee);
        	format(mstring, sizeof(mstring), "[MED-FEES]: %s (%d) has just paid $%s in medical fees.", GetPlayerNameEx(playerid), playerid, number_format(medfee));
        	SendClientMessageToAll(RED, mstring);
        }
        else if(CalculateWealth(playerid) > 1000000 && CalculateWealth(playerid) < 10000000)//Wealth is more then 1M and less then 10M
	    {
	    	new mstring[150], medfee = random(500) + 19500;//Random 20K fees
	    	GivePlayerCash(playerid, -medfee);
        	format(mstring, sizeof(mstring), "[MED-FEES]: %s (%d) has just paid $%s in medical fees.", GetPlayerNameEx(playerid), playerid, number_format(medfee));
        	SendClientMessageToAll(RED, mstring);
        }
        else if(CalculateWealth(playerid) > 10000000)//Wealth is more then 10M
	    {
	    	new mstring[150], medfee = random(500) + 39500;//Random 40K fees
	    	GivePlayerCash(playerid, -medfee);
        	format(mstring, sizeof(mstring), "[MED-FEES]: %s (%d) has just paid $%s in medical fees.", GetPlayerNameEx(playerid), playerid, number_format(medfee));
        	SendClientMessageToAll(RED, mstring);
        }
	}

 	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);

	HasDied{playerid} = true;
	
    HasSpawned{playerid} = false;
    SetPlayerColor(playerid, GREY);
    
    //IsJailed{playerid} = false;

	HasShieldAttached{playerid} = false;
	HasBandanaAttached{playerid} = false;
    IsCaged{playerid} = false;
    IsRobbingIsle{playerid} = false;
    IsRobbingVegas{playerid} = false;
    IsRobbingRedsands{playerid} = false;
    IsRobbingCalg{playerid} = false;
    IsRobbingDrag{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingClub{playerid} = false;
    IsRobbingGym{playerid} = false;
    IsRobbingBank1{playerid} = false;
    IsRobbingBank2{playerid} = false;
    IsRobbingBank3{playerid} = false;
    IsRobbingBank4{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingBar{playerid} = false;
    IsRobbingFBI{playerid} = false;
    IsRobbingUNI{playerid} = false;
    IsRobbingCIA{playerid} = false;
    IsRobbingAmmu1{playerid} = false;
    IsRobbingAmmu2{playerid} = false;
    IsRobbingAmmu3{playerid} = false;
    IsRobbingAmmu4{playerid} = false;
    IsRobbingAmmu5{playerid} = false;
    IsRobbingAmmu6{playerid} = false;
    IsRobbingShot1{playerid} = false;
    IsRobbingShot2{playerid} = false;
    IsRobbingShot3{playerid} = false;
    IsRobbingShot4{playerid} = false;
    IsRobbingShot5{playerid} = false;
    IsRobbingCluck1{playerid} = false;
    IsRobbingCluck2{playerid} = false;
    IsRobbingCluck3{playerid} = false;
    IsRobbingStore1{playerid} = false;
    IsRobbingStore2{playerid} = false;
    IsRobbingStore3{playerid} = false;
    IsRobbingStore4{playerid} = false;
    IsRobbingPizza{playerid} = false;
    HasBeenIssuedTicket{playerid} = false;
    IsVIPInColorMode{playerid} = false;

    IsAtEvent{playerid} = 0;

    if(reason <= 46 && HasHit[playerid] != 0 && HasPlacedHit[playerid] != killerid)
    {
        format(fstr, sizeof(fstr), "[HIT]: %s (%d) killed %s (%d) and recieved $%s for a completed hit contract.", GetName(killerid), killerid, GetPlayerNameEx(playerid), playerid, number_format(HasHit[playerid]));
       	SendClientMessageToAll(RED, fstr);
       	new current_zone;
 		current_zone = Player_Zone[killerid];
	    format(fstr, sizeof(fstr), "[DISPATCH]: %s (%d) has just murdered %s (%d) at %s", GetName(killerid), killerid, GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
		CopRadio(BLUE, fstr);
       	GivePlayerCash(HasPlacedHit[playerid], -HasHit[playerid]);
       	GivePlayerCash(killerid, HasHit[playerid]);
     	SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid) + 4);
      	PlayerInfo[killerid][pKills] ++;
     	PlayerInfo[playerid][pDeaths] ++;
      	HasHit[playerid] = 0;
     	HasPlacedHit[playerid] = -1;
    }
    else if(HasPlacedHit[killerid] == playerid && HasHit[killerid] != 0)
    {
        format(fstr, sizeof(fstr), "[HIT]: The hit on %s (%d) has been cancelled [Revenge]", GetName(killerid), killerid);
        SendClientMessageToAll(RED, fstr);
       	new current_zone;
 		current_zone = Player_Zone[killerid];
	    format(fstr, sizeof(fstr), "[DISPATCH]: %s (%d) has just murdered %s (%d) at %s", GetName(killerid), killerid, GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
		CopRadio(BLUE, fstr);
        HasHit[killerid] = 0;
        HasPlacedHit[killerid] = -1;
        PlayerInfo[killerid][pKills] ++;
        PlayerInfo[playerid][pDeaths] ++;
    }
    else if(HasPlacedHit[playerid] == killerid && HasHit[playerid] != 0)
    {
        format(fstr, sizeof(fstr), "[HIT]: The hit on %s (%d) has been cancelled [Cancelled]", GetPlayerNameEx(playerid), playerid);
        SendClientMessageToAll(RED, fstr);
       	new current_zone;
 		current_zone = Player_Zone[killerid];
	    format(fstr, sizeof(fstr), "[DISPATCH]: %s (%d) has just murdered %s (%d) at %s", GetName(killerid), killerid, GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
		CopRadio(BLUE, fstr);
        HasHit[playerid] = 0;
        HasPlacedHit[playerid] = -1;
        PlayerInfo[killerid][pKills] ++;
        PlayerInfo[playerid][pDeaths] ++;
    }
	if(GetTeam{killerid} == CLASS_CIV)
    {
	    SetPlayerWantedLevel(killerid,GetPlayerWantedLevel(killerid) + 4);
	    PlayerInfo[killerid][pKills] ++;
	    PlayerInfo[playerid][pDeaths] ++;
		SendClientMessage(killerid, RED, "You've commited a crime (Murder). Your wanted level has been increased.");
		return 1;
    }
    if(GetTeam{playerid} == CLASS_CIV && GetTeam{killerid} == CLASS_COPS || GetTeam{killerid} == CLASS_FBI || GetTeam{killerid} == CLASS_CIA || GetTeam{killerid} == CLASS_ARMY)
	{
		if(GetPlayerWantedLevel(playerid) == 0)
		{
			SetPlayerScore(killerid, GetPlayerScore(killerid)-1);
			SendClientMessage(killerid, WHITE, "[BOT]Elvis: DONT KILL innocent players! /pc! /rules!");
			GivePlayerCash(killerid, -10000);
			PlayerInfo[killerid][pKills] ++;
			PlayerInfo[playerid][pDeaths] ++;
			SetPlayerScore(killerid, GetPlayerScore(killerid)-1);
			IsUnfairDeath{playerid} = true;
			SetPlayerHealth(killerid, 0.0);
			return 1;
		}
		else if(GetPlayerWantedLevel(playerid) <= 3 && GetPlayerWantedLevel(playerid) >= 1)
		{
			SendClientMessage(killerid, WHITE, "[BOT]Elvis: DONT KILL innocent suspects! /pc! Ticket them! /tk!");
			SetPlayerScore(killerid, GetPlayerScore(killerid)-1);
			PlayerInfo[killerid][pKills] ++;
			PlayerInfo[playerid][pDeaths] ++;
			GivePlayerCash(killerid, -10000);
			IsUnfairDeath{playerid} = true;
			SetPlayerHealth(killerid, 0.0);
			return 1;
		}
		else if(GetPlayerWantedLevel(playerid) >= 4)
		{
			if(GetTeam{killerid} == CLASS_COPS)
			{
				SetPlayerScore(killerid, GetPlayerScore(killerid)+1);
				SetPlayerScore(playerid, GetPlayerScore(playerid)-1);
				format(fstr2, sizeof(fstr2), "Suspect %s (%d) has been taken down by Officer %s (%d)",GetPlayerNameEx(playerid),playerid,GetName(killerid),killerid);
				SendClientMessageToAll(RED,fstr2);
				GoToJail{playerid} = true;
				GivePlayerCash(killerid, 10000);
				PlayerInfo[killerid][pKills] ++;
				PlayerInfo[playerid][pDeaths] ++;
				SetPlayerWantedLevel(playerid, 0);
				return 1;
			}
			else if(GetTeam{killerid} == CLASS_CIA)
			{
				SetPlayerScore(killerid, GetPlayerScore(killerid)+1);
    			SetPlayerScore(playerid, GetPlayerScore(playerid)-1);
				format(fstr2, sizeof(fstr2), "Suspect %s (%d) has been taken down by a Undercover CIA Agent",GetPlayerNameEx(playerid),playerid);
			    SendClientMessageToAll(RED,fstr2);
				SendClientMessage(killerid, YELLOW," Good Job! You killed a wanted criminal.");
				GivePlayerCash(killerid, 10000);
				GoToJail{playerid} = true;
				PlayerInfo[killerid][pKills] ++;
	            PlayerInfo[playerid][pDeaths] ++;
				SetPlayerWantedLevel(playerid, 0);
				return 1;
			}
			else if(GetTeam{killerid} == CLASS_FBI)
			{
				SetPlayerScore(killerid, GetPlayerScore(killerid)+1);
				SetPlayerScore(playerid, GetPlayerScore(playerid)-1);
				format(fstr2, sizeof(fstr2), "Suspect %s (%d) has been taken down by a Las Venturas FBI Agent.",GetPlayerNameEx(playerid),playerid);
				SendClientMessageToAll(RED,fstr2);
				SendClientMessage(killerid, YELLOW," Good Job! You killed a wanted criminal.");
				GivePlayerCash(killerid, 10000);
				GoToJail{playerid} = true;
				PlayerInfo[killerid][pKills] ++;
				PlayerInfo[playerid][pDeaths] ++;
				SetPlayerWantedLevel(playerid, 0);
				return 1;
			}
			else if(GetTeam{killerid} == CLASS_ARMY)
			{
				SetPlayerScore(killerid, GetPlayerScore(killerid)+1);
				SetPlayerScore(playerid, GetPlayerScore(playerid)-1);
				format(fstr2, sizeof(fstr2), "Suspect %s (%d) has been taken down by a Las Venturas Army Soldier",GetPlayerNameEx(playerid),playerid);
				SendClientMessageToAll(RED,fstr2);
				SendClientMessage(killerid, YELLOW," Good Job! You killed a wanted criminal.");
				GoToJail{playerid} = true;
				GivePlayerCash(killerid, 10000);
				PlayerInfo[killerid][pKills] ++;
				PlayerInfo[playerid][pDeaths] ++;
				SetPlayerWantedLevel(playerid, 0);
				return 1;
			}
		}
		else if(IsACop(playerid) && IsACop(killerid))
		{
			SetPlayerScore(killerid, GetPlayerScore(killerid)-1);
			PlayerInfo[killerid][pKills] ++;
			PlayerInfo[playerid][pDeaths] ++;
			SendClientMessage(killerid, WHITE, "[BOT]Elvis: DONT KILL your TEAM MATES! /pc! /rules!");
			GivePlayerCash(killerid, -10000);
			IsUnfairDeath{playerid} = true;
			SetPlayerHealth(killerid, 0.0);
			return 1;
		}
	}
    return 1;
}

public OnPlayerUpdate(playerid)
{

    new drunknew = GetPlayerDrunkLevel(playerid);
    if (drunknew < 100) { // go back up, keep cycling.
        SetPlayerDrunkLevel(playerid, 2000);
    }else {

        if (pDrunkLevelLast[playerid] != drunknew) {

            new wfps = pDrunkLevelLast[playerid] - drunknew;

            if ((wfps > 0) && (wfps < 200))
                pFPS[playerid] = wfps;

            pDrunkLevelLast[playerid] = drunknew;
        }
    }
	if(IsPlayerNPC(playerid)) return 1;
    if(HasSpawned{playerid} == true && GetPlayerState(playerid) != PLAYER_STATE_NONE)
	{
		new string[150];
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new veh = GetPlayerVehicleID(playerid);

			new Float:speed_x, Float:speed_y, Float:speed_z, Float:temp_speed, final_speed;
			GetVehicleVelocity(veh, speed_x,speed_y, speed_z);
			temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z)) * 136.666667;
			final_speed = floatround(temp_speed, floatround_round);

			GetVehicleHealth(veh, GetVehicleCurrentHealth[veh]);
			GetVehicleCurrentHealth[veh] = GetVehicleCurrentHealth[veh]/10;

			if(GetVehicleFuel[veh] < 1)
			{
				GetVehicleFuel[veh] = 0;
				GameTextForPlayer(playerid, "~r~Out of Fuel!", 5000, 5);
				return 1;
			}
			new current_zone;
        	current_zone = Player_Zone[playerid];
			format(string, sizeof(string), "Atlantis Cops & Robbers "Version" [] Speed: %d/mph [] Health: %.0f [] Fuel: %d [] Location: %s", final_speed, GetVehicleCurrentHealth[veh], GetVehicleFuel[veh], ZoneNames[current_zone][zone_name]);
			TextDrawSetString(ACnRInfo[playerid], string);
		}
		else
		{
			new current_zone;
        	current_zone = Player_Zone[playerid];
			format(string, sizeof(string), "Atlantis Cops & Robbers "Version" [] Location: %s", ZoneNames[current_zone][zone_name]);
			TextDrawSetString(ACnRInfo[playerid], string);
		}
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    KillTimer(biztimer{playerid});
    KillTimer(attimer{playerid});
    KillTimer(isletimer{playerid});
	KillTimer(vegastimer{playerid});
	KillTimer(redsandstimer{playerid});
	KillTimer(calgtimer{playerid});
	KillTimer(dragtimer{playerid});
	KillTimer(banktimer{playerid});
	KillTimer(lvpdtimer{playerid});
	KillTimer(bartimer{playerid});
	KillTimer(ammutimer{playerid});
	KillTimer(shottimer{playerid});
	KillTimer(clucktimer{playerid});
	KillTimer(storetimer{playerid});
	KillTimer(pizzatimer{playerid});
	KillTimer(clubtimer{playerid});
	KillTimer(gymtimer{playerid});
	KillTimer(fbitimer{playerid});
	KillTimer(unitimer{playerid});
	KillTimer(ciatimer{playerid});
	KillTimer(ZoneTimer[playerid]);
	KillTimer(JailTimer[playerid]);
	KillTimer(CageTimer[playerid]);

	SavePosStats(playerid);
	SaveGunStats(playerid);

 	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	
    if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
	    //
	    if(JailTime[playerid] > 0)
	    {
	        PlayerInfo[playerid][jTime] = JailTime[playerid];
	    }
	    if(CageTime[playerid] > 0)
	    {
	        PlayerInfo[playerid][cTime] = CageTime[playerid];
	    }
	    //
	    
		SaveBankStats(playerid);
    	SaveFightStats(playerid);
    	SaveSettings(playerid);
    	SaveSkillLevels(playerid);
    	SaveUserStats(playerid);
    	SaveDegreeStats(playerid);
    }
    
	//IsPlayersFirstSpawn{playerid} = false;
    
    HasDied{playerid} = false;
    HasSpawned{playerid} = false;
    IsPlayerUsingTuneMenu{playerid} = false;
    HasBeenArrested{playerid} = false;
    IsNewbieMuted{playerid} = false;
    HasBeenTied{playerid} = false;
    HasBeenCuffed{playerid} = false;
    IsCaged{playerid} = false;
    IsInCellCP{playerid} = false;
    IsInCellCP1{playerid} = false;
    IsInCellCP2{playerid} = false;
    IsInCellCP3{playerid} = false;
    IsInCellCP4{playerid} = false;
    IsInCellCP5{playerid} = false;
    IsInCellCP6{playerid} = false;
    CanESC{playerid} = true;
    GoToJail{playerid} = false;
	IsJailed{playerid} = false;
    HasSavedPos{playerid} = false;
    HasSpawned{playerid} = false;
    IsPlayerEditingObject{playerid} = false;
    IsPlayerAttachingObject{playerid} = false;
    IsPlayerRobbingBiz{playerid} = false;
    IsPlayerSetBuilder{playerid} = false;
	IsPlayerRobbingHouse{playerid} = false;
	IsPlayerInArena{playerid} = false;
	IsPlayerGettingMatsNV{playerid} = false;
	IsPlayerGettingMatsBS{playerid} = false;
    IsRobbingIsle{playerid} = false;
    IsRobbingVegas{playerid} = false;
    IsRobbingRedsands{playerid} = false;
    IsRobbingCalg{playerid} = false;
    IsRobbingDrag{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingClub{playerid} = false;
    IsRobbingGym{playerid} = false;
    IsRobbingBank1{playerid} = false;
    IsRobbingBank2{playerid} = false;
    IsRobbingBank3{playerid} = false;
    IsRobbingBank4{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingBar{playerid} = false;
    IsRobbingFBI{playerid} = false;
    IsRobbingUNI{playerid} = false;
    IsRobbingCIA{playerid} = false;
    IsRobbingAmmu1{playerid} = false;
    IsRobbingAmmu2{playerid} = false;
    IsRobbingAmmu3{playerid} = false;
    IsRobbingAmmu4{playerid} = false;
    IsRobbingAmmu5{playerid} = false;
    IsRobbingAmmu6{playerid} = false;
    IsRobbingShot1{playerid} = false;
    IsRobbingShot2{playerid} = false;
    IsRobbingShot3{playerid} = false;
    IsRobbingShot4{playerid} = false;
    IsRobbingShot5{playerid} = false;
    IsRobbingCluck1{playerid} = false;
    IsRobbingCluck2{playerid} = false;
    IsRobbingCluck3{playerid} = false;
    IsRobbingStore1{playerid} = false;
    IsRobbingStore2{playerid} = false;
    IsRobbingStore3{playerid} = false;
    IsRobbingStore4{playerid} = false;
    IsRobbingPizza{playerid} = false;
    HasBeenIssuedTicket{playerid} = false;
    IsVIPInColorMode{playerid} = false;
    HasChangedSkin{playerid} = false;
    HasPlayerDiedInJail{playerid} = false;
    HasPlayerDiedInCage{playerid} = false;
	HasBandanaAttached{playerid} = false;
	HasShieldAttached{playerid} = false;
	IsAdminUnderCover{playerid} = false;
	IsPlayersFirstSpawn{playerid} = false;
    
    if(IsPlayerBeingSpectated{playerid} == true && PlayerBeingSpectatedBy[playerid] != -1)
	{
	    if(IsAdminSpectating{PlayerBeingSpectatedBy[playerid]} == true && SpecInfo[PlayerBeingSpectatedBy[playerid]][IsSpectating] == playerid)
	    {
    		TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], false);
	    }
	}
	SpecInfo[playerid][IsSpectating] = -1;
    IsAdminSpectating{playerid} = false;
    IsPlayerBeingSpectated{playerid} = false;
    PlayerBeingSpectatedBy[playerid] = -1;

    GetPlayerLastVehicleID[playerid] = -1;

    hasenteredtower{playerid} = 0;

    IsLoggedIn{playerid} = 0;
    BomberStage{playerid} = 0;
    BribeTo[playerid] = -1;
	Bribe[playerid] = -1;
	BribeFrom[playerid] = -1;
    IsInGod{playerid} = 0;
    IsOnduty{playerid} = 0;
    IsInGodCar{playerid} = 0;
    IsMuted{playerid} = 0;
    HasLotteryTicket{playerid} = 0;
    HasMadeEvent{playerid} = 0;
	IsAtEvent{playerid} = 0;
	HasAdminStoppedJoins = 0;
	text_line_count{playerid} = 0;
    HasSetCheckpoint{playerid} = 0;
    lastx[playerid] = 0.0;
	lasty[playerid] = 0.0;
	lastz[playerid] = 0.0;
	chattingwith[playerid] = -1;
	shotsfired[playerid] = 0;

	pGroupInfo[playerid][gid] = -1;
	pGroupInfo[playerid][invited] = -1;
	pGroupInfo[playerid][attemptjoin] = -1;
	
	switch(reason)
    {
    	case 0:
    	{
    	    if(TimeoutMsg{playerid} == 1)
			{
	        	format(fstr2,sizeof(fstr2), "[PART]: %s (%d) has left the server [Timeout]",GetPlayerNameEx(playerid),playerid);
	        	SendClientMessageToAll(GREY, fstr2);
        	}
    	}
    	case 1:
    	{
    		if(QuitMsg{playerid} == 1)
			{
        		format(fstr2,sizeof(fstr2), "[PART]: %s (%d) has left the server [Quit]",GetPlayerNameEx(playerid),playerid);
        		SendClientMessageToAll(GREY, fstr2);
        	}
    	}
    	case 2:
    	{
    		if(KickMsg{playerid} == 1)
			{
        		format(fstr2,sizeof(fstr2), "[PART]: %s (%d) has left the server [Kicked]",GetPlayerNameEx(playerid),playerid);
        		SendClientMessageToAll(GREY, fstr2);
        	}
    	}
    }
    
   	if(HasHit[playerid] > 0)
	{
	    new string[150];
		format(string, sizeof(string), "[HIT]: The hit on %s (%d) has been cancelled [Disconnected]", GetPlayerNameEx(playerid), playerid);
		SendClientMessageToAll(RED, string);
		HasHit[playerid] = 0;
		HasPlacedHit[playerid] = -1;
	}
    
    UnloadPlayerVehicles(playerid);

    LeaveGroup(playerid, 2);

    new hfile[40];
	format(hfile, sizeof(hfile), HOUSE_FILE, GetPVarInt(playerid, "LastHouseCP"));
    if(!strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), pNick(playerid), false) && GetPVarInt(playerid, "IsInHouse") == 1 && fexist(hfile))
	{
	    HouseInfo[playerid][hQuit] = 1;
	}
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(VehicleBombOwner[i] == playerid)
	    {
	        VehicleBombOwner[i] = INVALID_PLAYER_ID;
		}
	}
	for(new o = 0; o < MAX_SET_OBJECTS; o++)
	{
	    if(GetSetObjects[playerid][o] == -1) continue;
    	DestroyObject(GetSetObjects[playerid][o]);
    	GetSetObjects[playerid][o] = -1;
    	GetSetObjectsCount[playerid]--;
    }
	return 1;
}

#define MAX_IP_CONNECTS 5//Anti-BOT Attack (BETA)
stock GetIPCount(ip[])//Anti-BOT Attack (BETA)
{
    new ip_check[50], ip_count = 0;
    foreach(Player, i)
	{
		GetPlayerIp(i, ip_check, sizeof(ip_check));
		if(!strcmp(ip_check, ip))
		{
			ip_count++;
			if(ip_count == MAX_IP_CONNECTS)
			{
			    return ip_count;
			}
		}
    }
    return ip_count;
}

public OnPlayerConnect(playerid)
{
	//Anti-BOT Attack (BETA)
	new ip_check[50], ban[64], elvis[150];
    GetPlayerIp(playerid, ip_check, sizeof(ip_check));
    new get_ip_count = GetIPCount(ip_check);
	if(get_ip_count > MAX_IP_CONNECTS)
	{
	    printf("Removing suspected BOT ip: %s...", ip_check);
	    format(elvis, sizeof(elvis), "%s (%d) has been banned | Reason: BOT detected", GetPlayerNameEx(playerid), playerid);
	   	SendClientMessageToAll(RED, elvis);
	    format(ban, sizeof(ban), "banip %s", ip_check);
        SendRconCommand(ban);
        Ban(playerid);
        return 1;
    }
    //
    CreateCMDMenu(playerid);
	CreateMissionTD(playerid);
    PlayerPlaySound(playerid,5203,0.0,0.0,0.0);
    
    GetPlayerLastVehicleID[playerid] = -1;
    
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
    
	if(IsPlayerNPC(playerid)) return 1;
	
	AcceptCMDExpire(playerid);
	
	JailTime[playerid] = 0;
	CageTime[playerid] = 0;
	
	ZoneTimer[playerid] = SetTimerEx("Update_Zones", 1000, true, "d", playerid);
    ZoneUpdates[playerid] = 1;
	Player_Zone[playerid] = -1;
	
	IsPlayersFirstSpawn{playerid} = true;

	HasDied{playerid} = false;
    HasSpawned{playerid} = false;
    IsPlayerUsingTuneMenu{playerid} = false;
    HasBeenArrested{playerid} = false;
    IsNewbieMuted{playerid} = false;
    HasShieldAttached{playerid} = false;
    HasBandanaAttached{playerid} = false;
    HasBeenTied{playerid} = false;
    HasBeenCuffed{playerid} = false;
    IsCaged{playerid} = false;
    IsInCellCP{playerid} = false;
    IsInCellCP1{playerid} = false;
    IsInCellCP2{playerid} = false;
    IsInCellCP3{playerid} = false;
    IsInCellCP4{playerid} = false;
    IsInCellCP5{playerid} = false;
    IsInCellCP6{playerid} = false;
    CanESC{playerid} = true;
    GoToJail{playerid} = false;
	IsJailed{playerid} = false;
    HasSavedPos{playerid} = false;
    HasSpawned{playerid} = false;
    IsPlayerEditingObject{playerid} = false;
    IsPlayerAttachingObject{playerid} = false;
    IsPlayerRobbingBiz{playerid} = false;
    IsPlayerSetBuilder{playerid} = false;
	IsPlayerRobbingHouse{playerid} = false;
	IsPlayerInArena{playerid} = false;
	IsPlayerGettingMatsNV{playerid} = false;
	IsPlayerGettingMatsBS{playerid} = false;
    IsRobbingIsle{playerid} = false;
    IsRobbingVegas{playerid} = false;
    IsRobbingRedsands{playerid} = false;
    IsRobbingCalg{playerid} = false;
    IsRobbingDrag{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingClub{playerid} = false;
    IsRobbingGym{playerid} = false;
    IsRobbingBank1{playerid} = false;
    IsRobbingBank2{playerid} = false;
    IsRobbingBank3{playerid} = false;
    IsRobbingBank4{playerid} = false;
    IsRobbingLVPD{playerid} = false;
    IsRobbingBar{playerid} = false;
    IsRobbingFBI{playerid} = false;
    IsRobbingUNI{playerid} = false;
    IsRobbingCIA{playerid} = false;
    IsRobbingAmmu1{playerid} = false;
    IsRobbingAmmu2{playerid} = false;
    IsRobbingAmmu3{playerid} = false;
    IsRobbingAmmu4{playerid} = false;
    IsRobbingAmmu5{playerid} = false;
    IsRobbingAmmu6{playerid} = false;
    IsRobbingShot1{playerid} = false;
    IsRobbingShot2{playerid} = false;
    IsRobbingShot3{playerid} = false;
    IsRobbingShot4{playerid} = false;
    IsRobbingShot5{playerid} = false;
    IsRobbingCluck1{playerid} = false;
    IsRobbingCluck2{playerid} = false;
    IsRobbingCluck3{playerid} = false;
    IsRobbingStore1{playerid} = false;
    IsRobbingStore2{playerid} = false;
    IsRobbingStore3{playerid} = false;
    IsRobbingStore4{playerid} = false;
    IsRobbingPizza{playerid} = false;
    HasBeenIssuedTicket{playerid} = false;
    IsVIPInColorMode{playerid} = false;
    HasChangedSkin{playerid} = false;
    IsPlayerUsingAnim{playerid} = false;
    HasPlayerDiedInJail{playerid} = false;
    HasPlayerDiedInCage{playerid} = false;
	HasBandanaAttached{playerid} = false;
	HasShieldAttached{playerid} = false;
	IsAdminUnderCover{playerid} = false;

 	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
    
    SpecInfo[playerid][IsSpectating] = -1;
    IsAdminSpectating{playerid} = false;
    IsPlayerBeingSpectated{playerid} = false;
    PlayerBeingSpectatedBy[playerid] = -1;

	hasenteredtower{playerid} = 0;
	
	pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;
    
    IsInCell{playerid} = 0;
    InMateID[playerid] = 0;

    BizRobCP[playerid] = -1;
    BizID[playerid] = -1;

    HasHit[playerid] = 0;
    HasStreetCall[playerid] = 0;
    HasFoodCall[playerid] = 0;
	HasPlacedHit[playerid] = -1;
	BomberStage{playerid} = 0;

    IsLoggedIn{playerid} = 0;
    BribeTo[playerid] = -1;
	Bribe[playerid] = -1;
	BribeFrom[playerid] = -1;
    IsInGod{playerid} = 0;
    IsOnduty{playerid} = 0;
    IsInGodCar{playerid} = 0;
    IsMuted{playerid} = 0;
    HasLotteryTicket{playerid} = 0;
    HasMadeEvent{playerid} = 0;
	IsAtEvent{playerid} = 0;
	HasAdminStoppedJoins = 0;
	text_line_count{playerid} = 0;
    HasSetCheckpoint{playerid} = 0;
    lastx[playerid] = 0.0;
	lasty[playerid] = 0.0;
	lastz[playerid] = 0.0;
	chattingwith[playerid] = -1;
	shotsfired[playerid] = 0;

	pGroupInfo[playerid][gid] = -1;
	pGroupInfo[playerid][invited] = -1;
	pGroupInfo[playerid][attemptjoin] = -1;

    verifydestroycar{playerid} = 0;
    
    for(new o = 0; o < MAX_SET_OBJECTS; o++)
    {
    	GetSetObjects[playerid][o] = -1;
    }
	GetSetObjectsCount[playerid] = 0;
	
    LoadPlayerVehicles(playerid);

    SetPlayerWantedLevel(playerid, 0);
    ResetPlayerCash(playerid);
    StartCheckpointSeeking();

    SetPlayerColor(playerid, GREY);

 	TextDrawShowForPlayer(playerid, ACnRInfo[playerid]);
 	TextDrawSetString(ACnRInfo[playerid], "Atlantis Cops & Robbers "Version"");

    SetPVarInt(playerid, "LastHouseCP", -1);
	SetPVarInt(playerid, "IsInHouse", 0);

	if(!IsPlayerNPC(playerid) && !strcmp(GetName(playerid), "Hacker", false) || !strcmp(GetName(playerid), "n00b", false) || !strcmp(GetName(playerid), "Noob", false) || !strcmp(GetName(playerid), "Elvis", false) || !strcmp(GetName(playerid), "Empty", false) || !strcmp(GetName(playerid), "Nobody", false))
	{
		SendClientMessage(playerid, RED, "[BOT]Elvis: Name not allowed. Please choose another, then rejoin.");
		KickEx(playerid);
		return 1;
	}
	
	if(fexist(GunPath(playerid)))
    {
        INI_ParseFile(GunPath(playerid), "LoadGun_%s", .bExtra = true, .extra = playerid);
        IsPlayersFirstSpawn{playerid} = true;
    }
    else
    {
        new File:startfile = fopen(GunPath(playerid), io_write);
    	fclose(startfile);
    }

    if(fexist(PosPath(playerid)))
    {
        INI_ParseFile(PosPath(playerid), "LoadPos_%s", .bExtra = true, .extra = playerid);
        IsPlayersFirstSpawn{playerid} = true;
    }
    else
    {
        new File:startfile = fopen(PosPath(playerid), io_write);
    	fclose(startfile);
    }

    new bankfile[40];
	format(bankfile, sizeof(bankfile), BANK_FILE, GetName(playerid));
	if(fexist(bankfile))
	{
		INI_ParseFile(bankfile, "LoadBank_%s", .bExtra = true, .extra = playerid);
		if(BankInfo[playerid][Balance] < 0)
		{
		    BankInfo[playerid][Balance] = 0;
		}
		if(BankInfo[playerid][Credit] < 0)
		{
		    BankInfo[playerid][Credit] = 0;
		}
		if(BankInfo[playerid][Debt] < 0)
		{
		    BankInfo[playerid][Debt] = 0;
		}
	}
	else
	{

    	BankInfo[playerid][Balance] = 0;
    	BankInfo[playerid][Credit] = 0;
    	BankInfo[playerid][Debt] = 0;
    	BankInfo[playerid][Fees] = 0;
    	BankInfo[playerid][Transactions] = 0;

		new bFilee[40];
    	format(bFilee, sizeof(bFilee), BANK_FILE, GetName(playerid));
		new INI:file = INI_Open(bFilee);
		INI_WriteInt(file, "Balance", BankInfo[playerid][Balance]);
		INI_WriteInt(file, "Credit", BankInfo[playerid][Credit]);
		INI_WriteInt(file, "Debt", BankInfo[playerid][Debt]);
		INI_WriteInt(file, "Fees", BankInfo[playerid][Fees]);
		INI_WriteInt(file, "Transactions", BankInfo[playerid][Transactions]);
		INI_Close(file);
	}

    FightStyleID{playerid} = 5;
	new stylefile[40];
	format(stylefile, sizeof(stylefile), STYLE_FILE, GetName(playerid));
	if(fexist(stylefile))
	{
		INI_ParseFile(stylefile, "LoadStyle_%s", .bExtra = true, .extra = playerid);
	}
	else
	{
		new INI:ffile = INI_Open(stylefile);
		INI_WriteInt(ffile, "FightStyle", 0);
		FightStyleID{playerid} = 0;
		INI_Close(ffile);
	}

	new levelsfile[40];
	format(levelsfile, sizeof(levelsfile), SLEVELS_FILE, GetName(playerid));
	if(fexist(levelsfile))
	{
		INI_ParseFile(levelsfile, "LoadLevels_%s", .bExtra = true, .extra = playerid);
	}
	else
	{
		new INI:ffile = INI_Open(levelsfile);
		INI_WriteInt(ffile, "CraftSkill", 0);
    	INI_WriteInt(ffile, "ThiefSkill", 0);
    	INI_WriteInt(ffile, "FoodSkill", 0);
    	INI_WriteInt(ffile, "StreetSkill", 0);
    	INI_WriteInt(ffile, "MechSkill", 0);
    	INI_WriteInt(ffile, "WeaponSkill", 0);
    	INI_WriteInt(ffile, "MedicSkill", 0);
    	INI_WriteInt(ffile, "KidnapSkill", 0);
    	INI_WriteInt(ffile, "RapeSkill", 0);
    	INI_WriteInt(ffile, "HitmanSkill", 0);
    	INI_WriteInt(ffile, "WhoreSkill", 0);
    	INI_WriteInt(ffile, "DrugSkill", 0);
    	INI_WriteInt(ffile, "PickPktSkill", 0);
    	INI_WriteInt(ffile, "ConArtSkill", 0);
    	INI_WriteInt(ffile, "LawyerSkill", 0);
    	INI_WriteInt(ffile, "SmugglerSkill", 0);
    	INI_WriteInt(ffile, "TreasureSkill", 0);
    	INI_WriteInt(ffile, "FishSkill", 0);
    	INI_WriteInt(ffile, "GuardSkill", 0);
		INI_Close(ffile);
	}

	new settingsfile[40];
	format(settingsfile, sizeof(settingsfile), SETTINGS_FILE, GetName(playerid));
	if(fexist(settingsfile))
	{
		INI_ParseFile(settingsfile, "LoadSettings_%s", .bExtra = true, .extra = playerid);
	}
	else
	{
		new INI:ffile = INI_Open(settingsfile);
		INI_WriteInt(ffile, "PMs", 1);
		INI_WriteInt(ffile, "JoinMsg", 1);
		INI_WriteInt(ffile, "QuitMsg", 1);
		INI_WriteInt(ffile, "KickMsg", 1);
		INI_WriteInt(ffile, "TimeoutMsg", 1);
		INI_WriteInt(ffile, "TDMenu", 1);
		INI_WriteInt(ffile, "NameTags", 1);
		INI_WriteInt(ffile, "NTDD", 70);
		INI_WriteInt(ffile, "TogFPS", 1);
		INI_Close(ffile);
	}

	new degreefile[40];
	format(degreefile, sizeof(degreefile), DEGREE_FILE, GetName(playerid));
	if(fexist(degreefile))
	{
		INI_ParseFile(degreefile, "LoadDegree_%s", .bExtra = true, .extra = playerid);
	}
	else
	{
	    DegreeInfo[playerid][dReal] = 0;
    	DegreeInfo[playerid][dLaw] = 0;
    	DegreeInfo[playerid][dDefense] = 0;
    	DegreeInfo[playerid][dHealth] = 0;
    	DegreeInfo[playerid][dMechanic] = 0;
    	DegreeInfo[playerid][dDealer] = 0;
    	DegreeInfo[playerid][dWeapons] = 0;


        new INI:dfile = INI_Open(degreefile);
        INI_WriteInt(dfile, "dReal", DegreeInfo[playerid][dReal]);
        INI_WriteInt(dfile, "dLaw", DegreeInfo[playerid][dLaw]);
        INI_WriteInt(dfile, "dDefense", DegreeInfo[playerid][dDefense]);
        INI_WriteInt(dfile, "dHealth", DegreeInfo[playerid][dHealth]);
        INI_WriteInt(dfile, "dMechanic", DegreeInfo[playerid][dMechanic]);
        INI_WriteInt(dfile, "dDealer", DegreeInfo[playerid][dDealer]);
        INI_WriteInt(dfile, "dWeapons", DegreeInfo[playerid][dWeapons]);
		INI_Close(dfile);
	}

	new userfile[60];
	format(userfile, sizeof(userfile), USER_FILE, GetName(playerid));
	if(fexist(userfile))
	{
        INI_ParseFile(userfile, "LoadUser_%s", .bExtra = true, .extra = playerid);
	    new check[150];
        new File:checkfile = fopen(userfile, io_read);
        while(fread(checkfile, check))
        {
            if(strcmp(check, "Banned = 1", false) == 0 || strcmp(check, "Banned=1", false) == 0)
            {
                format(fstr2, sizeof(fstr2), "%s (%d) has been kicked | Reason: Name banned", GetPlayerNameEx(playerid), playerid);
                SendClientMessageToAll(RED, fstr2);
                KickEx(playerid);
                return 1;
            }
            else
            {
                format(fstr2,sizeof(fstr2),"{FFFFFF}Welcome back %s!\n\nPlease enter your password below to login:", GetPlayerNameEx(playerid));
                ShowPlayerDialog(playerid, LOGIN_MENU, DIALOG_STYLE_PASSWORD, "{FFFFFF}ACnR Account Login", fstr2, "Login", "Quit");
            }
        }
	}
	else
	{
	    PlayerInfo[playerid][aLevel] = 0;
    	PlayerInfo[playerid][vLevel] = 0;
    	PlayerInfo[playerid][pCash] = 10000;
    	PlayerInfo[playerid][pScore] = 0;
    	PlayerInfo[playerid][pKills] = 0;
    	PlayerInfo[playerid][pDeaths] = 0;
    	PlayerInfo[playerid][pHoldups] = 0;
    	PlayerInfo[playerid][pCrimes] = 0;
    	PlayerInfo[playerid][pFined] = 0;
    	PlayerInfo[playerid][pArrests] = 0;
    	PlayerInfo[playerid][pTakedowns] = 0;
    	PlayerInfo[playerid][pTickets] = 0;
    	PlayerInfo[playerid][pRope] = 0;
    	PlayerInfo[playerid][pPaintCan] = 0;
    	PlayerInfo[playerid][pScissors] = 0;
    	PlayerInfo[playerid][pKits] = 0;
    	PlayerInfo[playerid][vLock] = 0;
    	PlayerInfo[playerid][Helper] = 0;
    	PlayerInfo[playerid][hHelper] = 0;
    	PlayerInfo[playerid][pWarns] = 0;
    	PlayerInfo[playerid][pKicks] = 0;
    	PlayerInfo[playerid][pJoins] = 1;
    	PlayerInfo[playerid][pArrests] = 0;
    	PlayerInfo[playerid][pMaterials] = 0;
    	PlayerInfo[playerid][Banned] = 0;
    	PlayerInfo[playerid][jTime] = 0;
    	PlayerInfo[playerid][pWanted] = 0;
    	PlayerInfo[playerid][pArmour] = 0.0;
    	PlayerInfo[playerid][pHealth] = 0.0;
    	PlayerInfo[playerid][cTime] = 0;
    	PlayerInfo[playerid][pSkill] = 0;


    	new INI:ufile = INI_Open(userfile);
        INI_WriteInt(ufile, "aLevel",PlayerInfo[playerid][aLevel]);
        INI_WriteInt(ufile, "vLevel",PlayerInfo[playerid][vLevel]);
        INI_WriteInt(ufile, "pCash", PlayerInfo[playerid][pCash]);
        INI_WriteInt(ufile, "pScore", PlayerInfo[playerid][pScore]);
        INI_WriteInt(ufile, "pKills", PlayerInfo[playerid][pKills]);
        INI_WriteInt(ufile, "pDeaths", PlayerInfo[playerid][pDeaths]);
        INI_WriteInt(ufile, "pHoldups", PlayerInfo[playerid][pHoldups]);
        INI_WriteInt(ufile, "pCrimes", PlayerInfo[playerid][pCrimes]);
        INI_WriteInt(ufile, "pFined", PlayerInfo[playerid][pFined]);
        INI_WriteInt(ufile, "pArrests", PlayerInfo[playerid][pArrests]);
        INI_WriteInt(ufile, "pTakedowns", PlayerInfo[playerid][pTakedowns]);
        INI_WriteInt(ufile, "pTickets", PlayerInfo[playerid][pTickets]);
        INI_WriteInt(ufile, "pRope", PlayerInfo[playerid][pRope]);
        INI_WriteInt(ufile, "pPaintCan", PlayerInfo[playerid][pPaintCan]);
        INI_WriteInt(ufile, "pScissors", PlayerInfo[playerid][pScissors]);
        INI_WriteInt(ufile, "pKits", PlayerInfo[playerid][pKits]);
        INI_WriteInt(ufile, "vLock", PlayerInfo[playerid][vLock]);
        INI_WriteInt(ufile, "Helper", PlayerInfo[playerid][Helper]);
        INI_WriteInt(ufile, "hHelper", PlayerInfo[playerid][hHelper]);
        INI_WriteInt(ufile, "pWarns", PlayerInfo[playerid][pWarns]);
        INI_WriteInt(ufile, "pKicks", PlayerInfo[playerid][pKicks]);
        INI_WriteInt(ufile, "pJoins", PlayerInfo[playerid][pJoins]);
        INI_WriteInt(ufile, "pMaterials", PlayerInfo[playerid][pMaterials]);
        INI_WriteInt(ufile, "Banned", PlayerInfo[playerid][Banned]);
        INI_WriteInt(ufile, "jTime", PlayerInfo[playerid][jTime]);
        INI_WriteInt(ufile, "pWanted", PlayerInfo[playerid][pWanted]);
        INI_WriteFloat(ufile, "pArmour", PlayerInfo[playerid][pArmour]);
        INI_WriteFloat(ufile, "pHealth", PlayerInfo[playerid][pHealth]);
        INI_WriteInt(ufile, "cTime", PlayerInfo[playerid][cTime]);
        INI_WriteInt(ufile, "Skill", PlayerInfo[playerid][pSkill]);
		INI_Close(ufile);

        format(fstr,sizeof(fstr),"{FFFFFF}Welcome to Las Venturas %s!\n\nYou're not registered yet, please enter a password below to register:", GetPlayerNameEx(playerid));
		ShowPlayerDialog(playerid, REGISTER_MENU, DIALOG_STYLE_PASSWORD, "{FFFFFF}ACnR Account Register", fstr, "Register", "Quit");
	}

	SetPlayerMapIcon(playerid, 0, 2296.2930,2461.4600,38.6875, 30, 0, MAPICON_LOCAL);//lvpd
	SetPlayerMapIcon(playerid, 1, 2270.9761,2293.8179,10.8203, 52, 0, MAPICON_LOCAL);//nv city bank
	SetPlayerMapIcon(playerid, 2, 2127.5869,2379.6211,10.8203, 44, 0, MAPICON_LOCAL);//isle casino
	SetPlayerMapIcon(playerid, 3, 2016.9768,1916.4065,12.3424, 44, 0, MAPICON_LOCAL);//new vegas casino
	SetPlayerMapIcon(playerid, 4, 2196.9570,1677.1637,12.3672, 25, 0, MAPICON_LOCAL);//caligulas casino
	SetPlayerMapIcon(playerid, 5, 2019.3196,1007.7487,10.8203, 43, 0, MAPICON_LOCAL);//4 dragons casino
	SetPlayerMapIcon(playerid, 6, 2159.5405,943.1776,10.8203, 6, 0, MAPICON_LOCAL);//ammu1
	SetPlayerMapIcon(playerid, 7, 2367.0552,2071.0693,10.8203, 10, 0, MAPICON_LOCAL);//burger1
	SetPlayerMapIcon(playerid, 9, 2393.2737,2041.5657,10.8203, 14, 0, MAPICON_LOCAL);//cluck1
	SetPlayerMapIcon(playerid, 10, 2472.8655,2034.1702,11.0625, 10, 0, MAPICON_LOCAL);//burger2
	SetPlayerMapIcon(playerid, 11, 2452.5308,2065.1902,10.8203, 50, 0, MAPICON_LOCAL);//24/1
	SetPlayerMapIcon(playerid, 12, 2546.5271,1972.6571,10.8203, 50, 0, MAPICON_LOCAL);//24/2
	SetPlayerMapIcon(playerid, 13, 2412.5039,1123.8190,10.8203, 30, 0, MAPICON_LOCAL);//cityhall
	SetPlayerMapIcon(playerid, 14, 2194.9390,1990.9948,12.2969, 50, 0, MAPICON_LOCAL);//24/3
	SetPlayerMapIcon(playerid, 15, 1658.4960,2250.0437,11.0701, 43, 0, MAPICON_LOCAL);//redsands casino
	SetPlayerMapIcon(playerid, 16, 1607.3329,1816.7660,10.8203, 22, 0, MAPICON_LOCAL);//hospital
	SetPlayerMapIcon(playerid, 17, 1672.5485,1447.8712,10.7881, 5, 0, MAPICON_LOCAL);//airport
	SetPlayerMapIcon(playerid, 18, 1157.9246,2072.2874,11.0625, 10, 0, MAPICON_LOCAL);//burger3
	SetPlayerMapIcon(playerid, 19, 937.0844,1733.2168,8.8516, 30, 0, MAPICON_LOCAL);//cia
	SetPlayerMapIcon(playerid, 20, 776.7208,1871.4360,4.9068, 6, 0, MAPICON_LOCAL);//ammu2
	SetPlayerMapIcon(playerid, 21, 173.0402,1177.1461,14.7578, 14, 0, MAPICON_LOCAL);//cluck2
	SetPlayerMapIcon(playerid, 22, -316.1609,829.8887,14.2422, 6, 0, MAPICON_LOCAL);//ammu3
	SetPlayerMapIcon(playerid, 23, -1508.8851,2610.7004,55.8359, 6, 0, MAPICON_LOCAL);//ammu4
	SetPlayerMapIcon(playerid, 24, 2169.4143,2795.9263,10.8203, 10, 0, MAPICON_LOCAL);//burger4
	SetPlayerMapIcon(playerid, 25, -1457.9816,2589.9771,55.9957, 52, 0, MAPICON_LOCAL);//el que bank
	SetPlayerMapIcon(playerid, 26, -179.1975,1133.1324,19.7422, 52, 0, MAPICON_LOCAL);//fort bank
	SetPlayerMapIcon(playerid, 27, -828.1474,1504.5988,19.8529, 52, 0, MAPICON_LOCAL);//los barraques bank
	SetPlayerMapIcon(playerid, 28, 2351.8555,2533.6199,10.8203, 29, 0, MAPICON_LOCAL);//pizza1
	SetPlayerMapIcon(playerid, 29, 2556.9512,2065.3730,11.0995, 6, 0, MAPICON_LOCAL);//ammu5
	SetPlayerMapIcon(playerid, 30, 1735.7432,1866.1516,10.8203, 55, 0, MAPICON_LOCAL);//carshop
	SetPlayerMapIcon(playerid, 31, 2114.8848,920.2251,10.8203, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 32, 2639.7700,1106.1627,10.8203, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 33, 2202.4160,2474.7686,10.8203, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 34, 2147.2354,2747.9351,10.8203, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 35, 1596.1118,2198.9944,10.8203, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 36, 612.0298,1695.0731,6.9922, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 37, -1328.3317,2677.4412,50.0625, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 38, -1471.3004,1864.1031,32.6328, 27, 0, MAPICON_LOCAL);//service station
	SetPlayerMapIcon(playerid, 39, 2311.2742,2324.2349,10.8203, 48, 0, MAPICON_LOCAL);//night club
	SetPlayerMapIcon(playerid, 40, 2319.3486,2391.8047,10.8203, 6, 0, MAPICON_LOCAL);//ammu6
	SetPlayerMapIcon(playerid, 45, 2247.6702,2396.1687,10.8203, 50, 0, MAPICON_LOCAL);//24/4
	SetPlayerMapIcon(playerid, 46, 1872.2554,2071.8850,11.0625, 10, 0, MAPICON_LOCAL);//burger5
	SetPlayerMapIcon(playerid, 47, -1213.8292,1830.3749,41.9297, 14, 0, MAPICON_LOCAL);//cluck3
	SetPlayerMapIcon(playerid, 48, 2447.6692,2376.2556,12.1635, 30, 0, MAPICON_LOCAL);//FBI HQ
	SetPlayerMapIcon(playerid, 49, 1968.7693,2295.8730,16.4559, 54, 0, MAPICON_LOCAL);//NV GYM
	SetPlayerMapIcon(playerid, 50, 966.2469,2160.6836,10.8203, 56, 0, MAPICON_LOCAL);//Mats pickup(LV)
	SetPlayerMapIcon(playerid, 51, -2488.5205,2295.3135,4.9844, 56, 0, MAPICON_LOCAL);//Mats pickup(BS)
	SetPlayerMapIcon(playerid, 52, 2375.5786,2306.3044,8.1406, 36, 0, MAPICON_LOCAL);//NVU
	SetPlayerMapIcon(playerid, 53, 1976.0565,2162.1646,11.0703, 63, 0, MAPICON_LOCAL);//Paint Shop
	SetPlayerMapIcon(playerid, 54, -1420.3623,2583.7390,55.8433, 63, 0, MAPICON_LOCAL);//Paint Shop
	SetPlayerMapIcon(playerid, 55, -99.9229,1118.1846,19.7417, 63, 0, MAPICON_LOCAL);//Paint Shop
	SetPlayerMapIcon(playerid, 56, 1602.5015,1615.4475,10.8203, 27, 0, MAPICON_LOCAL);//Airport service station
	SetPlayerMapIcon(playerid, 57, -2322.4451,2298.0378,-0.5677, 27, 0, MAPICON_LOCAL);//Bayside marina service station
	SetPlayerMapIcon(playerid, 58, 2305.9966,2377.8203,11.2208, 49, 0, MAPICON_LOCAL);//Las Venturas Bar
	SetPlayerMapIcon(playerid, 59, 2364.8955,2377.6169,10.8203, 31, 0, MAPICON_LOCAL);//Las Venturas Apartments
	
	if(JoinMsg{playerid} == 1)
	{
    	format(fstr3, sizeof(fstr3),"[PART]: %s (%d) has joined the server [Join]", GetPlayerNameEx(playerid), playerid);
		SendClientMessageToAll(GREY, fstr3);
	}
	new ip[50], stringg[150];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(stringg, sizeof(stringg),"[IP]: %s (%d) - %s", GetName(playerid), playerid, ip);
	Log("logs/loginiplog.log", stringg);

	SendClientMessage(playerid, WHITE, "[BOT]Elvis: Welcome to ACnR "Version"");
	SendClientMessage(playerid, RED, "This is NOT a deathmatch server, read /rules BEFORE playing!");
	SendClientMessage(playerid, LIGHTGREEN, "This server does NOT encourage gambling in anyway.");
	SendClientMessage(playerid, ORANGE, "Use /help and /faqs for help also /n and /askadmin for more help.");
	GameTextForPlayer(playerid, "~w~Welcome to Las Venturas", 5000, 1);
	return 1;
}

public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_YELLOW, "The health hack check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the player alt-tabbed.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		if(HHcheckFloats[giveplayerid][1] > 0) {
			SetArmor(giveplayerid, HHcheckFloats[giveplayerid][1]);
		}
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

		HHcheckUsed = 0;
  		return 1;
	}
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the person was probably desynced/lagging.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
        if(HHcheckFloats[giveplayerid][1] > 0) {
			SetArmor(giveplayerid, HHcheckFloats[giveplayerid][1]);
		}
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {00F70C}positive{FFFFFF}. The person may be health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {FF0606}negative{FFFFFF}. The person was not health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	if(HHcheckFloats[giveplayerid][1] > 0) {
		SetArmor(giveplayerid, HHcheckFloats[giveplayerid][1]);
	}
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

public LoadDegree_data(playerid, name[], value[])
{
	INI_Int("dReal", DegreeInfo[playerid][dReal]);
	INI_Int("dLaw", DegreeInfo[playerid][dLaw]);
	INI_Int("dDefense", DegreeInfo[playerid][dDefense]);
	INI_Int("dHealth", DegreeInfo[playerid][dHealth]);
	INI_Int("dMechanic", DegreeInfo[playerid][dMechanic]);
	INI_Int("dDealer", DegreeInfo[playerid][dDealer]);
	INI_Int("dWeapons", DegreeInfo[playerid][dWeapons]);
    return 1;
}

public LoadLevels_data(playerid, name[], value[])
{
    INI_Int("CraftSkill", PlayerInfo[playerid][pCraftSkill]);
    INI_Int("ThiefSkill", PlayerInfo[playerid][pThiefSkill]);
    INI_Int("FoodSkill", PlayerInfo[playerid][pFoodSkill]);
    INI_Int("StreetSkill", PlayerInfo[playerid][pStreetSkill]);
    INI_Int("MechSkill", PlayerInfo[playerid][pMechSkill]);
    INI_Int("WeaponSkill", PlayerInfo[playerid][pWeaponSkill]);
    INI_Int("MedicSkill", PlayerInfo[playerid][pMedicSkill]);
    INI_Int("KidnapSkill", PlayerInfo[playerid][pKidnapSkill]);
    INI_Int("RapeSkill", PlayerInfo[playerid][pRapeSkill]);
    INI_Int("HitmanSkill", PlayerInfo[playerid][pHitmanSkill]);
    INI_Int("WhoreSkill", PlayerInfo[playerid][pWhoreSkill]);
    INI_Int("DrugSkill", PlayerInfo[playerid][pDrugSkill]);
    INI_Int("PickPktSkill", PlayerInfo[playerid][pPickPktSkill]);
    INI_Int("ConArtSkill", PlayerInfo[playerid][pConArtSkill]);
    INI_Int("LawyerSkill", PlayerInfo[playerid][pLawyerSkill]);
    INI_Int("SmugglerSkill", PlayerInfo[playerid][pSmugglerSkill]);
    INI_Int("TreasureSkill", PlayerInfo[playerid][pTreasureSkill]);
    INI_Int("FishSkill", PlayerInfo[playerid][pFishSkill]);
    INI_Int("GuardSkill", PlayerInfo[playerid][pGuardSkill]);
    return 1;
}

public LoadUser_data(playerid, name[], value[])
{
	INI_String("pPass", PlayerInfo[playerid][pPass], 129);
	INI_Int("aLevel", PlayerInfo[playerid][aLevel]);
	INI_Int("vLevel", PlayerInfo[playerid][vLevel]);
	INI_Int("pCash", PlayerInfo[playerid][pCash]);
	INI_Int("pScore", PlayerInfo[playerid][pScore]);
	INI_Int("pKills", PlayerInfo[playerid][pKills]);
	INI_Int("pDeaths", PlayerInfo[playerid][pDeaths]);
	INI_Int("pHoldups", PlayerInfo[playerid][pHoldups]);
	INI_Int("pCrimes", PlayerInfo[playerid][pCrimes]);
	INI_Int("pFined", PlayerInfo[playerid][pFined]);
	INI_Int("pArrests", PlayerInfo[playerid][pArrests]);
	INI_Int("pTakedowns", PlayerInfo[playerid][pTakedowns]);
	INI_Int("pTickets", PlayerInfo[playerid][pTickets]);
	INI_Int("pRope", PlayerInfo[playerid][pRope]);
	INI_Int("pPaintCan", PlayerInfo[playerid][pPaintCan]);
	INI_Int("pScissors", PlayerInfo[playerid][pScissors]);
	INI_Int("pKits", PlayerInfo[playerid][pKits]);
	INI_Int("vLock", PlayerInfo[playerid][vLock]);
	INI_Int("Helper", PlayerInfo[playerid][Helper]);
	INI_Int("hHelper", PlayerInfo[playerid][hHelper]);
	INI_Int("pJoins", PlayerInfo[playerid][pJoins]);
	INI_Int("pMaterials", PlayerInfo[playerid][pMaterials]);
	INI_Int("pWarns", PlayerInfo[playerid][pWarns]);
	INI_Int("pKicks", PlayerInfo[playerid][pKicks]);
	INI_Int("Banned", PlayerInfo[playerid][Banned]);
	INI_Int("jTime", PlayerInfo[playerid][jTime]);
	INI_Float("pArmour", PlayerInfo[playerid][pArmour]);
	INI_Float("pHealth", PlayerInfo[playerid][pHealth]);
	INI_Int("pWanted", PlayerInfo[playerid][pWanted]);
	INI_Int("cTime", PlayerInfo[playerid][cTime]);
	INI_Int("Skill", PlayerInfo[playerid][pSkill]);
    return 1;
}

public LoadStyle_data(playerid, name[], value[])
{
	INI_Int("FightStyle", FightStyleID{playerid});
    return 1;
}

public LoadSettings_data(playerid, name[], value[])
{
	INI_Int("PMs", PMs{playerid});
	INI_Int("JoinMsg", JoinMsg{playerid});
	INI_Int("QuitMsg", QuitMsg{playerid});
	INI_Int("KickMsg", KickMsg{playerid});
	INI_Int("TimeoutMsg", TimeoutMsg{playerid});
	INI_Int("TDMenu", TDMenu{playerid});
	INI_Int("NameTags", NameTags{playerid});
	INI_Int("NTDD", NTDD{playerid});
	INI_Int("TogFPS", TogFPS{playerid});
    return 1;
}

public LoadBank_data(playerid, name[], value[])
{
	INI_Int("Balance", BankInfo[playerid][Balance]);
	INI_Int("Credit", BankInfo[playerid][Credit]);
	INI_Int("Debt", BankInfo[playerid][Debt]);
	INI_Int("Fees", BankInfo[playerid][Fees]);
	INI_Int("Transactions", BankInfo[playerid][Transactions]);
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success)
	{
		SendClientMessage(playerid, COLOR_WHITE, "SERVER: Uh Oh! There seems to be a problem. Probably our fault. Try typing the command again,");
		SendClientMessage(playerid, COLOR_WHITE, "or type /cmds to see a list of available commands. You can even ask for help using /n.");
	}
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        GetPlayerPos(targetid, posx, posy, posz);
        tempposx = (oldposx -posx);
        tempposy = (oldposy -posy);
        tempposz = (oldposz -posz);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            return 1;
        }
    }
    return 0;
}

public WaitToTryEscape(playerid)
{
    CanESC{playerid} = true;
    return 1;
}

public SendPlayerToJail(playerid)
{
	new cell = random(6);
	if(cell == 0)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
    	IsCaged{playerid} = false;
		HasBeenCuffed{playerid} = false;
    	IsInCell{playerid} = 1;//
    	GoToJail{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 198.0651, 176.7253, 1003.0234);//
    	SetPlayerFacingAngle(playerid, 359.4248);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (1), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	return 1;
    }
    else if(cell == 1)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
    	IsInCell{playerid} = 2;//
    	GoToJail{playerid} = false;
		HasBeenCuffed{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 193.8369, 176.7251, 1003.0234);//
    	SetPlayerFacingAngle(playerid, 0.6781);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (2), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	return 1;
    }
    else if(cell == 2)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
    	IsInCell{playerid} = 3;//
    	GoToJail{playerid} = false;
		HasBeenCuffed{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 189.5884, 176.7243, 1003.1533);//
    	SetPlayerFacingAngle(playerid, 357.5681);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (3), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	return 1;
    }
    else if(cell == 3)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
		HasBeenCuffed{playerid} = false;
    	IsInCell{playerid} = 4;//
    	GoToJail{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 198.0573, 160.6476, 1003.1533);//
    	SetPlayerFacingAngle(playerid, 178.6532);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (4), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	return 1;
    }
    else if(cell == 4)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
    	IsInCell{playerid} = 5;//
    	GoToJail{playerid} = false;
		HasBeenCuffed{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 193.8127, 160.6480, 1003.1533);//
    	SetPlayerFacingAngle(playerid, 178.0266);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (5), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    	return 1;
    }
    else if(cell == 5)
	{
	    new time;
	    if(HasPlayerDiedInJail{playerid} == true)
	    {
	        HasPlayerDiedInJail{playerid} = false;
	        time = JailTime[playerid];
		}
		else
		{
			time = random(120) + 60;//Random 2-3 mins
		}
	    new inmateid = random(100000) + random(123456);
    	InMateID[playerid] = inmateid;
    	IsJailed{playerid} = true;
    	IsInCell{playerid} = 6;//
    	GoToJail{playerid} = false;
		HasBeenCuffed{playerid} = false;
     	JailTime[playerid] = time;
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	SetPlayerInterior(playerid, 3);
    	SetPlayerVirtualWorld(playerid, 0);
    	SetPlayerHealth(playerid, 100.0);
    	SetPlayerArmour(playerid, 0.0);
    	SetPlayerColor(playerid, WHITE);
    	SetPlayerWantedLevel(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SetPlayerPos(playerid, 189.5607, 160.6474, 1003.1533);//
    	SetPlayerFacingAngle(playerid, 180.1966);//
    	TogglePlayerControllable(playerid, true);
    	HasBeenArrested{playerid} = false;
    	new string[150];
    	format(string, sizeof(string), "Welcome to LVPD jail cell (6), you have been incarcerated for %d seconds.", time);
    	SendClientMessage(playerid, RED, string);
    	SendClientMessage(playerid, WHITE, "Try /(esc)ape or get someone to /break or /bail you out.");
		KillTimer(JailTimer[playerid]);
		JailTimer[playerid] = SetTimerEx("AutoUnjail", 1000, true, "%d", playerid);
    }
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	VerifyCheckpoint(playerid);
	if(HasSetCheckpoint{playerid} == 1)
	{
     	PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
	    HasSetCheckpoint{playerid} = 0;
	    SendClientMessage(playerid, RED, "Your currently set checkpoint has been removed.");
	}
	return 1;
}

public OnCheckpointEnter(playerid, checkpointid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
    switch(checkpointid)
	{
	    case AIRPORT_CP:
	    {
	        ShowPlayerDialog(playerid, AIRPORT_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Airport", "{FFFFFF}Item: Paracute(x1) - Price: $1K\nService: Skydiving - Price: $5K", "Select", "Cancel");
	    }
	    case TOWER_CP:
	    {
	        if(PlayerInfo[playerid][vLevel] > 0)
	        {
        		SetPlayerPos(playerid,2150.0178,2425.3809,65.2773);
        		SetPlayerFacingAngle(playerid,265.2805);
        		hasenteredtower{playerid} = 1;
				attimer{playerid} = SetTimerEx("DetectATDeparture", 5000, true, "d", playerid);
				SendClientMessage(playerid, LIGHTGREEN, "Welcome to the Admin Tower, use /(open/close)hanger to toggle the hanger. Use /exitat at anytime.");
			}
			else if(PlayerInfo[playerid][aLevel] > 0)
	        {
        		SetPlayerPos(playerid,2150.0178,2425.3809,65.2773);
        		SetPlayerFacingAngle(playerid,265.2805);
        		hasenteredtower{playerid} = 1;
				attimer{playerid} = SetTimerEx("DetectATDeparture", 5000, true, "d", playerid);
				SendClientMessage(playerid, LIGHTGREEN, "Welcome to the Admin Tower, use /(open/close)hanger to toggle the hanger. Use /exitat at anytime.");
			}
			return 1;
		}
	    case BAR_CP:
	    {
		    SetPlayerInterior(playerid, 11);
		    SetPlayerPos(playerid, 502.2838, -70.2034, 998.7578);
		    SetPlayerFacingAngle(playerid, 181.8469);//
		    return 1;
		}
	    case APARTMENTS_CP:
	    {
		    ShowPlayerDialog(playerid, APARTMENTS_ELEVATOR, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Apartments - Elevator", "{FFFFFF}Ground Level\nLevel 1\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\nLevel 7\nLevel 8\nLevel 9\nLevel 10\nRoof", "Select", "Cancel");
		    return 1;
		}
	    case BAR_EXIT_CP:
	    {
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid, 2306.1594, 2373.5042, 10.8203);
		    SetPlayerFacingAngle(playerid, 180.6346);//
		    return 1;
		}
	    case BAR_ROB_CP:
	    {
            if(GetTeam{playerid} == CLASS_CIV)
			{
                SendClientMessage(playerid,YELLOW,"Type /robbery to start robbing the Las Venturas Bar.");
			}
		    return 1;
	    }
	    case NV_UNI_CP:
	    {
		    SetPlayerInterior(playerid, 3);
		    SetPlayerPos(playerid, -2028.1526,-105.1106,1035.1719);
		    SetPlayerFacingAngle(playerid, 90.5330);//
		    return 1;
		}
	    case NV_UNI_CP2:
	    {
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2375.5786 + 2,2306.3044 + 2,8.1406);
		    SetPlayerFacingAngle(playerid,174.5346 + 180);
		    return 1;
		}
	    case NV_UNI_CP3:
	    {
            if(GetTeam{playerid} == CLASS_CIV)
			{
                SendClientMessage(playerid,YELLOW,"Type /robbery to start robbing the Las Venturas University.");
                ShowPlayerDialog(playerid, DEGREE_LIST_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas University - Master Degrees",
"{FFFFFF}Real Estate Degree\nLaw Degree\nDefense Degree\nMedical Degree\nMechanical Degree\nDealership Degree\nWeapons Degree", "Review", "Cancel");
            }
            else
            {
                ShowPlayerDialog(playerid, DEGREE_LIST_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas University - Master Degrees",
"{FFFFFF}Real Estate Degree\nLaw Degree\nDefense Degree\nMedical Degree\nMechanical Degree\nDealership Degree\nWeapons Degree", "Review", "Cancel");
            }
	    }
	    case CAR_SHOP:
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
	        	ShowPlayerDialog(playerid, NVM_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Motors", "{FFFFFF}Sports Cars\nMotor Bikes\nSpecial Vehicles", "Select", "Cancel");
			}
		}
	    case GYM_ENTER_CP:
		{
		    SetPlayerInterior(playerid,7);
		    SetPlayerPos(playerid,774.0471,-76.2140,1000.6542);
		    SetPlayerFacingAngle(playerid,359.5078);
		    return 1;
		}
		case GYM_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,1966.7211,2294.8142,16.4559);
		    SetPlayerFacingAngle(playerid,88.9527);
		    return 1;
		}
		case GYM_RING_CP:
		{
		    SetPlayerInterior(playerid,7);
		    SetPlayerPos(playerid,768.8473,-70.6679,1001.5692);
		    SetPlayerFacingAngle(playerid,5.2635);
		    return 1;
		}
		case GYM_STYLE_CP:
		{
            if(GetTeam{playerid} == CLASS_CIV)
			{
                SendClientMessage(playerid,YELLOW,"Type /robbery to start robbing the Las Venturas Gym.");
                ShowPlayerDialog(playerid, GYM_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Gym - Fighting Styles", "{FFFFFF}Elbow Style - $50K\nBoxer Style - $100K\nGrab and Kick Style - $50K\nKnee and Head Style - $50K\nKung Fu Style - $100K\nNormal Style - Free", "Select", "Cancel");
            }
            else
            {
                ShowPlayerDialog(playerid, GYM_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Gym - Fighting Styles", "{FFFFFF}Elbow Style - $50K\nBoxer Style - $100K\nGrab and Kick Style - $50K\nKnee and Head Style - $50K\nKung Fu Style - $100K\nNormal Style - Free", "Select", "Cancel");
		    	return 1;
            }
		}
	    case LVPD_BASE_BOTT_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid, 197.7797,168.2728,1003.0234);
		    SetPlayerFacingAngle(playerid,271.4453);
		    return 1;
		}
		case CIA_CP:
		{
		    SetPlayerInterior(playerid, 10);
		    SetPlayerPos(playerid, 246.0881,110.8219,1003.2188);
		    SetPlayerFacingAngle(playerid, 358.1136);
		    return 1;
		}
		case FBI_ENTER_CP:
		{
		    SetPlayerInterior(playerid, 6);
		    SetPlayerPos(playerid, 246.5886,65.0507,1003.6406);
		    SetPlayerFacingAngle(playerid, 359.6833);
		    return 1;
		}
		case LVPD_BASE_TOP_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,197.7797,168.2728,1003.0234);
		    SetPlayerFacingAngle(playerid,271.4453);
		    return 1;
		}
		case LVPD_ENT_1_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,238.6027,141.3288,1003.0234);
		    SetPlayerFacingAngle(playerid,0.0568);
		    return 1;
		}
		case LVPD_ENT_2_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,288.9532,169.8294,1007.1794);
		    SetPlayerFacingAngle(playerid,355.9600);
		    return 1;
		}
		case LVPD_TOP_CPARK_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,197.7797,168.2728,1003.0234);
		    SetPlayerFacingAngle(playerid,271.4453);
		    return 1;
		}
		case LVPD_ROOF_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,197.7797,168.2728,1003.0234);
		    SetPlayerFacingAngle(playerid,271.4453);
		    return 1;
		}
		case ISLE_CP:
		{
		    SetPlayerInterior(playerid,12);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerPos(playerid,1133.0824,-12.4341,1000.6797);
		    SetPlayerFacingAngle(playerid,357.0778);
		    return 1;
		}
		case VEGAS_CP:
		{
		    SetPlayerInterior(playerid,12);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,1133.0824,-12.4341,1000.6797);
		    SetPlayerFacingAngle(playerid,357.0778);
		    return 1;
		}
		case REDSANDS_CP:
		{
		    SetPlayerInterior(playerid,12);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,1133.0824,-12.4341,1000.6797);
		    SetPlayerFacingAngle(playerid,357.0778);
		    return 1;
		}
		case CALG_CP:
		{
		    SetPlayerInterior(playerid,1);
		    SetPlayerPos(playerid,2234.0032,1711.0713,1011.4044);
		    SetPlayerFacingAngle(playerid,182.8158);
		    return 1;
		}
		case DRAG_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerPos(playerid,2015.5421,1017.8916,996.8750);
		    SetPlayerFacingAngle(playerid,88.8009);
		    return 1;
		}
		case AMMU1_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case AMMU2_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case AMMU3_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case AMMU4_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,4);
		    SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case AMMU5_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,5);
    		SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case AMMU6_CP:
		{
		    SetPlayerInterior(playerid,4);
		    SetPlayerVirtualWorld(playerid,6);
		    SetPlayerPos(playerid,285.6608,-83.8597,1001.5156);
		    SetPlayerFacingAngle(playerid,359.0891);
		    return 1;
		}
		case BURGER1_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerPos(playerid,365.4156,-73.5571,1001.5078);
		    SetPlayerFacingAngle(playerid,305.7385);
		    return 1;
		}
		case BURGER2_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,365.4156,-73.5571,1001.5078);
		    SetPlayerFacingAngle(playerid,305.7385);
		    return 1;
		}
		case BURGER3_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,365.4156,-73.5571,1001.5078);
		    SetPlayerFacingAngle(playerid,305.7385);
		    return 1;
		}
		case CLUCK1_CP:
		{
		    SetPlayerInterior(playerid,9);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerPos(playerid,364.9649,-9.4282,1001.8516);
		    SetPlayerFacingAngle(playerid,358.8747);
		    return 1;
		}
		case CLUCK2_CP:
		{
		    SetPlayerInterior(playerid,9);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,364.9649,-9.4282,1001.8516);
		    SetPlayerFacingAngle(playerid,358.8747);
		    return 1;
		}
		case CLUCK3_CP:
		{
		    SetPlayerInterior(playerid,9);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,364.9649,-9.4282,1001.8516);
		    SetPlayerFacingAngle(playerid,358.8747);
		    return 1;
		}
		case BURGER4_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,4);
		    SetPlayerPos(playerid,365.4156,-73.5571,1001.5078);
		    SetPlayerFacingAngle(playerid,305.7385);
		    return 1;
		}
		case BURGER5_CP:
		{
		    SetPlayerInterior(playerid,10);
		    SetPlayerVirtualWorld(playerid,5);
		    SetPlayerPos(playerid,365.4156,-73.5571,1001.5078);
		    SetPlayerFacingAngle(playerid,305.7385);
		    return 1;
		}
		case SHOP_24_1_CP:
		{
		    SetPlayerInterior(playerid,17);
		    SetPlayerVirtualWorld(playerid,1);
		    SetPlayerPos(playerid,-25.5918,-185.0244,1003.5469);
		    SetPlayerFacingAngle(playerid,358.4055);
		    return 1;
		}
		case SHOP_24_2_CP:
		{
		    SetPlayerInterior(playerid,17);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,-25.5918,-185.0244,1003.5469);
		    SetPlayerFacingAngle(playerid,358.4055);
		    return 1;
		}
		case SHOP_24_3_CP:
		{
		    SetPlayerInterior(playerid,17);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,-25.5918,-185.0244,1003.5469);
		    SetPlayerFacingAngle(playerid,358.4055);
		    return 1;
		}
		case SHOP_24_4_CP:
		{
		    SetPlayerInterior(playerid,17);
		    SetPlayerVirtualWorld(playerid,4);
		    SetPlayerPos(playerid,-25.5918,-185.0244,1003.5469);
		    SetPlayerFacingAngle(playerid,358.4055);
		    return 1;
		}
		case NV_BANK_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,1);
            SetPlayerPos(playerid,2307.5640,-15.9402,26.7496);
		    SetPlayerFacingAngle(playerid,273.3910);
		    return 1;
		}
		case ELQ_BANK_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,2);
		    SetPlayerPos(playerid,2307.5640,-15.9402,26.7496);
		    SetPlayerFacingAngle(playerid,273.3910);
		    return 1;
		}
		case FORT_BANK_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,3);
		    SetPlayerPos(playerid,2307.5640,-15.9402,26.7496);
		    SetPlayerFacingAngle(playerid,273.3910);
		    return 1;
		}
		case BARA_BANK_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,4);
		    SetPlayerPos(playerid,2307.5640,-15.9402,26.7496);
		    SetPlayerFacingAngle(playerid,273.3910);
		    return 1;
		}
		case CITYHALL_CP:
		{
		    SetPlayerInterior(playerid,3);
		    SetPlayerPos(playerid,386.7439,173.8342,1008.3828);
		    SetPlayerFacingAngle(playerid,89.9700);
		    return 1;
		}
		case PIZZA_CP:
		{
		    SetPlayerInterior(playerid,5);
		    SetPlayerPos(playerid,372.1255,-131.4364,1001.4922);
		    SetPlayerFacingAngle(playerid,357.6505);
		    return 1;
		}
		case LVPD_ELEV_CP:
		{
			if(IsACop(playerid))
			{
		        ShowPlayerDialog(playerid, LVPD_ELEVATOR_MENU, DIALOG_STYLE_LIST, "{FFFFFF}LVPD Elevator", "{FFFFFF}Basement(Level 1)\nBasement(Level 2)\nGround Level Carpark\nRoof", "Select", "Cancel");
		    	return 1;
			}
		}
		case FBI_ELEV_OUT:
		{
		    SetPlayerInterior(playerid, 6);
		    SetPlayerPos(playerid, 244.8691, 66.5188, 1003.6406);
		    SetPlayerFacingAngle(playerid, 272.0067);
		}
		case FBI_ELEV_IN:
		{
		    if(GetTeam{playerid} == CLASS_FBI)
		    {
		    	SetPlayerInterior(playerid, 0);
       			new rand = random(sizeof(FBISpawns));
				SetPlayerPos(playerid, FBISpawns[rand][0] + 2.0, FBISpawns[rand][1], FBISpawns[rand][2]);
				SetPlayerFacingAngle(playerid, FBISpawns[rand][3]);
			}
		}
		case LVPD_EXT_1_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2336.8965,2456.7803,14.9688);
		    SetPlayerFacingAngle(playerid,176.4752);
		    return 1;
		}
		case LVPD_EXT_2_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2287.0466,2429.0894,10.8203);
		    SetPlayerFacingAngle(playerid,179.9845);
		    return 1;
		}
		case BANK_EXIT1_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2270.8174,2290.9336,10.8203);
		    SetPlayerFacingAngle(playerid,182.8951);
		    return 1;
		}
		case BANK_EXIT2_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-1457.9921,2593.6372,55.8359);
		    SetPlayerFacingAngle(playerid,358.9392);
		    return 1;
		}
		case BANK_EXIT3_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-181.6659,1133.0254,19.7422);
		    SetPlayerFacingAngle(playerid,86.8159);
		    return 1;
		}
		case BANK_EXIT4_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-827.9003,1501.3838,19.4031);
		    SetPlayerFacingAngle(playerid,181.1828);
		    return 1;
		}
		case ISLE_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2127.5435,2377.2214,10.8203);
		    SetPlayerFacingAngle(playerid,177.8392);
		    return 1;
		}
		case VEGAS_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2021.1683,1916.6536,12.3404);
		    SetPlayerFacingAngle(playerid,271.1466);
		    return 1;
		}
		case REDSANDS_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,1658.4574,2252.8269,11.0625);
		    SetPlayerFacingAngle(playerid,0.7234);
		    return 1;
		}
		case CALG_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2194.1477,1677.0803,12.3672);
		    SetPlayerFacingAngle(playerid,88.6540);
		    return 1;
		}
		case DRAG_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2024.1364,1007.6714,10.8203);
		    SetPlayerFacingAngle(playerid,270.1612);
		    return 1;
		}
		case AMMU_EXIT1_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2154.5859,943.0511,10.8203);
		    SetPlayerFacingAngle(playerid,90.4437);
		    return 1;
		}
		case AMMU_EXIT2_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,779.3199,1871.3744,4.9064);
		    SetPlayerFacingAngle(playerid,264.4852);
		    return 1;
		}
		case AMMU_EXIT3_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-312.7813,830.2787,14.2422);
		    SetPlayerFacingAngle(playerid,271.5080);
		    return 1;
		}
		case AMMU_EXIT4_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-1509.0355,2608.0867,55.8359);
		    SetPlayerFacingAngle(playerid,178.6528);
		    return 1;
		}
		case AMMU_EXIT5_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2557.4380,2062.4636,10.8203);
		    SetPlayerFacingAngle(playerid,178.6568);
		    return 1;
		}
		case AMMU_EXIT6_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2317.4482,2391.7974,10.8203);
		    SetPlayerFacingAngle(playerid,92.2769);
		    return 1;
		}
		case CITYHALL_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2415.1201,1124.0508,10.8203);
		    SetPlayerFacingAngle(playerid,270.8013);
		    return 1;
		}
		case FBI_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2443.8662,2376.1130,11.9559);
		    SetPlayerFacingAngle(playerid,91.4198);
		    return 1;
		}
		case CIA_CP2:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,939.8738,1733.1982,8.8516);
		    SetPlayerFacingAngle(playerid,268.1567);
		    return 1;
		}
		case BURG1_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2364.2576,2071.3291,10.8203);
		    SetPlayerFacingAngle(playerid,91.9347);
		    return 1;
		}
		case BURG2_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2470.8298,2034.6128,11.0625);
		    SetPlayerFacingAngle(playerid,89.7456);
		    return 1;
		}
		case BURG3_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,1160.1515,2072.0476,11.0625);
		    SetPlayerFacingAngle(playerid,267.1969);
		    return 1;
		}
		case CLUCK1_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2393.0564,2043.7430,10.8203);
		    SetPlayerFacingAngle(playerid,359.7344);
		    return 1;
		}
		case CLUCK2_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,171.6739,1174.7643,14.7578);
		    SetPlayerFacingAngle(playerid,147.6426);
		    return 1;
		}
		case CLUCK3_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,-1211.7316,1832.2042,41.9297);
		    SetPlayerFacingAngle(playerid,315.3052);
		    return 1;
		}
		case BURG4_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2171.8706,2795.4661,10.8203);
		    SetPlayerFacingAngle(playerid,266.6424);
		    return 1;
		}
		case BURG5_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,1875.1389,2071.7651,11.0625);
		    SetPlayerFacingAngle(playerid,269.0581);
		    return 1;
		}
		case EXT1_24_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2452.7302,2062.1987,10.8203);
		    SetPlayerFacingAngle(playerid,179.9630);
		    return 1;
		}
		case EXT2_24_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2546.2432,1970.2073,10.8203);
		    SetPlayerFacingAngle(playerid,179.1233);
		    return 1;
		}
		case EXT3_24_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2192.7253,1990.9977,12.2969);
		    SetPlayerFacingAngle(playerid,88.6409);
		    return 1;
		}
		case EXT4_24_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPos(playerid,2247.3997,2399.0303,10.8203);
		    SetPlayerFacingAngle(playerid,2.9991);
		    return 1;
		}
		case PIZZA_EXT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2352.0244,2530.1313,10.8203);
		    SetPlayerFacingAngle(playerid,178.9439);
		    return 1;
		}
		case NIGHT_CLUB_CP:
		{
		    SetPlayerInterior(playerid,17);
		    SetPlayerPos(playerid,493.0540,-21.6314,1000.6797);
		    SetPlayerFacingAngle(playerid,358.0106);
		    return 1;
		}
		case NIGHT_CLUB_EXIT_CP:
		{
		    SetPlayerInterior(playerid,0);
		    SetPlayerPos(playerid,2313.5601,2324.2268,10.8203);
		    SetPlayerFacingAngle(playerid,270.3945);
		    return 1;
		}
		case ISLE_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcasino to start robbing The Emerald Isle Casino.");
		    	return 1;
		    }
		}
		case VEGAS_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcasino to start robbing the Las Venturas Casino.");
		    	return 1;
		    }
		}
		case REDSANDS_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcasino to start robbing the Redsands Casino.");
		    	return 1;
		    }
		}
		case CALG_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcasino to start robbing the Caligulas Casino.");
		    	return 1;
		    }
		}
		case DRAG_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcasino to start robbing the 4 Dragons Casino.");
		    	return 1;
		    }
		}
		case NIGHT_CLUB_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robbery to start robbing the Las Venturas Night Club.");
		        ShowPlayerDialog(playerid, GLOBAL_CLUB_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Night Club Bar", "{FFFFFF}Beverages Menu\nBartender Menu", "Select", "Cancel");
		    	return 1;
		    }
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_CLUB_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Night Club Bar", "{FFFFFF}Beverages Menu\nBartender Menu", "Select", "Cancel");
		    }
			return 1;
		}
		case AMMU1_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case AMMU2_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case AMMU3_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF} Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case AMMU4_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case AMMU5_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case AMMU6_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robammu to start robbing the Ammunation.");
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		    }
		    return 1;
		}
		case BURG1_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robshot to start robbing the Burger Shot.");
		        ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case BURG2_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robshot to start robbing the Burger Shot.");
		        ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "Burger Shot", "Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case BURG3_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robshot to start robbing the Burger Shot.");
		        ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case BURG4_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robshot to start robbing the Burger Shot.");
		        ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case BURG5_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robshot to start robbing the Burger Shot.");
		        ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case CLUCK1_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcluck to start robbing the Cluck'n Bell.");
		        ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case CLUCK2_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcluck to start robbing the Cluck'n Bell.");
		        ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case CLUCK3_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robcluck to start robbing the Cluck'n Bell.");
		        ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case ROB_24_1:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robstore to start robbing the 24/7 Store.");
		        ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
			}
			return 1;
		}
		case ROB_24_2:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robstore to start robbing the 24/7 Store.");
		        ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
			}
			return 1;
		}
		case ROB_24_3:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robstore to start robbing the 24/7 Store.");
		        ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
			}
			return 1;
		}
		case ROB_24_4:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robstore to start robbing the 24/7 Store.");
		        ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item Menu", "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket", "Select", "Cancel");
			}
			return 1;
		}
		case NV_BANK_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robbank to start robbing the Bank.");
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    }
		    return 1;
		}
		case ELQ_BANK_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robbank to start robbing the Bank.");
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    }
		    return 1;
		}
		case FORT_BANK_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robbank to start robbing the Bank.");
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    }
		    return 1;
		}
		case BARA_BANK_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robbank to start robbing the Bank.");
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    	return 1;
			}
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
		        ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		    }
		    return 1;
		}
		case PIZZA_ROB:
		{
			if(GetTeam{playerid} == CLASS_CIV)
			{
		        SendClientMessage(playerid,YELLOW,"Type /robpizza to start robbing the Well Stacked Pizzas.");
		        ShowPlayerDialog(playerid, PIZZA_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Well Stacked Pizzas", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
		    	return 1;
		    }
		    else if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
		    {
                ShowPlayerDialog(playerid, PIZZA_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Well Stacked Pizzas", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
			}
			return 1;
		}
		case HOS_CP:
		{
			ShowPlayerDialog(playerid, HOS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Hospital", "{FFFFFF}Change Class(Skin)\nBuy Medikits", "Select", "Cancel");
		    return 1;
		}
		case CELLCP_1:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP1{playerid} = true;
		}
		case CELLCP_2:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP2{playerid} = true;
		}
		case CELLCP_3:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP3{playerid} = true;
		}
		case CELLCP_4:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP4{playerid} = true;
		}
		case CELLCP_5:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP5{playerid} = true;
		}
		case CELLCP_6:
		{
			IsInCellCP{playerid} = true;
    		IsInCellCP6{playerid} = true;
		}
	}
	}
	return 1;
}

public OnCheckpointEXIT(playerid, checkpointid)
{
    switch(checkpointid)
	{
		case CELLCP_1:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP1{playerid} = false;
		}
		case CELLCP_2:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP2{playerid} = false;
		}
		case CELLCP_3:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP3{playerid} = false;
		}
		case CELLCP_4:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP4{playerid} = false;
		}
		case CELLCP_5:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP5{playerid} = false;
		}
		case CELLCP_6:
		{
			IsInCellCP{playerid} = false;
    		IsInCellCP6{playerid} = false;
		}
		case NV_UNI_CP3:
		{
			if(IsRobbingUNI{playerid} == true)
			{
                KillTimer(unitimer{playerid});
                IsRobbingUNI{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingUNI{playerid} = false;
			}
		}
		case FBI_ROB:
		{
			if(IsRobbingFBI{playerid} == true)
			{
                KillTimer(fbitimer{playerid});
                IsRobbingFBI{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingFBI{playerid} = false;
			}
		}

		case CIA_CP3:
		{
			if(IsRobbingCIA{playerid} == true)
			{
                KillTimer(ciatimer{playerid});
                IsRobbingCIA{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingCIA{playerid} = false;
			}
		}
		case NIGHT_CLUB_ROB:
		{
			if(IsRobbingClub{playerid} == true)
			{
                KillTimer(clubtimer{playerid});
                IsRobbingClub{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingClub{playerid} = false;
			}
		}
		case GYM_STYLE_CP:
		{
			if(IsRobbingGym{playerid} == true)
			{
                KillTimer(gymtimer{playerid});
                IsRobbingGym{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingGym{playerid} = false;
			}
		}
        case LVPD_ROB:
		{
			if(IsRobbingLVPD{playerid} == true)
			{
                KillTimer(lvpdtimer{playerid});
                IsRobbingLVPD{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingLVPD{playerid} = false;
			}
		}
		case ISLE_ROB:
		{
			if(IsRobbingIsle{playerid} == true)
			{
                KillTimer(isletimer{playerid});
                IsRobbingIsle{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingIsle{playerid} = false;
			}
		}
		case VEGAS_ROB:
		{
			if(IsRobbingVegas{playerid} == true)
			{
                KillTimer(vegastimer{playerid});
                IsRobbingVegas{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingVegas{playerid} = false;
			}
		}
		case REDSANDS_ROB:
		{
			if(IsRobbingRedsands{playerid} == true)
			{
                KillTimer(redsandstimer{playerid});
                IsRobbingRedsands{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingRedsands{playerid} = false;
			}
		}
		case CALG_ROB:
		{
			if(IsRobbingCalg{playerid} == true)
			{
                KillTimer(calgtimer{playerid});
                IsRobbingCalg{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingCalg{playerid} = false;
			}
		}
		case DRAG_ROB:
		{
			if(IsRobbingDrag{playerid} == true)
			{
                KillTimer(dragtimer{playerid});
                IsRobbingDrag{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingDrag{playerid} = false;
			}
		}
		case AMMU1_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case AMMU2_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case AMMU3_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case AMMU4_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case AMMU5_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case AMMU6_ROB:
		{
			if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true || IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
			{
                KillTimer(ammutimer{playerid});
                IsRobbingAmmu1{playerid} = false;
                IsRobbingAmmu2{playerid} = false;
                IsRobbingAmmu3{playerid} = false;
                IsRobbingAmmu4{playerid} = false;
                IsRobbingAmmu5{playerid} = false;
                IsRobbingAmmu6{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingAmmu6{playerid} = false;
			}
		}
		case BAR_ROB_CP:
		{
			if(IsRobbingBar{playerid} == true)
			{
                KillTimer(bartimer{playerid});
                IsRobbingBar{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingBar{playerid} = false;
			}
		}
		case BURG1_ROB:
		{
			if(IsRobbingShot1{playerid} == true || IsRobbingShot2{playerid} == true || IsRobbingShot3{playerid} == true || IsRobbingShot4{playerid} == true || IsRobbingShot5{playerid} == true)
			{
                KillTimer(shottimer{playerid});
                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
			}
		}
		case BURG2_ROB:
		{
			if(IsRobbingShot1{playerid} == true || IsRobbingShot2{playerid} == true || IsRobbingShot3{playerid} == true || IsRobbingShot4{playerid} == true || IsRobbingShot5{playerid} == true)
			{
                KillTimer(shottimer{playerid});
                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
			}
		}
		case BURG3_ROB:
		{
			if(IsRobbingShot1{playerid} == true || IsRobbingShot2{playerid} == true || IsRobbingShot3{playerid} == true || IsRobbingShot4{playerid} == true || IsRobbingShot5{playerid} == true)
			{
                KillTimer(shottimer{playerid});
                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
			}
		}
		case BURG4_ROB:
		{
			if(IsRobbingShot1{playerid} == true || IsRobbingShot2{playerid} == true || IsRobbingShot3{playerid} == true || IsRobbingShot4{playerid} == true || IsRobbingShot5{playerid} == true)
			{
                KillTimer(shottimer{playerid});
                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
			}
		}
		case BURG5_ROB:
		{
			if(IsRobbingShot1{playerid} == true || IsRobbingShot2{playerid} == true || IsRobbingShot3{playerid} == true || IsRobbingShot4{playerid} == true || IsRobbingShot5{playerid} == true)
			{
                KillTimer(shottimer{playerid});
                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingShot1{playerid} = false;
                IsRobbingShot2{playerid} = false;
                IsRobbingShot3{playerid} = false;
                IsRobbingShot4{playerid} = false;
                IsRobbingShot5{playerid} = false;
			}
		}
		case CLUCK1_ROB:
		{
			if(IsRobbingCluck1{playerid} == true  || IsRobbingCluck2{playerid} == true || IsRobbingCluck3{playerid} == true)
			{
                KillTimer(clucktimer{playerid});
                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
			}
		}
		case CLUCK2_ROB:
		{
			if(IsRobbingCluck1{playerid} == true  || IsRobbingCluck2{playerid} == true || IsRobbingCluck3{playerid} == true)
			{
                KillTimer(clucktimer{playerid});
                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
			}
		}
		case CLUCK3_ROB:
		{
			if(IsRobbingCluck1{playerid} == true  || IsRobbingCluck2{playerid} == true || IsRobbingCluck3{playerid} == true)
			{
                KillTimer(clucktimer{playerid});
                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingCluck1{playerid} = false;
                IsRobbingCluck2{playerid} = false;
                IsRobbingCluck3{playerid} = false;
			}
		}
		case ROB_24_1:
		{
			if(IsRobbingStore1{playerid} == true || IsRobbingStore2{playerid} == true || IsRobbingStore3{playerid} == true || IsRobbingStore4{playerid} == true)
			{
                KillTimer(storetimer{playerid});
                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
			}
		}
		case ROB_24_2:
		{
			if(IsRobbingStore1{playerid} == true || IsRobbingStore2{playerid} == true || IsRobbingStore3{playerid} == true || IsRobbingStore4{playerid} == true)
			{
                KillTimer(storetimer{playerid});
                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
			}
		}
		case ROB_24_3:
		{
			if(IsRobbingStore1{playerid} == true || IsRobbingStore2{playerid} == true || IsRobbingStore3{playerid} == true || IsRobbingStore4{playerid} == true)
			{
                KillTimer(storetimer{playerid});
                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
			}
		}
		case ROB_24_4:
		{
			if(IsRobbingStore1{playerid} == true || IsRobbingStore2{playerid} == true || IsRobbingStore3{playerid} == true || IsRobbingStore4{playerid} == true)
			{
                KillTimer(storetimer{playerid});
                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {

                IsRobbingStore1{playerid} = false;
                IsRobbingStore2{playerid} = false;
                IsRobbingStore3{playerid} = false;
                IsRobbingStore4{playerid} = false;
			}
		}
		case NV_BANK_ROB:
		{
			if(IsRobbingBank1{playerid} == true || IsRobbingBank2{playerid} == true || IsRobbingBank3{playerid} == true || IsRobbingBank4{playerid} == true)
			{
                KillTimer(banktimer{playerid});
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
			}
		}
		case ELQ_BANK_ROB:
		{
			if(IsRobbingBank1{playerid} == true || IsRobbingBank2{playerid} == true || IsRobbingBank3{playerid} == true || IsRobbingBank4{playerid} == true)
			{
                KillTimer(banktimer{playerid});
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
			}
		}
		case FORT_BANK_ROB:
		{
			if(IsRobbingBank1{playerid} == true || IsRobbingBank2{playerid} == true || IsRobbingBank3{playerid} == true || IsRobbingBank4{playerid} == true)
			{
                KillTimer(banktimer{playerid});
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
			}
		}
		case BARA_BANK_ROB:
		{
			if(IsRobbingBank1{playerid} == true || IsRobbingBank2{playerid} == true || IsRobbingBank3{playerid} == true || IsRobbingBank4{playerid} == true)
			{
                KillTimer(banktimer{playerid});
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingBank1{playerid} = false;
                IsRobbingBank2{playerid} = false;
                IsRobbingBank3{playerid} = false;
                IsRobbingBank4{playerid} = false;
			}
		}
		case PIZZA_ROB:
		{
			if(IsRobbingPizza{playerid} == true)
			{
                KillTimer(pizzatimer{playerid});
                IsRobbingPizza{playerid} = false;
                GameTextForPlayer(playerid,"~r~Robbery Failed", 3000, 5);
                SendClientMessage(playerid,RED,"You have left the checkpoint and failed the robbery.");
		    }
		    else
		    {
                IsRobbingPizza{playerid} = false;
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
   		for(new i = 0; i < MAX_BUSINESSES; i++)
   		{
   	    	if(checkpointid == bizentercp[i])
   	    	{
   	        	new file[40], string[150];
				BizID[playerid] = i;
				format(file, sizeof(file), BIZ_FILE, i);

 				if(strcmp(BizInfo[i][bOwner], DEFAULT_BIZ_OWNER_NAME, false) == 0)
				{
			    	format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this 24/7 business for $%s?", i, number_format(BizInfo[i][bPrice]));
					ShowPlayerDialog(playerid, BIZ_BUY_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Business For-Sale", string, "Buy", "Dont Buy");
				}
				else
				{
			    	format(string, sizeof(string), "%s - Business ID: %d - Business Owner: %s - Business Value: $%s", BizInfo[i][bName], i, BizInfo[i][bOwner], number_format(BizInfo[i][bPrice]));
			    	SendClientMessage(playerid, WHITE, string);
			    	if(GetTeam{playerid} == CLASS_CIV && strcmp(BizInfo[i][bOwner], GetName(playerid), false) != 0)
			    	{
			    		SendClientMessage(playerid, LIGHTGREEN, "Use /robbiz to rob this business.");
			    	}
					if(!strcmp(BizInfo[i][bOwner], GetName(playerid)))
		        	{
		        	   	SendClientMessage(playerid, YELLOW, "Use /bizmenu(/bm) to access the business menu.");
		        	}
			    	SetPlayerPos(playerid, BizInfo[i][bIntSpwnX], BizInfo[i][bIntSpwnY], BizInfo[i][bIntSpwnZ]);
			    	SetPlayerFacingAngle(playerid, BizInfo[i][bIntSpwnA]);
			    	SetPlayerInterior(playerid, BizInfo[i][bInterior]);
			    	SetPlayerVirtualWorld(playerid, BizInfo[i][bVWorld]);
				}
			}
			if(checkpointid == bizexitcp[i])
			{
	    		SetPlayerPos(playerid, BizInfo[i][bExtSpwnX], BizInfo[i][bExtSpwnY], BizInfo[i][bExtSpwnZ]);
	    		SetPlayerFacingAngle(playerid, BizInfo[i][bExtSpwnA]);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
				BizID[playerid] = -1;
	    	}
			if(checkpointid == bizrobberycp[i])
			{
		    	new string[50];
				BizRobCP[playerid] = i;
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[i][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
		new file[40], string[256];
	    for(new h = 0; h < MAX_HOUSES; h++)
		{
		    format(file, sizeof(file), HOUSE_FILE, h);
		    if(checkpointid == HouseCPOut[h])
		    {
		        SetPVarInt(playerid, "LastHouseCP", h);
				SetPVarInt(playerid, "IsInHouse", 1);
				
		        if(!strcmp(GetHouseOwner(h), pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner1], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner2], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner3], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner4], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner5], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner6], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner7], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner8], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner9], pNick(playerid)) ||
				!strcmp(HouseInfo[h][hKeyOwner10], pNick(playerid)))
				{
		        	SetPlayerHouseInterior(playerid, h);
		        }
				if(strcmp(GetHouseOwner(h), "Nobody") &&
				strcmp(GetHouseOwner(h), pNick(playerid)) &&
				strcmp(HouseInfo[h][hKeyOwner1], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner2], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner3], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner4], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner5], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner6], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner7], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner8], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner9], pNick(playerid)) ||
				strcmp(HouseInfo[h][hKeyOwner10], pNick(playerid)))
		  		{
		  		    format(string,sizeof(string), "%s - House ID: %d - House Owner: %s - House Value: $%s", HouseInfo[h][hName], h, GetHouseOwner(h), number_format(GetHouseValue(h)));
		       		SendClientMessage(playerid, WHITE, string);
		       		if(!strcmp(GetHouseOwner(h), pNick(playerid)))
		        	{
		        	   	SendClientMessage(playerid, YELLOW, "Use /housemenu(/hm) to access the house menu.");
		        	}
		  		}
		  		if(!strcmp(GetHouseOwner(h), "Nobody"))
				{
			    	if(HouseInfo[h][hHouseInterior] == 6)
			    	{
						format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this one story house for $%s?\n\nUse /viewinterior to view the house interior.", h, number_format(GetHouseValue(h)));
						ShowPlayerDialog(playerid, HOUSE_MENU+4, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Buy", "Dont Buy");
					}
					else if(HouseInfo[h][hHouseInterior] == 7)
			    	{
						format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this apartment for $%s?\n\nUse /viewinterior to view the house interior.", h, number_format(GetHouseValue(h)));
						ShowPlayerDialog(playerid, HOUSE_MENU+4, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Buy", "Dont Buy");
					}
					else if(HouseInfo[h][hHouseInterior] == 9)
			    	{
						format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this two story house for $%s?\n\nUse /viewinterior to view the house interior.", h, number_format(GetHouseValue(h)));
						ShowPlayerDialog(playerid, HOUSE_MENU+4, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Buy", "Dont Buy");
					}
					else if(HouseInfo[h][hHouseInterior] == 12)
			    	{
						format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this small mansion for $%s?\n\nUse /viewinterior to view the house interior.", h, number_format(GetHouseValue(h)));
						ShowPlayerDialog(playerid, HOUSE_MENU+4, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Buy", "Dont Buy");
					}
					else if(HouseInfo[h][hHouseInterior] == 5)
			    	{
						format(string, sizeof(string), "{FFFFFF}ID: %d\nDo you want to buy this large mansion for $%s?\n\nUse /viewinterior to view the house interior.", h, number_format(GetHouseValue(h)));
						ShowPlayerDialog(playerid, HOUSE_MENU+4, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Buy", "Dont Buy");
					}
				}
			}
			if(checkpointid == HouseCPInt[h])
			{
		 		SetPVarInt(playerid, "IsInHouse", 1);
				SetPVarInt(playerid, "LastHouseCP", -1);
				SetPlayerPosEx(playerid, HouseInfo[h][hSPOutX], HouseInfo[h][hSPOutY], HouseInfo[h][hSPOutZ], HouseInfo[h][hSpawnInterior], HouseInfo[h][hWorld]);
				SetPlayerFacingAngle(playerid, HouseInfo[h][hSPOutA]);
				SetPlayerInterior(playerid, HouseInfo[h][hSpawnInterior]);
	   			SetPlayerVirtualWorld(playerid, HouseInfo[h][hWorld]);
	    	}
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicCP(playerid, checkpointid)
{
	Loop(h, MAX_HOUSES)
	{
		if(checkpointid == HouseCPOut[h])
		{
			SetPVarInt(playerid, "IsInHouse", 0);
			SetPVarInt(playerid, "LastHouseCP", -1);
			break;
		}
	}
	for(new i = 0; i < MAX_BUSINESSES; i++)
	{
		if(checkpointid == bizrobberycp[i])
		{
		    if(IsPlayerRobbingBiz{playerid} == true)
		    {
		    	KillTimer(biztimer{playerid});
				BizRobCP[playerid] = -1;
				IsPlayerRobbingBiz{playerid} = false;
				GameTextForPlayer(playerid, "~r~Robbery Failed", 3000, 5);
				SendClientMessage(playerid, RED, "You have failed to rob the business, you left the checkpoint.");
				break;
			}
			else
			{
				BizRobCP[playerid] = -1;
				break;
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == APARTMENTS_ELEVATOR)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0://Ground
			{
			    SetPlayerPos(playerid, 2362.4094, 2377.5483, 10.8203);
			    SetPlayerFacingAngle(playerid, 89.0020);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			case 1://Level 1
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 1);
			}
			case 2://Level 2
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 2);
			}
			case 3://Level 3
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 3);
			}
			case 4://Level 4
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 4);
			}
			case 5://Level 5
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 5);
			}
			case 6://Level 6
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 6);
			}
			case 7://Level 7
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 7);
			}
			case 8://Level 8
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 8);
			}
			case 9://Level 9
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 9);
			}
			case 10://Level 10
			{
			    SetPlayerPos(playerid, 1727.0803, -1670.0951, 27.1953);
			    SetPlayerFacingAngle(playerid, 52.1279);
			    SetPlayerInterior(playerid, 18);
			    SetPlayerVirtualWorld(playerid, 10);
			}
			case 11://Roof
			{
			    SetPlayerPos(playerid, 2391.6804, 2375.4609, 150.9375);
			    SetPlayerFacingAngle(playerid, 3.6775);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
				GivePlayerWeapon(playerid, 46, 1);
			}
		}
		return 1;
	}
	if(dialogid == NVM_MENU)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0://Sports Cars
	        {
	            ShowPlayerDialog(playerid, NVM_CARS, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Motors - Sports Cars", "{FFFFFF}Vehicle: Infernus - Price: $2M\nVehicle: Bullet - Price: $2M\nVehicle: Comet - Price: $2M\nVehicle: Banshee - Price: $1M\nVehicle: Super-GT - Price: $1M\nVehicle: Sultan - Price: $800K\nVehicle: Elegy - Price: $800K", "Buy", "Cancel");
	            return 1;
	        }
	        case 1://Motor Bikes
	        {
	            ShowPlayerDialog(playerid, NVM_BIKES, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Motors - Motor Bikes", "{FFFFFF}Vehicle: NRG-500 - Price: $2M\nVehicle: FCR-900 - Price: $1M\nVehicle: PCJ-600 - Price: $800K\nVehicle: Sanchez - Price: $500K", "Buy", "Cancel");
	            return 1;
	        }
	        case 2://Special Vehicles
	        {
	            ShowPlayerDialog(playerid, NVM_SPEC, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Motors - Special Vehicles", "{FFFFFF}Vehicle: Maverick - Price: $5M\nVehicle: Vortex - Price: $3M\nVehicle: Monster Truck - Price: $2M\nVehicle: Bandito - Price: $1M\nVehicle: Quad Bike - Price: $500K", "Buy", "Cancel");
	        }
	    }
	    return 1;
	}
	if(dialogid == NVM_CARS)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0://Infernus
	        {
	            if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 411, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Infernus for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 411, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Infernus for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 411, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Infernus for $2M.");
	            }
	        }
	        case 1://Bullet
	        {
	            if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 541, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bullet for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 541, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bullet for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 541, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bullet for $2M.");
	            }
	        }
	        case 2://Comet
	        {
	            if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 480, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Comet for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 480, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Comet for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 480, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Comet for $2M.");
	            }
	        }
	        case 3://Banshee
	        {
	            if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 429, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Banshee for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 429, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Banshee for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 429, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Banshee for $1M.");
	            }
	        }
	        case 4://Super-GT
	        {
	            if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 506, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Super-GT for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 506, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Super-GT for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 506, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Super-GT for $1M.");
	            }
	        }
	        case 5://Sultan
	        {
	            if(GetPlayerCash(playerid) < 800000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 560, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sultan for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 560, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sultan for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 560, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sultan for $800K.");
	            }
	        }
	        case 6://Elegy
	        {
	            if(GetPlayerCash(playerid) < 800000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 562, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Elegy for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 562, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Elegy for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 562, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Elegy for $800K.");
	            }
	        }
		}
		return 1;
	}
	if(dialogid == NVM_BIKES)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0://NRG-500
	        {
	            if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 522, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a NRG-500 for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 522, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a NRG-500 for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 522, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a NRG-500 for $2M.");
	            }
	        }
	        case 1://FCR-900
	        {
	            if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 521, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a FCR-900 for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 521, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a FCR-900 for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 521, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a FCR-900 for $1M.");
	            }
	        }
	        case 2://PCJ-600
	        {
	            if(GetPlayerCash(playerid) < 800000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 461, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a PCJ-600 for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 461, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a PCJ-600 for $800K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 461, 800000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a PCJ-600 for $800K.");
	            }
	        }
	        case 3://Sanchez
	        {
	            if(GetPlayerCash(playerid) < 500000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 468, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sanchez for $500K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 468, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sanchez for $500K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 468, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Sanchez for $500K.");
	            }
	        }
		}
		return 1;
	}
	if(dialogid == NVM_SPEC)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0://Maverick
	        {
	            if(GetPlayerCash(playerid) < 5000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 487, 5000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Maverick for $5M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 487, 5000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Maverick for $5M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 487, 5000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Maverick for $5M.");
	            }
	        }
	        case 1://Vortex
	        {
	            if(GetPlayerCash(playerid) < 3000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 539, 3000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Vortex for $3M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 539, 3000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Vortex for $3M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 539, 3000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Vortex for $3M.");
	            }
	        }
	        case 2://Monster Truck
	        {
	            if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 557, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Monster Truck for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 557, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Monster Truck for $2M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 557, 2000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Monster Truck for $2M.");
	            }
	        }
	        case 3://Bandito
	        {
	            if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 568, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bandito for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 568, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bandito for $1M.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 568, 1000000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Bandito for $1M.");
	            }
	        }
	        case 4://Quad Bike
	        {
	            if(GetPlayerCash(playerid) < 500000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	            if(PlayerInfo[playerid][vLevel] >= 1)//VIP
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_VIP_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_VIP_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 471, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Quad Bike for $500K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] >= 1)//Degree
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_DEGREE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_DEGREE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 471, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Quad Bike for $500K.");
					return 1;
	            }
                if(PlayerInfo[playerid][vLevel] < 1 && DegreeInfo[playerid][dDealer] < 1)//Player
	            {
	            	if(GetPlayerVehicles{playerid} >= MAX_BUYABLE_VEHS)
	            	{
	            	    new string[150];
	            	    format(string, sizeof(string), "You already own a maximum of %d vehicles, delete/sell one before buying another.", MAX_BUYABLE_VEHS);
	            	    SendClientMessage(playerid, RED, string);
	            	    return 1;
	            	}

	            	CreateNewPlayerVehicle(playerid, 471, 500000);

					SendClientMessage(playerid, WHITE, "You have successfully purchased a Quad Bike for $500K.");
	            }
	        }
		}
		return 1;
	}
    if(dialogid == MY_VEHS_MENU)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][0], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 1:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][1], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 2:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][2], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 3:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][3], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][3] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 4:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][4], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][4] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 5:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][5], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][5] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	            return 1;
	        }
	        case 6:
	        {
	            new Float:x, Float:y, Float:z, string[150];
	            GetVehiclePos(Vehicle_Data_ID[playerid][6], x, y, z);
	            DisablePlayerCheckpoint(playerid);
	            PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
	    		SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				HasSetCheckpoint{playerid} = 1;
	            format(string, sizeof(string), "A checkpoint(red dot on minimap) has been set at your %s's location.", GlobalVehicleNames[Vehicle_Data_Model[playerid][6] - 400]);
	            SendClientMessage(playerid, YELLOW, string);
	            SendClientMessage(playerid, RED, "WARNING: Entering any other checkpoints, will cancel this checkpoint.");
	        }
		}
		return 1;
	}
    if(dialogid == SERVICE_STATION_MENU)
    {
		if(response)
		{
			switch(listitem)
			{
			    case 0:
			    {
			        if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	    			RepairVehicle(GetPlayerVehicleID(playerid));
	    			GivePlayerCash(playerid, -500);
	    			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	    			GameTextForPlayer(playerid,"~w~Vehicle ~g~Repaired~n~~r~Cost: $500", 5000, 5);
	    			SendClientMessage(playerid, YELLOW, "Vehicle repaired.");
	    			ShowPlayerDialog(playerid, SERVICE_STATION_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Service Station - Menu", "{FFFFFF}Service: Repair - Price: $500\nService: Refuel - Price: $500\nService: Vehicle Bomb - Price: $100K\nClick here for Tune Menu", "Buy", "Cancel");
	    			return 1;
			    }
			    case 1:
			    {
			        new vid = GetPlayerVehicleID(playerid);
			        if(GetVehicleFuel[vid] == 100) return SendClientMessage(playerid, RED, "Your vehicles fuel tank is full.");
					if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
					GetVehicleFuel[vid] = 100;
					GivePlayerCash(playerid, - 500);
					TogglePlayerControllable(playerid, true);
					GameTextForPlayer(playerid,"~w~Vehicle ~g~Refuelled.~n~~r~Cost: $500", 3000, 5);
					SendClientMessage(playerid, YELLOW, "Vehicle refuelled.");
					ShowPlayerDialog(playerid, SERVICE_STATION_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Service Station - Menu", "{FFFFFF}Service: Repair - Price: $500\nService: Refuel - Price: $500\nService: Vehicle Bomb - Price: $100K\nClick here for Tune Menu", "Buy", "Cancel");
	    			return 1;
			    }
			    case 2:
			    {
			        if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can buy vehicle bombs.");
			        if(BomberStage{playerid} != 0) return SendClientMessage(playerid, RED, "You already have a bomb strapped to a vehicle, use /blowbomb.");
					if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			        GivePlayerCash(playerid, - 100000);
	            	BomberStage{playerid} = 1;
	            	VehicleBombOwner[GetPlayerVehicleID(playerid)] = playerid;
	            	SendClientMessage(playerid, YELLOW, "You now have a bomb strapped to your vehicle, use /blowbomb to blow it.");
	    			return 1;
			    }
			    case 3:
			    {
			        switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
					{
        				case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
						533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
						426,547,405,409,550,566,406,540,421,529,431,438,437,420,525,552,416,433,427,490,528,
						407,544,470,598,596,599,601,428,499,609,524,578,486,573,455,588,403,514,423,
						414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
        				483,508,429,541,415,480,434,506,451,555,477,400,404,489,479,442,458,467,558:
						{
            				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
							IsPlayerUsingTuneMenu{playerid} = true;
						}
						default: return SendClientMessage(playerid, RED, "You cant tune this vehicle.");
					}
			    }
			}
		}
		return 1;
	}
	if(dialogid == AIRPORT_DIALOG)
	{
	    if(response)
	    switch(listitem)
		{
		    case 0:
		    {
	        	if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        	GivePlayerWeapon(playerid, 46, 1);
	        	SendClientMessage(playerid, WHITE, "Paracute purchased.");
            	GivePlayerCash(playerid, - 5000);
		    }
		    case 1:
	    	{
	        	if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        	SetPlayerInterior(playerid, 9);
            	SetPlayerPos(playerid, 315.745086, 984.969299, 1958.919067);
            	GivePlayerWeapon(playerid, 46, 1);
            	skytimer{playerid} = SetTimerEx("SkydiveInteriorChanger", 5000, true, "d", playerid);
            	GivePlayerCash(playerid, - 5000);
	    	}
	    }
	}
	if(dialogid == FAQS_DIALOG)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Our skill system is unique on ACnR, choose a Masters Degree at\nthe Las Venturas University to access skill features other people with your skill wont have!\n\n For example.\nWith a medical masters degree, a medic can heal up to 25 percent more health per heal.", "Ok", "");
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Simply purchase the required Masters Degree at the Las Venturas University.", "Ok", "");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Well it depends on your class/degrees, your can either rob\nplaces/players/businesses, arrest/ticket wanted players/suspects,\nsell your degree service/s or apply for a loan from the Las Venturas Bank.", "Ok", "");
	        }
	        case 3:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Purchase vehicles at Las Venturas Motors located near the Las Venturas Hospital.", "Ok", "");
	        }
	        case 4:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Simply find an available property you can afford, enter the checkpoint and click 'Buy'\nIf you cant find any available houses, buy one from a Real Estate Degree holder(player)", "Ok", "");
	        }
			case 5:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Visit our 'Donate' section of the forum and choose a VIP level and/or item, click donate and your almost done.\n\nForum: acnr.hostoi.com", "Ok", "");
	        }
			case 6:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}For guns we suggest you multiply the actual price/s in Ammunation/s and/or Businesse/s by (10).\nFor mats we suggest around $50 per material, meaning around $500K for 10K mats.", "Ok", "");
	        }
			case 7:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Visit our 'STAFF Applications' section of the forum and apply in FORMAT, also READ all stickied threads BEFORE applying.\n\nForum: acnr.hostoi.com", "Ok", "");
	        }
			case 8:
	        {
	            ShowPlayerDialog(playerid, FAQS_ANSWER, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR - FAQS - Answer", "{FFFFFF}Use /getmats at a Las Venturas Materials Factory at Blackfield or Bayside.(Yellow dot/s on minimap)", "Ok", "");
	        }
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dReal] == 1) return SendClientMessage(playerid, RED, "You already have a Real Estate Degree.");
			    if(GetPlayerCash(playerid) < 10000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dReal] = 1;
			    GivePlayerCash(playerid, - 10000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Real Estate.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW1)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dLaw] == 1) return SendClientMessage(playerid, RED, "You already have a Law Degree.");
			    if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dLaw] = 1;
			    GivePlayerCash(playerid, - 1000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Law.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW2)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dDefense] == 1) return SendClientMessage(playerid, RED, "You already have a Defense Degree.");
			    if(GetPlayerCash(playerid) < 3000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dDefense] = 1;
			    GivePlayerCash(playerid, - 3000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Defense.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW3)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dHealth] == 1) return SendClientMessage(playerid, RED, "You already have a Medical Degree.");
			    if(GetPlayerCash(playerid) < 1000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dHealth] = 1;
			    GivePlayerCash(playerid, - 1000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Health.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW4)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dMechanic] == 1) return SendClientMessage(playerid, RED, "You already have a Mechanical Degree.");
			    if(GetPlayerCash(playerid) < 2000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dMechanic] = 1;
			    GivePlayerCash(playerid, - 2000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Mechanics.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW5)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dDealer] == 1) return SendClientMessage(playerid, RED, "You already have a Dealership Degree.");
			    if(GetPlayerCash(playerid) < 12000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dDealer] = 1;
			    GivePlayerCash(playerid, - 12000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Dealership.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_REVIEW6)
	{
	    if(response)
	    {
	        if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	        {
			    new string[150];
			    if(DegreeInfo[playerid][dWeapons] == 1) return SendClientMessage(playerid, RED, "You already have a Weapons Degree.");
			    if(GetPlayerCash(playerid) < 3000000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			    DegreeInfo[playerid][dWeapons] = 1;
			    GivePlayerCash(playerid, - 3000000);
			    format(string, sizeof(string), "NVU: %s (%d) now has a masters degree in Weapons.", GetPlayerNameEx(playerid), playerid);
			    SendClientMessageToAll(LIGHTGREEN, string);
			    SendClientMessage(playerid, YELLOW, "Degree purchased.");
			}
		}
	}
	if(dialogid == DEGREE_LIST_DIALOG)
	{
		if(response)
	    switch(listitem)
        {
        	case 0://Real Estate Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Real Estate Degree", "{FFFFFF}Special command's: /sell(house/biz)to [playerid] [price]\nSpecial feature/s: Own an extra 2 houses and 2 businesses(5 all up)\nPrice: $10M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 1://Law Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW1, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Law Degree", "{FFFFFF}Special command's: N/A\nSpecial feature/s: Access to CIA and FBI classes and features.\nPrice: $1M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 2://Defense Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Defense Degree", "{FFFFFF}Special command's: N/A\nSpecial feature/s: Access to Army class features and vehicles.\nPrice: $3M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 3://Medical Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW3, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Medical Degree", "{FFFFFF}Special command's: /medic [playerid] [price]\nSpecial feature/s: Access to Medic class and features.\nPrice: $1M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 4://Mechanical Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW4, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Mechanical Degree", "{FFFFFF}Special command's: /(refill/fix) [playerid] [price]\nSpecial feature/s: N/A\nPrice: $2M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 5://Dealership Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW5, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Dealership Degree", "{FFFFFF}Special command's: /sellvehto [playerid] [price]\nSpecial feature/s: Own an extra 2 vehicles(5 all up)\nPrice: $12M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
			case 6://Weapon Degree
			{
			    ShowPlayerDialog(playerid, DEGREE_LIST_REVIEW6, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas University - Weapons Degree", "{FFFFFF}Special command's: /sell(gun/mats) [playerid] [gun/mats] [price] + /getmats\nSpecial feature/s: Ability to sell yourself weapons anytime, anywhere.\nPrice: $3M\nStudy time: Instant\nExpiry: Never", "Buy", "Dont Buy");
			}
		}
	}
	if(dialogid == BIZ_SHOP_DIALOG)
    {
		if(response)
	    switch(listitem)
        {
        	case 0:
			{
				new string[50];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP2_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Sprunk and Chips - Price: $10\nItem: Sprunk and Hotdog - Price: $20", "Select", "Cancel");
        	}
        	case 1:
			{
				new string[50];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP3_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Rope - Price: $5000\nItem: Scissors - Price: $20K\nItem: Vehicle Lock - Price: $50K\nItem: 5 Spray Cans - Price: $5K", "Select", "Cancel");
			}
			case 2:
			{
				new string[50];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP4_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Daily Lottery Ticket - Price: $500", "Select", "Cancel");
			}
			case 3:
			{
				new string[50];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			    ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
			}
		}
	}
    if(dialogid == BIZ_SHOP5_DIALOG)
    {
		if(response)
	    switch(listitem)
        {
        	case 0:
			{
			    new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP6_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: 9mm - Price: $200\nItem: Silenced 9mm - Price: $300\nItem: Desert Eagle - Price: $500", "Select", "Cancel");
        	}
        	case 1:
			{
			    new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP7_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Shotgun - Price: $600\nItem: Sawnoff Shotgun - Price: $800\nItem: Combat Shotgun - Price: $1000", "Select", "Cancel");
			}
        	case 2:
			{
			    new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
		    	ShowPlayerDialog(playerid, BIZ_SHOP8_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Tec 9 - Price: $600\nItem: Micro SMG - Price: $800 \nItem: MP5 - Price: $1000", "Select", "Cancel");
        	}
			case 3:
			{
			    new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP9_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: AK47 - Price: $800\nItem: M4 - Price: $1000", "Select", "Cancel");
        	}
        	case 4:
			{
			    new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
            	ShowPlayerDialog(playerid, BIZ_SHOP10_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Item: Body Armour - Price: $500", "Select", "Cancel");
        	}
        }
	}
    if(dialogid == BIZ_SHOP6_DIALOG)
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 200) return SendClientMessage(playerid, RED, "Insufficient funds.");
            GivePlayerCash(playerid, -200);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 200/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
            GivePlayerWeapon(playerid,22,100);
            SendClientMessage(playerid, YELLOW, "You have purchased a 9mm with 100 ammo for $200.");
            ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
   			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
		case 1:
		{
            if(GetPlayerCash(playerid) < 300) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -300);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 300/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,23,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Silenced 9mm with 100 ammo for $300.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
		case 2:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -500);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 500/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,24,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Desert Eagle with 100 ammo for $500.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    if(dialogid == BIZ_SHOP7_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 600) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -600);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 600/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,25,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Shotgun with 100 ammo for $600.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 800/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,26,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Sawn Off Shotgun with 100 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 2:
		{
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 1000/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,27,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Combat Shotgun with 100 ammo for $1000");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    if(dialogid == BIZ_SHOP8_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 600) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -600);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 600/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,32,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Tec 9 with 200 ammo for $600.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 800/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,28,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Micro SMG with 200 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 2:
		{
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 1000/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,29,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a MP5 with 200 ammo for $1000.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    if(dialogid == BIZ_SHOP9_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 800/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,30,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a AK47 with 200 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
        {
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 1000/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
	        GivePlayerWeapon(playerid,31,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a M4 with 200 ammo for $1000.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		}
		}
    }
    if(dialogid == BIZ_SHOP10_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -500);
	        BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 500/4;//25%
	        BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
			SaveBizStats(BizID[playerid]);
			SetPlayerArmour(playerid, 100);
	        SendClientMessage(playerid, YELLOW, "You have purchased Body Armour for $500.");
			new string[50];
			format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
			ShowPlayerDialog(playerid, BIZ_SHOP5_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
	if(dialogid == BIZ_SHOP2_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid, health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -10);
	        	BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 10/4;//25%
	        	BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
				if(health + 25 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 25);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased Sprunk and Chips for $10.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
        case 1:
		{
            if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -20);
	        	BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 20/4;//25%
	        	BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
				if(health + 50 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 50);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Sprunk and Hotdog for $20.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
        }
    }
	if(dialogid == BIZ_SHOP3_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            {
                GivePlayerCash(playerid, -5000);
	            BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 5000/4;//25%
	            BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
                PlayerInfo[playerid][pRope]+=4;
                SendClientMessage(playerid, YELLOW, "You have purchased 4 Pieces of Rope for $5000.");
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
		case 1:
		{
            if(GetPlayerCash(playerid) < 20000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][pScissors] == 1) return SendClientMessage(playerid, RED, "You Already Have A Pair of Scissors.");

			{
                GivePlayerCash(playerid, -20000);
	            BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 20000/4;//25%
	            BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
                PlayerInfo[playerid][pScissors]++;
                SendClientMessage(playerid, YELLOW, "You have purchased a Pair of Scissors for $20K.");
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
        case 2:
		{
            if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][vLock] == 1) return SendClientMessage(playerid, RED, "You already own a vLock.");
            {
	            GivePlayerCash(playerid, -50000);
	            BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 50000/4;//25%
	            BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
            	PlayerInfo[playerid][vLock]++;
	            SendClientMessage(playerid, YELLOW, "You have purchased a Personel Vehicle Lock for $50K.");
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
		case 3:
		{
            if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][pPaintCan] == 1) return SendClientMessage(playerid, RED, "You Already Have Spray Can.");
            {
	            GivePlayerCash(playerid, -5000);
	            BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 5000/4;//25%
	            BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
	            PlayerInfo[playerid][pPaintCan]+=5;
	            SendClientMessage(playerid, YELLOW, "You have purchased 5 Spray Cans for $5K.");
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
        }
    }
	if(dialogid == BIZ_SHOP4_DIALOG)
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        if(HasLotteryTicket{playerid} == 1) return SendClientMessage(playerid, RED, "You already have a lottery ticket.");
	        {
                new nstring[150];
	            SendClientMessage(playerid, YELLOW, "You have purchased a Lottery Ticket for $500.");
	            BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] + 500/4;//25%
	            BizInfo[BizID[playerid]][bPrice] = BizInfo[BizID[playerid]][bPrice] + random(9000) + 1000;
				SaveBizStats(BizID[playerid]);
		        HasLotteryTicket{playerid} = 1;
	        	GivePlayerCash(playerid, -500);
		        MakePlayersLottoNumbers(playerid);
		        format(nstring, sizeof(nstring), "Your lotto numbers are: %d, %d, %d, %d, %d, %d", PlayersLottoNumbers[0][playerid], PlayersLottoNumbers[1][playerid], PlayersLottoNumbers[2][playerid], PlayersLottoNumbers[3][playerid], PlayersLottoNumbers[4][playerid], PlayersLottoNumbers[5][playerid]);
	    	    SendClientMessage(playerid, YELLOW, nstring);
	        	new string[150];
				format(string, sizeof(string), "{FFFFFF}%s", BizInfo[BizID[playerid]][bName]);
				ShowPlayerDialog(playerid, BIZ_SHOP_DIALOG, DIALOG_STYLE_LIST, string, "{FFFFFF}Food/Drink Menu\nHardware Menu\nLottery Ticket\nGun Menu", "Select", "Cancel");
			}
		}
		}
    }
	if(dialogid == BIZ_BUY_DIALOG)
	{
		if(response)
		{
		    new hname[50], file[40], string[150], bcount = GetPlayerOwnedBusinesses(playerid);
  			format(file,sizeof(file), BIZ_FILE, BizID[playerid]);
  			if(PlayerInfo[playerid][vLevel] >= 1)
			{
			    if(bcount >= MAX_VIP_BIZ)
			    {
			    	format(string, sizeof(string), "You already own %d businesses, sell one of them to buy another.", MAX_VIP_BIZ);
					SendClientMessage(playerid, RED, string);
					return 1;
				}
				if(BizInfo[BizID[playerid]][bPrice] > GetPlayerCash(playerid)) return SendClientMessage(playerid, RED, "Insufficient funds.");
				GivePlayerCash(playerid, - BizInfo[BizID[playerid]][bPrice]);
				format(hname, sizeof(hname), "%s's business", GetName(playerid));
				new INI:bFilee = INI_Open(file);
        		INI_WriteString(bFilee, "bName", hname);
        		INI_WriteString(bFilee, "bOwner", GetName(playerid));
        		INI_Close(bFilee);
				BizInfo[BizID[playerid]][bName] = hname;
				BizInfo[BizID[playerid]][bOwner] = GetName(playerid);
				Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, hname);
				SendClientMessage(playerid, WHITE, "Business purchased.");
	    	}
	    	if(PlayerInfo[playerid][vLevel] == 0 && DegreeInfo[playerid][dReal] >= 1)
			{
			    if(bcount >= MAX_DEGREE_BIZ)
			    {
			    	format(string, sizeof(string), "You already own %d businesses, sell one of them to buy another.", MAX_DEGREE_BIZ);
					SendClientMessage(playerid, RED, string);
					return 1;
				}
				if(BizInfo[BizID[playerid]][bPrice] > GetPlayerCash(playerid)) return SendClientMessage(playerid, RED, "Insufficient funds.");
				GivePlayerCash(playerid, - BizInfo[BizID[playerid]][bPrice]);
				format(hname, sizeof(hname), "%s's business", GetName(playerid));
				new INI:bFilee = INI_Open(file);
        		INI_WriteString(bFilee, "bName", hname);
        		INI_WriteString(bFilee, "bOwner", GetName(playerid));
        		INI_Close(bFilee);
				BizInfo[BizID[playerid]][bName] = hname;
				BizInfo[BizID[playerid]][bOwner] = GetName(playerid);
				Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, hname);
				SendClientMessage(playerid, WHITE, "Business purchased.");
				return 1;
	    	}
			if(PlayerInfo[playerid][vLevel] == 0 && DegreeInfo[playerid][dReal] == 0)
			{
			    if(bcount >= MAX_PLAYER_BIZ)
			    {
			    	format(string, sizeof(string), "You already own %d businesses, sell one of them to buy another.", MAX_PLAYER_BIZ);
					SendClientMessage(playerid, RED, string);
					return 1;
				}
				if(BizInfo[BizID[playerid]][bPrice] > GetPlayerCash(playerid)) return SendClientMessage(playerid, RED, "Insufficient funds.");
				GivePlayerCash(playerid, - BizInfo[BizID[playerid]][bPrice]);
				format(hname, sizeof(hname), "%s's business", GetName(playerid));
				new INI:bFilee = INI_Open(file);
        		INI_WriteString(bFilee, "bName", hname);
        		INI_WriteString(bFilee, "bOwner", GetName(playerid));
        		INI_Close(bFilee);
				BizInfo[BizID[playerid]][bName] = hname;
				BizInfo[BizID[playerid]][bOwner] = GetName(playerid);
				Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, hname);
				SendClientMessage(playerid, WHITE, "Business purchased.");
				return 1;
	    	}
	    	return 1;
		}
	}
    if(dialogid == BIZ_SELL_DIALOG)
	{
		if(response)
		{
		    new file[40], bowner[24], bname[50];
			format(file, sizeof(file), BIZ_FILE, BizID[playerid]);
			format(bname, sizeof(bname), "For-Sale");
			format(bowner, sizeof(bowner), "%s", DEFAULT_BIZ_OWNER_NAME);
			Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, bizlabel);
			BizInfo[BizID[playerid]][bOwner] = bowner;
			BizInfo[BizID[playerid]][bName] = bname;
			GivePlayerCash(playerid, BizInfo[BizID[playerid]][bEarnings]);
			GivePlayerCash(playerid, BizInfo[BizID[playerid]][bPrice]/2);
			BizInfo[BizID[playerid]][bEarnings] = 0;
			SendClientMessage(playerid, WHITE, "Business sold. You received 50 percent of the value of the business and the remaining earnings.");
			SaveBizStats(BizID[playerid]);
		}
	}
	if(dialogid == BIZ_MENU_DIALOG)
	{
	    if(response)
	    switch(listitem)
	    {
	        case 0:
	        {
	            ShowPlayerDialog(playerid, BIZ_NAME_DIALOG, DIALOG_STYLE_INPUT, "{FFFFFF}Business Menu", "{FFFFFF}Please enter your new business name below:", "Submit", "Cancel");
	        }
	        case 1:
	        {
				format(fstr, sizeof(fstr), "{FFFFFF}Earnings Balance: $%s", number_format(BizInfo[BizID[playerid]][bEarnings]));
	            ShowPlayerDialog(playerid, BIZ_BALANCE_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Business Menu", fstr, "Ok", "");
			}
	        case 2:
	        {
	            format(fstr2, sizeof(fstr2), "{FFFFFF}Please enter the amount you wish to withdraw below:\nEarnings Balance: $%s", number_format(BizInfo[BizID[playerid]][bEarnings]));
	            ShowPlayerDialog(playerid, BIZ_WITHDRAW_DIALOG, DIALOG_STYLE_INPUT, "{FFFFFF}Business Menu", fstr2, "Submit", "Cancel");
	        }
	        case 3:
	        {
	            ShowPlayerDialog(playerid, BIZ_SELL_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Business Menu", "{FFFFFF}Are you sure you want to sell this business?", "Sell", "Dont Sell");
	        }
	    }
	}
	if(dialogid == BIZ_WITHDRAW_DIALOG)
	{
	    if(response)
	    if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
	    if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You must submit an amount to withdraw.");
	    if(strval(inputtext) > BizInfo[BizID[playerid]][bEarnings]) return SendClientMessage(playerid, RED, "Insufficient funds.");
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only withdraw $10M at a time");
		BizInfo[BizID[playerid]][bEarnings] = BizInfo[BizID[playerid]][bEarnings] - strval(inputtext);
	    GivePlayerCash(playerid, strval(inputtext));
	    format(fstr, sizeof(fstr), "You have withdrawn $%s from your business earnings.", number_format(strval(inputtext)));
	    SendClientMessage(playerid, WHITE, fstr);
	    new file[40];
		format(file, sizeof(file), BIZ_FILE, BizID[playerid]);
	    new INI:bFilee = INI_Open(file);
		INI_WriteInt(bFilee, "bEarnings", BizInfo[BizID[playerid]][bEarnings]);
		INI_Close(bFilee);
	}
	if(dialogid == BIZ_NAME_DIALOG)
	{
	    if(response)
		if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "~", true) != -1) return SendClientMessage(playerid, RED, "Your bussiness name cant contain some symbols.");
	    if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You must input a new name to change your current business name.");
	    if(strlen(inputtext) < 1 || strlen(inputtext) > 50) return SendClientMessage(playerid, RED, "Your business name can only contain 1-50 characters.");
		new text[50];
		format(text, sizeof(text), "%s", inputtext);
		BizInfo[BizID[playerid]][bName] = text;
		format(fstr, sizeof(fstr), "You have successfully changed your business name to %s", text);
	    SendClientMessage(playerid, WHITE, fstr);
	    Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, text);
	    new file[40];
		format(file, sizeof(file), BIZ_FILE, BizID[playerid]);
		new INI:bFilee = INI_Open(file);
		INI_WriteString(bFilee, "bName", BizInfo[BizID[playerid]][bName]);
		INI_Close(bFilee);
	}
    new file[40]/*, file2[24]*/, h = GetPVarInt(playerid, "LastHouseCP");
    format(file, sizeof(file), HOUSE_FILE, h);
	if(dialogid == HOUSE_MENU)//Credits to Garsino
	{
	    if(response)
	    switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid, HOUSE_MENU+14, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Name", "{FFFFFF}Enter the new house name below:\n\nPress 'Cancel' to cancel.", "Done", "Cancel");
		    case 1:
		    {
		        format(fstr, sizeof(fstr), "{FFFFFF}Slot 1: %s\nSlot 2: %s\nSlot 3: %s\nSlot 4: %s\nSlot 5: %s\nSlot 6: %s\nSlot 7: %s\nSlot 8: %s\nSlot 9: %s\nSlot 10: %s",
				HouseInfo[h][hKeyOwner1], HouseInfo[h][hKeyOwner2], HouseInfo[h][hKeyOwner3], HouseInfo[h][hKeyOwner4], HouseInfo[h][hKeyOwner5], HouseInfo[h][hKeyOwner6], HouseInfo[h][hKeyOwner7], HouseInfo[h][hKeyOwner8], HouseInfo[h][hKeyOwner9], HouseInfo[h][hKeyOwner10]);
		        ShowPlayerDialog(playerid, HOUSE_KEYS_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}House Menu - House Keys", fstr, "Select", "Cancel");
		    }
			case 2:
		    {
				new string[150];
				format(string, sizeof(string), "{FFFFFF}Are you sure you want to sell your house for $%s?", number_format(ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN)));
				ShowPlayerDialog(playerid, HOUSE_MENU+3, DIALOG_STYLE_MSGBOX, "{FFFFFF}House Menu - House Sale", string, "Sell", "Dont Sell");
		    }
		}
		return 1;
	}
	if(dialogid == HOUSE_KEYS_INPUT)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner1] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT2)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner2] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT3)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner3] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT4)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner4] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT5)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner5] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT6)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner6] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT7)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner7] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT8)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner8] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT9)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner9] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_INPUT10)
	{
	    if(!strlen(inputtext)) return ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
	    if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, YELLOW, "The player name can only contain 3-24 charactors.");
		new ufile[60];
		format(ufile, sizeof(ufile), USER_FILE, inputtext);
		if(!fexist(ufile)) return SendClientMessage(playerid, RED, "That username does not exist in the ACnR user database.");
		new update[24];
		format(update, sizeof(update), "%s", inputtext);
		HouseInfo[h][hKeyOwner10] = update;//
	    format(fstr, sizeof(fstr), "You have given %s a set of house keys, re-click the slot to remove the keys.", inputtext);
	    SendClientMessage(playerid, YELLOW, fstr);
	    if(IsPlayerConnected(GetID(inputtext)))
	    {
	    	format(fstr2, sizeof(fstr2), "%s (%d) has just given you a set of keys to their house.", GetPlayerNameEx(playerid), playerid);
	    	SendClientMessage(GetID(inputtext), LIGHTGREEN, fstr2);
	    }
	    SaveHouseStats(h);
	}
	if(dialogid == HOUSE_KEYS_DIALOG)
	{
	    if(response)
	    switch(listitem)
		{
			case 0:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner1], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner1] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (1)");
			    }
			}
			case 1:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner2], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT2, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner2] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (2)");
			    }
			}
			case 2:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner3], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT3, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner3] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (3)");
			    }
			}
			case 3:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner4], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT4, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner4] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (4)");
			    }
			}
			case 4:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner5], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT5, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner5] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (5)");
			    }
			}
			case 5:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner6], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT6, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner6] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (6)");
			    }
			}
			case 6:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner7], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT7, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner7] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (7)");
			    }
			}
			case 7:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner8], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT8, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner8] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (8)");
			    }
			}
			case 8:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner9], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT9, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner9] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (9)");
			    }
			}
			case 9:
			{
			    if(strcmp("Empty", HouseInfo[h][hKeyOwner10], false) == 0)
			    {
			        ShowPlayerDialog(playerid, HOUSE_KEYS_INPUT10, DIALOG_STYLE_INPUT, "{FFFFFF}House Menu - House Keys", "{FFFFFF}Please enter the name of the player you want to give keys to:", "Set", "Cancel");
			    }
			    else
			    {
			        new slot[24];
			        format(slot, sizeof(slot), "Empty");
			        HouseInfo[h][hKeyOwner10] = slot;
			        SaveHouseStats(h);
			        SendClientMessage(playerid, YELLOW, "You have successfully emptied house key slot (10)");
			    }
			}
		}
		return 1;
	}
	if(dialogid == HOUSE_MENU+3)//Credits to Garsino
	{
		if(response)
		{
			GivePlayerCash(playerid, ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN));
			new str[150];
   			format(str,sizeof(str),"You have successfully sold your house for $%s.", number_format(ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN)));
   			SendClientMessage(playerid,WHITE,str);
			new gname[40], gowner[24];
			format(gowner,sizeof(gowner), "Nobody");
			format(gname,sizeof(gname), "For-Sale");
			HouseInfo[h][hValue] = HouseInfo[h][hValue] - ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN);
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;
			/*Loop(h2, MAX_HOUSES)
			{
				if(IsHouseInRangeOfHouse(h, h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != h)
				{
			   		format(file2, sizeof(file2), HOUSE_FILE, h2);
					HouseInfo[h2][hValue] = HouseInfo[h2][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SOLD_AREA_VALUE);
                    UpdateHouseText(h2);
					SaveHouseStats(h2);
				}
			}*/
			UpdateHouseText(h);
			SaveHouseStats(h);
		}
		return 1;
	}
	if(dialogid == HOUSE_MENU+4)//Credits to Garsino
	{
		if(response)
		{
		    new hcount = GetOwnedHouses(playerid);
   			if(PlayerInfo[playerid][vLevel] >= 1)//VIP
    		{
				if(hcount >= MAX_VIP_HOUSES)
				{
			    	new str[150];
   					format(str,sizeof(str), "You already own %d house/s, you need to sell one of them before you can buy another.", MAX_VIP_HOUSES);
                	SendClientMessage(playerid,WHITE,str);
					return 1;
				}
				if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), pNick(playerid), false) && strcmp(GetHouseOwner(h), "Nobody", false)) return SendClientMessage(playerid, RED, "This House Is Already Owned By Someone Else.");
				if(GetHouseValue(h) > GetPlayerCash(playerid))
				{
			    	SendClientMessage(playerid, RED, "Insufficent funds.");
					return 1;
				}
				else
				{
				    new hname[40];
			    	format(hname, sizeof(hname), "%s's house", pNick(playerid));
					GivePlayerCash(playerid, -GetHouseValue(h));
					new gowner[24];
					format(gowner, sizeof(gowner), "%s", GetName(playerid));
					HouseInfo[h][hOwner] = gowner;
					HouseInfo[h][hName] = hname;
					new str[150];
   					format(str,sizeof(str), "You have have successfully purchased this house for $%s.", number_format(GetHouseValue(h)));
   					SendClientMessage(playerid,WHITE,str);
					/*Loop(h2, MAX_HOUSES)
					{
						if(IsHouseInRangeOfHouse(h, h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != h)
						{
					    	format(file2, sizeof(file2), HOUSE_FILE, h2);
							HouseInfo[h2][hValue] = HouseInfo[h2][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SOLD_AREA_VALUE);
                        	UpdateHouseText(h2);
                        	SaveHouseStats(h2);
						}
					}*/
					UpdateHouseText(h);
					SaveHouseStats(h);
					return 1;
				}
			}
		    if(PlayerInfo[playerid][vLevel] == 0 && DegreeInfo[playerid][dReal] >= 1)//Real Estate Degree
    		{
				if(hcount >= MAX_DEGREE_HOUSES)
				{
			    	new str[150];
   					format(str,sizeof(str), "You already own %d house/s, you need to sell one of them before you can buy another.", MAX_DEGREE_HOUSES);
                	SendClientMessage(playerid,WHITE,str);
					return 1;
				}
				if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), pNick(playerid), false) && strcmp(GetHouseOwner(h), "Nobody", false)) return SendClientMessage(playerid, RED, "This House Is Already Owned By Someone Else.");
				if(GetHouseValue(h) > GetPlayerCash(playerid))
				{
                	SendClientMessage(playerid,RED,"Insufficient funds.");
					return 1;
				}
				else
				{
				    new hname[40];
			    	format(hname, sizeof(hname), "%s's house", pNick(playerid));
					GivePlayerCash(playerid, -GetHouseValue(h));
					new gowner[24];
					format(gowner, sizeof(gowner), "%s", GetName(playerid));
					HouseInfo[h][hOwner] = gowner;
					HouseInfo[h][hName] = hname;
					new stringg[24];
					format(stringg, sizeof(stringg), "Empty");
					HouseInfo[h][hKeyOwner1] = stringg;
					HouseInfo[h][hKeyOwner2] = stringg;
					HouseInfo[h][hKeyOwner3] = stringg;
					HouseInfo[h][hKeyOwner4] = stringg;
					HouseInfo[h][hKeyOwner5] = stringg;
					HouseInfo[h][hKeyOwner6] = stringg;
					HouseInfo[h][hKeyOwner7] = stringg;
					HouseInfo[h][hKeyOwner8] = stringg;
					HouseInfo[h][hKeyOwner9] = stringg;
					HouseInfo[h][hKeyOwner10] = stringg;
					new str[150];
   					format(str,sizeof(str), "You have have successfully purchased this house for $%s.", number_format(GetHouseValue(h)));
   					SendClientMessage(playerid,WHITE,str);
					/*Loop(h2, MAX_HOUSES)
					{
						if(IsHouseInRangeOfHouse(h, h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != h)
						{
					    	format(file2, sizeof(file2), HOUSE_FILE, h2);
							HouseInfo[h2][hValue] = HouseInfo[h2][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SOLD_AREA_VALUE);
                        	UpdateHouseText(h2);
                        	SaveHouseStats(h2);
						}
					}*/
					UpdateHouseText(h);
					SaveHouseStats(h);
					return 1;
				}
			}
			if(PlayerInfo[playerid][vLevel] == 0 && DegreeInfo[playerid][dReal] == 0)
    		{
				if(hcount >= MAX_OWNABLE_HOUSES)
				{
			    	new str[150];
   					format(str,sizeof(str), "You already own %d house/s, you need to sell one of them before you can buy another.", MAX_OWNABLE_HOUSES);
                	SendClientMessage(playerid,WHITE,str);
					return 1;
				}
				if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), pNick(playerid), false) && strcmp(GetHouseOwner(h), "Nobody", false)) return SendClientMessage(playerid, RED, "This House Is Already Owned By Someone Else.");
				if(GetHouseValue(h) > GetPlayerCash(playerid))
				{
					SendClientMessage(playerid,RED,"Insufficient funds.");
					return 1;
				}
				else
				{
			    	new hname[40];
			    	format(hname, sizeof(hname), "%s's house", pNick(playerid));
					GivePlayerCash(playerid, -GetHouseValue(h));
					new gowner[24];
					format(gowner, sizeof(gowner), "%s", GetName(playerid));
					HouseInfo[h][hOwner] = gowner;
					HouseInfo[h][hName] = hname;
					new str[150];
   					format(str,sizeof(str), "You have have successfully purchased this house for $%s.", number_format(GetHouseValue(h)));
   					SendClientMessage(playerid,WHITE,str);
					/*Loop(h2, MAX_HOUSES)
					{
						if(IsHouseInRangeOfHouse(h, h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != h)
						{
					    	format(file2, sizeof(file2), HOUSE_FILE, h2);
							HouseInfo[h2][hValue] = HouseInfo[h][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SOLD_AREA_VALUE);
                        	UpdateHouseText(h2);
                        	SaveHouseStats(h2);
						}
					}*/
					UpdateHouseText(h);
					SaveHouseStats(h);
					return 1;
				}
			}
		}
		return 1;
	}
	if(dialogid == HOUSE_MENU+14)//Credits to Garsino
	{
		if(response)
		{
		    if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "~", true) != -1) return SendClientMessage(playerid, RED, "Your house name cant contain some symbols.");
			if(strlen(inputtext) < 4 || strlen(inputtext) > 40) return SendClientMessage(playerid, RED, "Invalid House Name Lenght! (4-40) Characters.");
			else
			{
			    new hname[40];
			    format(hname, sizeof(hname), "%s", inputtext);
				HouseInfo[h][hName] = hname;
				new str[150];
				format(str,sizeof(str), "You have set your house name to %s.", inputtext);
				SendClientMessage(playerid, WHITE,str);
                UpdateHouseText(h);
                SaveHouseStats(h);
			}
		}
		return 1;
	}
    switch(dialogid)
    {
    	case GYM_DIALOG:
	    {
		    if(response)
		    {
                switch(listitem)
                {
			        case 0:
			        {
						if(GetPlayerCash(playerid) >= 50000)
						{
                            SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
				            FightStyleID{playerid} = 0;
				            SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Elbow Style. Cost: $50K");
				            GivePlayerCash(playerid, - 50000);
				        }
				        else
				        {
                            SendClientMessage(playerid, RED, "Insufficient funds.");
				        }
			        }
			        case 1:
			        {
						if(GetPlayerCash(playerid) >= 100000)
						{
                            SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				            FightStyleID{playerid} = 1;
				            SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Boxer Style. Cost: $100K");
				            GivePlayerCash(playerid, - 100000);
				        }
				        else
				        {
                            SendClientMessage(playerid, RED, "Insufficient funds.");
				        }
			        }
			        case 2:
			        {
						if(GetPlayerCash(playerid) >= 50000)
						{
                            SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
				            FightStyleID{playerid} = 2;
				            SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Grab & Kick Style. Cost: $50K");
				            GivePlayerCash(playerid, - 50000);
				        }
				        else
				        {
                            SendClientMessage(playerid, RED, "Insufficient funds.");
				        }
			        }
			        case 3:
			        {
						if(GetPlayerCash(playerid) >= 50000)
						{
                            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				            FightStyleID{playerid} = 3;
				            SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Knee & Head Style. Cost: $50K");
				            GivePlayerCash(playerid, - 50000);
				        }
				        else
				        {
                            SendClientMessage(playerid, RED, "Insufficient funds.");
				        }
			        }
			        case 4:
			        {
						if(GetPlayerCash(playerid) >= 100000)
						{
                            SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				            FightStyleID{playerid} = 4;
				            SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Kung Fu Style. Cost: $100K");
				            GivePlayerCash(playerid, - 100000);
				        }
				        else
				        {
                            SendClientMessage(playerid, RED, "Insufficient funds.");
				        }
			        }
			        case 5:
			        {
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				        FightStyleID{playerid} = 5;
				        SendClientMessage(playerid, YELLOW, "Your fight style will now be saved to Normal Style.");
			        }
				}
			}
			return 1;
		}
    case ASK_DIALOG:
	{
		if(response)
        if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to submit a message to ask a question.");
        format(fstr, sizeof(fstr), "%s (%d) has asked: %s", GetPlayerNameEx(playerid), playerid, inputtext);
		SendAdminMessage(GREY, fstr);
		Log("logs/admquestion.log", fstr);
		SendClientMessage(playerid, RED, "Message sent, PLEASE WAIT.");
		return 1;
	}
    case CONTROL_PANEL2:
	{
        if(response)
        if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, RED, "Your password can only contain 3-24 characters.");
        new buf[129];
    	WP_Hash(buf, sizeof (buf), inputtext);
		PlayerInfo[playerid][pPass] = buf;
		new f[60];
		format(f, sizeof(f), USER_FILE, GetName(playerid));
		new INI:ufile = INI_Open(f);
        INI_WriteString(ufile, "pPass", PlayerInfo[playerid][pPass]);
		INI_Close(ufile);
		format(fstr, sizeof(fstr), "New password %s set.", inputtext);
		SendClientMessage(playerid, WHITE, fstr);
		return 1;
	}
	case CONTROL_PANEL5:
	{
		if(response)
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You must enter in a report.") && ShowPlayerDialog(playerid, CONTROL_PANEL5, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please enter your report below:", "Select", "Cancel");
		format(fstr, sizeof(fstr), "You have reported %s (%d) to online admins, Please remember not to spam reports!.", GetName(reportee[playerid]), reportee[playerid]);
		SendClientMessage(playerid, RED, fstr);
      	SendClientMessage(playerid, ORANGE,"It is best to post screenshots of your report at acnr.hostoi.com");
      	format(fstr2, sizeof(fstr2), "[REPORT]: %s (%d) reported %s (%d) for: %s", GetPlayerNameEx(playerid), playerid, GetName(reportee[playerid]), reportee[playerid], inputtext);
      	SendAdminMessage(-1, fstr2);
      	Log("logs/reports.log", fstr2);
		return 1;
    }
    case CONTROL_PANEL4:
	{
		if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
        if(!IsPlayerConnected(strval(inputtext))) return SendClientMessage(playerid, RED, "Player not found.");
	    reportee[playerid] = strval(inputtext);
		ShowPlayerDialog(playerid, CONTROL_PANEL5, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please enter your report below:", "Select", "Cancel");
		return 1;
	}
    case CONTROL_PANEL3:
	{
		if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
        if(!IsPlayerConnected(strval(inputtext))) return SendClientMessage(playerid, RED, "Player not found.");

		GetStats(playerid, strval(inputtext));
		return 1;
	}
	case CONTROL_PANEL6:
	{
        if(response)
        {
            new buf[129];
    		WP_Hash(buf, sizeof (buf), inputtext);
        	if(strcmp(buf, PlayerInfo[playerid][pPass], false) != 0) return SendClientMessage(playerid, RED, "Invalid password.");
			ShowPlayerDialog(playerid, CONTROL_PANEL2, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please enter your new password below:", "Select", "Cancel");
		}
		return 1;
	}
	case CONTROL_PANEL:
	{
        if(response)
        switch(listitem)
        {
			case 0:
			{
		    	ShowPlayerDialog(playerid, CONTROL_PANEL6, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please verify your current password below:", "Select", "Cancel");
			}
			case 1:
			{
				GetStats(playerid, playerid);
			}
			case 2:
			{
		    	ShowPlayerDialog(playerid, CONTROL_PANEL3, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please enter the id of the player you wish to review stats on:", "Select", "Cancel");
			}
			case 3:
			{
		    	ShowPlayerDialog(playerid, CONTROL_PANEL4, DIALOG_STYLE_INPUT, "{FFFFFF}Player Control Panel", "{FFFFFF}Please enter the id of the player you wish to report:", "Select", "Cancel");
			}
			case 4:
			{
				if(GetTeam{playerid} == CLASS_COPS)
				{
					ShowPlayerDialog(playerid, COP_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Police",
"{FFFFFF}You're a police officer, your job is to arrest(/ar) and takedown\nwanted criminals(/pc) and ticket(/tk) suspect civilians(/pc).\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
				else if(GetTeam{playerid} == CLASS_CIA)
				{
			        ShowPlayerDialog(playerid, CIA_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas CIA",
"{FFFFFF}You're a undercover cia agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
				else if(GetTeam{playerid} == CLASS_FBI)
				{
			        ShowPlayerDialog(playerid, FBI_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas FBI",
"{FFFFFF}You're a undercover fbi agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
			    else if(GetTeam{playerid} == CLASS_CIV)
				{
			        ShowPlayerDialog(playerid, CIV_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Civilian",
"{FFFFFF}You're a civilian(robber), your job is to rob players, casinos,\nbanks, stores and businesses while trying to avoid arrest from\nlaw enforcement. If you get arrested or taken down you are then\nsent to jail for 3-4 mins, which you can either /escape or get a\nfriend to /break or /bail you out.\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
			    else if(GetTeam{playerid} == CLASS_MEDIC)
				{
			        ShowPlayerDialog(playerid, MEDIC_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Medic",
"{FFFFFF}You're a medic, your job is to assist members of Las Venturas with\ninjuries using /medic, they can also /medic to call for help.\nUse /m [msg] for [Medic Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
			    else if(GetTeam{playerid} == CLASS_ARMY)
				{
			        ShowPlayerDialog(playerid, ARMY_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Army",
"{FFFFFF}You're a army soldier, your job is to focus on and takedown most\nwanted criminals(/pc) at all costs using army supplied vehicles.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
				}
			}
			case 5:
			{
				if(GetTeam{playerid} == CLASS_COPS)
   				{
        				ShowPlayerDialog(playerid, CMDS_LIST1, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}Cop Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
				}
    			else if(GetTeam{playerid} == CLASS_CIA)
   				{
  					ShowPlayerDialog(playerid, CMDS_LIST2, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}CIA Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    			}
    			else if(GetTeam{playerid} == CLASS_ARMY)
   				{
  					ShowPlayerDialog(playerid, CMDS_LIST3, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}Army Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    			}
    			else if(GetTeam{playerid} == CLASS_FBI)
   				{
  					ShowPlayerDialog(playerid, CMDS_LIST6, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}FBI Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    			}
    			else if(GetTeam{playerid} == CLASS_CIV)
   				{
    				ShowPlayerDialog(playerid, CMDS_LIST4, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}Civilian Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/(rob)list /esc /(un)tie /(cancel)hit /hits /(break)out/cuffs /bribe /mask /blowbomb /breakin", "Ok", "");
   				}
    			else if(GetTeam{playerid} == CLASS_MEDIC)
   				{
    				ShowPlayerDialog(playerid, CMDS_LIST5, DIALOG_STYLE_MSGBOX ,
				"{FFFFFF}Medic Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n/medic /m", "Ok", "");
   				}
			}
			case 6:
			{
				ShowPlayerDialog(playerid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
	"{FF0000}ACnR Server Rules",
	"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
	"Accept", "Decline");
			}
			case 7:
			{
			    ShowPlayerDialog(playerid, FAQS_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}ACnR - FAQS - Questions", "{FFFFFF}How do i choose a skill?\nHow do i become cia/fbi/army/medic class/es?\nHow do i make money?\nHow do i buy a vehicle?\nHow do i buy a house/business?\nHow do i become a VIP?\nHow much are guns/mats worth?\nHow to apply for ACnR admin/staff positions?\nWho is [BOT]Elvis?\nHow do i get Materials?", "Select", "Cancel");
			}
		}
	}
	case BANK_MENU:
	{
        if(response)
        switch(listitem)
        {
		case 0:
		{
		    format(fstr, sizeof(fstr), "{FFFFFF}Please enter the amount you wish to withdraw:\nAvailable funds: $%s", number_format(BankInfo[playerid][Balance]));
		    ShowPlayerDialog(playerid, WITHDRAW_MENU, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Withdraw", fstr, "Select", "Cancel");
		}
		case 1:
		{
		    format(fstr, sizeof(fstr), "{FFFFFF}Please enter the amount you wish to deposit:\nHolding: $%s", number_format(GetPlayerCash(playerid)));
		    ShowPlayerDialog(playerid, DEPOSIT_MENU, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Deposit", fstr, "Select", "Cancel");
		}
		case 2:
		{
		    format(fstr, sizeof(fstr), "{FFFFFF}Bank Funds: $%s\nHolding: $%s", number_format(BankInfo[playerid][Balance]), number_format(GetPlayerCash(playerid)));
		    ShowPlayerDialog(playerid, WITHDRAW_MENU + 2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas Bank - Balance", fstr, "Select", "Cancel");
		    BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		    GivePlayerCash(playerid, - 4);
		    SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		    SendClientMessage(playerid, WHITE, "Banker: Thank you for banking with Las Venturas Bank.");
		}
		case 3:
		{
		    ShowPlayerDialog(playerid, TRANSFER_MENU, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Transfer", "{FFFFFF}Please enter the id of the player you wish to transfer money to:", "Select", "Cancel");
		}
		case 4:
		{
		    ShowPlayerDialog(playerid, CREDIT_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Credit", "{FFFFFF}Credit Balance\nWithdraw Credit\nPay Debt\nLoans", "Select", "Cancel");
		}
		case 5:
		{
			format(fstr, sizeof(fstr), "{FFFFFF}Balance: $%s\nCredit: $%s\nDebt Owing: $%s\nFees Paid: $%s\nTransactions: %d", number_format(BankInfo[playerid][Balance]), number_format(BankInfo[playerid][Credit]), number_format(BankInfo[playerid][Debt]), number_format(BankInfo[playerid][Fees]), BankInfo[playerid][Transactions]);
			ShowPlayerDialog(playerid, STATEMENT_MENU, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas Bank - Statement", fstr, "Select", "Cancel");
 			BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
 			BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  			GivePlayerCash(playerid, - 4);
   			SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
   			SendClientMessage(playerid, WHITE, "Banker: Thank you for banking with Las Venturas Bank.");
		}
	}
	}
	case CREDIT_MENU:
	{
		if(response)
	    switch(listitem)
        {
        	case 0:
        	{
		    	format(fstr, sizeof(fstr), "{FFFFFF}Available credit: $%s\nDebt Owing: $%s\nHolding: $%s", number_format(BankInfo[playerid][Credit]), number_format(BankInfo[playerid][Debt]), number_format(GetPlayerCash(playerid)));
		    	ShowPlayerDialog(playerid, CREDIT_MENU, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas Bank - Credit", fstr, "Select", "Cancel");
		    	BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    	BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  				GivePlayerCash(playerid, - 4);
		    	SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		    	SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
        	}
			case 1:
        	{
		    	format(fstr, sizeof(fstr), "{FFFFFF}Please enter the amount you wish to withdraw:\nAvailable credit: $%s", number_format(BankInfo[playerid][Credit]));
		    	ShowPlayerDialog(playerid, CREDIT_MENU2, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Credit", fstr, "Select", "Cancel");
        	}
        	case 2:
        	{
				format(fstr, sizeof(fstr), "{FFFFFF}Please enter the amount you wish to direct debit:\nAvailable funds: $%s", number_format(BankInfo[playerid][Balance]));
		    	ShowPlayerDialog(playerid, CREDIT_MENU3, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Credit", fstr, "Select", "Cancel");
        	}
        	case 3:
        	{
        	    ShowPlayerDialog(playerid, CREDIT_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Credit", "{FFFFFF}Budget Loan[$1M]\nEconomy Loan[$3M]\nInvestment Loan[$5M]\nWealth Loan[$10M]", "Select", "Cancel");
        	}
        }
	}
	case CREDIT_MENU4:
	{
		if(response)
	    switch(listitem)
        {
        	case 0:
			{
			    if(BankInfo[playerid][Debt] > 0) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you will need to pay your debts back first.");
			    if(CalculateWealth(playerid) < 1000000/4/*25%*/) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you need to have a total wealth of $250K to qualify for this loan.");
			    BankInfo[playerid][Credit] = BankInfo[playerid][Credit] + 1000000;//Budget loan
			    BankInfo[playerid][Debt] = BankInfo[playerid][Debt] + 1000000 + 1000000/4;//25%
		    	BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    	BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  				GivePlayerCash(playerid, - 4);
		    	SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
			    SendClientMessage(playerid, WHITE, "THANKYOU: Budget Loan purchased, thank you for banking with Las Venturas Bank.");
			}
			case 1:
			{
			    if(BankInfo[playerid][Debt] > 0) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you will need to pay your debts back first.");
			    if(CalculateWealth(playerid) < 3000000/4/*25%*/) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you need to have a total wealth of $750K to qualify for this loan.");
			    BankInfo[playerid][Credit] = BankInfo[playerid][Credit] + 3000000;//Economy loan
			    BankInfo[playerid][Debt] = BankInfo[playerid][Debt] + 3000000 + 3000000/4;//25%
		    	BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    	BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  				GivePlayerCash(playerid, - 4);
		    	SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
			    SendClientMessage(playerid, WHITE, "THANKYOU: Economy Loan purchased, thank you for banking with Las Venturas Bank.");
			}
			case 2:
			{
			    if(BankInfo[playerid][Debt] > 0) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you will need to pay your debts back first.");
			    if(CalculateWealth(playerid) < 5000000/4/*25%*/) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you need to have a total wealth of $1.25M to qualify for this loan.");
			    BankInfo[playerid][Credit] = BankInfo[playerid][Credit] + 5000000;//Investment loan
			    BankInfo[playerid][Debt] = BankInfo[playerid][Debt] + 5000000 + 5000000/4;//25%
		    	BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    	BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  				GivePlayerCash(playerid, - 4);
		    	SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
			    SendClientMessage(playerid, WHITE, "THANKYOU: Investment Loan purchased, thank you for banking with Las Venturas Bank.");
			}
			case 3:
			{
			    if(BankInfo[playerid][Debt] > 0) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you will need to pay your debts back first.");
			    if(CalculateWealth(playerid) < 10000000/4/*25%*/) return SendClientMessage(playerid, RED, "[CREDIT-CHECK]: Sorry, you need to have a total wealth of $2.5M to qualify for this loan.");
			    BankInfo[playerid][Credit] = BankInfo[playerid][Credit] + 10000000;//Wealth loan
			    BankInfo[playerid][Debt] = BankInfo[playerid][Debt] + 10000000 + 10000000/4;//25%
		    	BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		    	BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
  				GivePlayerCash(playerid, - 4);
		    	SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
			    SendClientMessage(playerid, WHITE, "THANKYOU: Wealth Loan purchased, thank you for banking with Las Venturas Bank.");
			}
		}
	}
	case CREDIT_MENU3:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter an amount to direct debit."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(strval(inputtext) > BankInfo[playerid][Balance])
		{
		    SendClientMessage(playerid, RED, "Insufficient funds."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
			return 1;
		}
		if(strval(inputtext) > BankInfo[playerid][Debt])
		{
			format(fstr, sizeof(fstr), "You only owe $%s in debt, you cannot pay more than this.", number_format(BankInfo[playerid][Debt]));
			SendClientMessage(playerid, RED, fstr);
			return 1;
		}
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only direct debit $10M at a time");
		BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - strval(inputtext);
		BankInfo[playerid][Debt] = BankInfo[playerid][Debt] - strval(inputtext);
		format(fstr, sizeof(fstr), "You have direct debited $%s into your debt account. New debt owing: $%s", number_format(strval(inputtext)), number_format(BankInfo[playerid][Debt]));
		SendClientMessage(playerid, YELLOW, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) has direct debited $%s into their debt account", GetPlayerNameEx(playerid), playerid, number_format(strval(inputtext)));
		Log("logs/commands.log", astring);
	}
	case CREDIT_MENU2:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter an amount to withdraw."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(strval(inputtext) > BankInfo[playerid][Credit])
		{
		    SendClientMessage(playerid, RED, "Insufficient funds."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
			return 1;
		}
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only withdraw $10M at a time");
		BankInfo[playerid][Credit] = BankInfo[playerid][Credit] - strval(inputtext);
		GivePlayerCash(playerid, strval(inputtext));
		format(fstr, sizeof(fstr), "You have withdrawn $%s from your credit account. New credit: $%s", number_format(strval(inputtext)), number_format(BankInfo[playerid][Credit]));
		SendClientMessage(playerid, YELLOW, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) has withdrawn $%s from their credit account", GetPlayerNameEx(playerid), playerid, number_format(strval(inputtext)));
		Log("logs/commands.log", astring);
	}
	case TRANSFER_MENU:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter a player id."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, RED, "Player not found.");
		transferid[playerid] = strval(inputtext);
		ShowPlayerDialog(playerid, TRANSFER_MENU2, DIALOG_STYLE_INPUT, "{FFFFFF}Las Venturas Bank - Transfer", "{FFFFFF}Please enter the amount you wish to transfer:", "Select", "Cancel");
	}
	case TRANSFER_MENU2:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter an amount to transfer."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(strval(inputtext) > BankInfo[playerid][Balance])
		{
		    SendClientMessage(playerid, RED, "Insufficient funds."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
			return 1;
		}
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only transfer $10M at a time");
		BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - strval(inputtext);
		BankInfo[transferid[playerid]][Balance] = BankInfo[transferid[playerid]][Balance] + strval(inputtext);
		format(fstr, sizeof(fstr), "You have transfered $%s into %s bank account. New balance: $%s", number_format(strval(inputtext)), GetName(transferid[playerid]), number_format(BankInfo[playerid][Balance]));
		SendClientMessage(playerid, YELLOW, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) has transfered $%s into %s bank account.", GetPlayerNameEx(playerid), playerid, number_format(strval(inputtext)), GetName(transferid[playerid]));
		Log("logs/commands.log", astring);
	}
	case WITHDRAW_MENU:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter an amount to withdraw."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(strval(inputtext) > BankInfo[playerid][Balance])
		{
		    SendClientMessage(playerid, RED, "Insufficient funds."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
			return 1;
		}
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only withdraw $10M at a time");
		BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - strval(inputtext);
		GivePlayerCash(playerid, strval(inputtext));
		format(fstr, sizeof(fstr), "You have withdrawn $%s from your bank account. New balance: $%s", number_format(strval(inputtext)), number_format(BankInfo[playerid][Balance]));
		SendClientMessage(playerid, YELLOW, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) has withdrawn $%s from their bank account", GetPlayerNameEx(playerid), playerid, number_format(strval(inputtext)));
		Log("logs/commands.log", astring);
	}
	case DEPOSIT_MENU:
	{
        if(response)
        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Characters detected, numbers only.");
		if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You need to enter an amount to deposit."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		if(strval(inputtext) > GetPlayerCash(playerid))
		{
		    SendClientMessage(playerid, RED, "Insufficient funds."), ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
			return 1;
		}
		if(strval(inputtext) > 10000000) return SendClientMessage(playerid, RED, "You can only deposit $10M at a time");
		BankInfo[playerid][Balance] = BankInfo[playerid][Balance] + strval(inputtext);
		GivePlayerCash(playerid, - strval(inputtext));
		format(fstr, sizeof(fstr), "You have deposited $%s into your bank account. New balance: $%s", number_format(strval(inputtext)), number_format(BankInfo[playerid][Balance]));
		SendClientMessage(playerid, YELLOW, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		ShowPlayerDialog(playerid, BANK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Bank - Main Menu", "{FFFFFF}Withdraw\nDeposit\nBalance\nTransfer\nCredit\nStatement", "Select", "Cancel");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) has deposited $%s into their bank account", GetPlayerNameEx(playerid), playerid, number_format(strval(inputtext)));
		Log("logs/commands.log", astring);
	}
    case GLOBAL_AMMU_MENU:
    {
		if(response)
	    switch(listitem)
        {
        	case 0:
			{
            	ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Hand Guns", "{FFFFFF}Item: 9mm - Price: $200\nItem: Silenced 9mm - Price: $300\nItem: Desert Eagle - Price: $500", "Select", "Cancel");
        	}
        	case 1:
			{
            	ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Shotguns", "{FFFFFF}Item: Shotgun - Price: $600\nItem: Sawnoff Shotgun - Price: $800\nItem: Combat Shotgun - Price: $1000", "Select", "Cancel");
			}
        	case 2:
			{
		    	ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Sub Machine Guns", "{FFFFFF}Item: Tec 9 - Price: $600\nItem: Micro SMG - Price: $800 \nItem: MP5 - Price: $1000", "Select", "Cancel");
        	}
			case 3:
			{
            	ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Assault Rifles", "{FFFFFF}Item: AK47 - Price: $800\nItem: M4 - Price: $1000", "Select", "Cancel");
        	}
        	case 4:
			{
            	ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Body Armour", "{FFFFFF}Item: Body Armour - Price: $500", "Select", "Cancel");
        	}
        }
	}
    case GLOBAL_AMMU_MENU1:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 200) return SendClientMessage(playerid, RED, "Insufficient funds.");
            GivePlayerCash(playerid, -200);
            GivePlayerWeapon(playerid,22,100);
            SendClientMessage(playerid, YELLOW, "You have purchased a 9mm with 100 ammo for $200.");
            ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
            ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
		case 1:
		{
            if(GetPlayerCash(playerid) < 300) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -300);
	        GivePlayerWeapon(playerid,23,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Silenced 9mm with 100 ammo for $300.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
		case 2:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -500);
	        GivePlayerWeapon(playerid,24,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Desert Eagle with 100 ammo for $500.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    case GLOBAL_AMMU_MENU2:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 600) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -600);
	        GivePlayerWeapon(playerid,25,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Shotgun with 100 ammo for $600.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        GivePlayerWeapon(playerid,26,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Sawn Off Shotgun with 100 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 2:
		{
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        GivePlayerWeapon(playerid,27,100);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Combat Shotgun with 100 ammo for $1000");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    case GLOBAL_AMMU_MENU3:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 600) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -600);
	        GivePlayerWeapon(playerid,32,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Tec 9 with 200 ammo for $600.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
            ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        GivePlayerWeapon(playerid,28,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Micro SMG with 200 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 2:
		{
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        GivePlayerWeapon(playerid,29,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a MP5 with 200 ammo for $1000.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    case GLOBAL_AMMU_MENU4:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -800);
	        GivePlayerWeapon(playerid,30,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a AK47 with 200 ammo for $800.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        case 1:
        {
            if(GetPlayerCash(playerid) < 1000) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -1000);
	        GivePlayerWeapon(playerid,31,200);
	        SendClientMessage(playerid, YELLOW, "You have purchased a M4 with 200 ammo for $1000.");
	        ApplyAnimation(playerid,"DEALER","DEALER_DEAL ",4.1,0,1,1,1,1);
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
		}
		}
    }
    case GLOBAL_AMMU_MENU5:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -500);
			SetPlayerArmour(playerid, 100);
	        SendClientMessage(playerid, YELLOW, "You have purchased Body Armour for $500.");
	        ShowPlayerDialog(playerid, GLOBAL_AMMU_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Gun Menu", "{FFFFFF}Handguns\nShotguns\nSub Machine Guns\nAssault Rifles\nBody Armour", "Select", "Cancel");
        }
        }
    }
    case GLOBAL_SHOP_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Food/Drink Menu", "{FFFFFF}Item: Sprunk and Chips - Price: $10\nItem: Sprunk and Hotdog - Price: $20", "Select", "Cancel");
        }
        case 1:
		{
            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Hardware Menu", "{FFFFFF}Item: Rope - Price: $5000\nItem: Scissors - Price: $20K\nItem: Vehicle Lock - Price: $50K\nItem: 5 Spray Cans - Price: $5K", "Select", "Cancel");
		}
		case 2:
		{
            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Lottery Menu", "{FFFFFF}Item: Daily Lottery Ticket - Price: $500", "Select", "Cancel");
		}
		}
	}
	case GLOBAL_SHOP_MENU1:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -10);
				if(health + 25 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 25);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased Sprunk and Chips for $10.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
        case 1:
		{
            if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -20);
				if(health + 50 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 50);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Sprunk and Hotdog for $20.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
        }
    }
    case GLOBAL_SHOP_MENU2:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            {
                GivePlayerCash(playerid, -5000);
                PlayerInfo[playerid][pRope]+=4;
                SendClientMessage(playerid, YELLOW, "You have purchased 4 Pieces of Rope for $5000.");
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
		case 1:
		{
            if(GetPlayerCash(playerid) < 20000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][pScissors] == 1) return SendClientMessage(playerid, RED, "You Already Have A Pair of Scissors.");

			{
                GivePlayerCash(playerid, -20000);
                PlayerInfo[playerid][pScissors]++;
                SendClientMessage(playerid, YELLOW, "You have purchased a Pair of Scissors for $20K.");
                ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
        case 2:
		{
            if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][vLock] == 1) return SendClientMessage(playerid, RED, "You already own a vLock.");
            {
	            GivePlayerCash(playerid, -50000);
	            PlayerInfo[playerid][vLock]++;
	            SendClientMessage(playerid, YELLOW, "You have purchased a Personel Vehicle Lock for $50K.");
	            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
		case 3:
		{
            if(GetPlayerCash(playerid) < 5000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            if(PlayerInfo[playerid][pPaintCan] == 1) return SendClientMessage(playerid, RED, "You Already Have Spray Can.");
            {
	            GivePlayerCash(playerid, -5000);
	            PlayerInfo[playerid][pPaintCan]+=5;
	            SendClientMessage(playerid, YELLOW, "You have purchased 5 Spray Cans for $5K.");
	            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
        }
    }
    case GLOBAL_SHOP_MENU3:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 500) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        if(HasLotteryTicket{playerid} == 1) return SendClientMessage(playerid, RED, "You already have a lottery ticket.");
	        {
                new nstring[150];
	            SendClientMessage(playerid, YELLOW, "You have purchased a Lottery Ticket for $500.");
		        HasLotteryTicket{playerid} = 1;
	        	GivePlayerCash(playerid, -500);
		        MakePlayersLottoNumbers(playerid);
		        format(nstring, sizeof(nstring), "Your lotto numbers are: %d, %d, %d, %d, %d, %d", PlayersLottoNumbers[0][playerid], PlayersLottoNumbers[1][playerid], PlayersLottoNumbers[2][playerid], PlayersLottoNumbers[3][playerid], PlayersLottoNumbers[4][playerid], PlayersLottoNumbers[5][playerid]);
	    	    SendClientMessage(playerid, YELLOW, nstring);
	            ShowPlayerDialog(playerid, GLOBAL_SHOP_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Item List", "{FFFFFF}Food/Drink List\nHardware List\nLottery Ticket", "Select", "Cancel");
			}
		}
		}
    }
	case GLOBAL_CLUB_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, GLOBAL_CLUB_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Beverages Menu", "{FFFFFF}Item: Beer - Price: $10\nItem: Wine - Price: $20", "Select", "Cancel");
        }
        case 1:
		{
            ShowPlayerDialog(playerid, GLOBAL_CLUB_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Bartender Menu", "{FFFFFF}Item: Ectasy - Price: $100\nItem: Cocaine - Price: $250\n", "Select", "Cancel");
        }
        }
	}
	case GLOBAL_CLUB_MENU1:
    {
        if(response)
        switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -10);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Bottle of Beer for $10.");
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
	        SetPlayerDrunkLevel(playerid, 3000);
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 20) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -20);
	        SendClientMessage(playerid, YELLOW, "You have purchased a Bottle of Wine for $20.");
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	        SetPlayerDrunkLevel(playerid, 3000);
        }
        }
    }
    case GLOBAL_CLUB_MENU2:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 100) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -100);
	        SendClientMessage(playerid, YELLOW, "You have purchased some Ectasy for $100.");
	        ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
            SetPlayerDrunkLevel(playerid, 6000);
            SetPlayerHealth(playerid,100.0);
            SetPlayerArmour(playerid,100.0);
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 250) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        GivePlayerCash(playerid, -250);
	        SendClientMessage(playerid, YELLOW, "You have purchased some Cocaine for $250.");
	        ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 1.0, 0, 0, 0, 0, 0);
	        SetPlayerDrunkLevel(playerid, 6000);
	        SetPlayerHealth(playerid,100.0);
            SetPlayerArmour(playerid,100.0);
        }
        }
	}
    case REGISTER_MENU:
    {
	    new f[60], string[150];
        format(f, sizeof(f), USER_FILE, GetName(playerid));
        if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You MUST provide a password.") && format(string,sizeof(string),"Welcome to Las Venturas %s!\n\nYour not registered yet, please enter a password below to register:", GetPlayerNameEx(playerid)) && ShowPlayerDialog(playerid, REGISTER_MENU, DIALOG_STYLE_PASSWORD, "{FFFFFF}Register", string, "Register", "Quit");
        if(strlen(inputtext) < 3 || strlen(inputtext) > 24) return SendClientMessage(playerid, RED, "> Your password can only contain 3-24 characters.") && format(string,sizeof(string),"{FFFFFF}Welcome to Las Venturas %s!\n\nYour not registered yet, please enter a password below to register:", GetPlayerNameEx(playerid)) && ShowPlayerDialog(playerid, REGISTER_MENU, DIALOG_STYLE_PASSWORD, "{FFFFFF}Register", string, "Register", "Quit");
		if(!response) return SendClientMessage(playerid, RED, "You MUST register before you can spawn.") && KickEx(playerid);
		{
			IsPlayersFirstSpawn{playerid} = false;
	        IsLoggedIn{playerid} = 1;
			new buf[129];
	    	WP_Hash(buf, sizeof(buf), inputtext);
			PlayerInfo[playerid][pPass] = buf;
			new INI:ufile = INI_Open(f);
	        INI_WriteString(ufile, "pPass", buf);
			INI_Close(ufile);

			if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
			{
				SaveBankStats(playerid);
	    		SaveFightStats(playerid);
	    		SaveSettings(playerid);
	    		SaveSkillLevels(playerid);
	    		SaveUserStats(playerid);
	    		SaveDegreeStats(playerid);
	    	}

			GivePlayerCash(playerid, 10000);
			format(fstr, sizeof(fstr), "[BOT]Elvis: Account registered! Welcome to Vegas %s.", GetPlayerNameEx(playerid));
	        SendClientMessage(playerid, WHITE, fstr);
	        format(fstr2, sizeof(fstr2), "%s (%d) has registered.", GetPlayerNameEx(playerid), playerid);
	        SendClientMessageToAll(LIGHTBLUE, fstr2);
			SendClientMessage(playerid, LIGHTGREEN, "Use /cp to access the player control panel.");
	        ShowPlayerDialog(playerid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
			"{FF0000}ACnR Server Rules",
			"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
			"Accept", "Decline");
			for(new line; line<15; line++)
			{
			    TextDrawShowForPlayer(playerid, XMsg[line]);
			}
        }
    }
    case LOGIN_MENU:
    {
	    new f[60], string[150];
        format(f, sizeof(f), USER_FILE, GetName(playerid));
        if(!strlen(inputtext)) return SendClientMessage(playerid, RED, "You MUST provide a password.") && KickEx(playerid);
        else if(!response) return SendClientMessage(playerid, RED, "You MUST login before you can spawn.") && KickEx(playerid);
        {
	        new buf[129];
	    	WP_Hash(buf, sizeof (buf), inputtext);
	        if(strcmp(buf, PlayerInfo[playerid][pPass], false) != 0)
			{
	            SendClientMessage(playerid, RED, "Incorrect password.");
	            format(string, sizeof(string), "%s (%d) has been kicked | Reason: Incorrect password", GetPlayerNameEx(playerid), playerid);
	            SendClientMessage(playerid, RED, string);
	            KickEx(playerid);
	            return 1;
	        }
	        else
	        {

	            PlayerInfo[playerid][pJoins]++;
				SetPlayerScore(playerid, PlayerInfo[playerid][pScore]);
				SetPlayerCash(playerid, PlayerInfo[playerid][pCash]);

				if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
				{
					SaveBankStats(playerid);
	    			SaveFightStats(playerid);
	    			SaveSettings(playerid);
	    			SaveSkillLevels(playerid);
	    			SaveUserStats(playerid);
	    			SaveDegreeStats(playerid);
	    		}
	        	IsLoggedIn{playerid} = 1;

	            format(fstr, sizeof(fstr), "[BOT]Elvis: Login successful! Welcome back %s.", GetPlayerNameEx(playerid));
	            SendClientMessage(playerid, WHITE, fstr);
	            format(fstr2, sizeof(fstr2), "%s (%d) has logged in.", GetPlayerNameEx(playerid), playerid);
	            SendClientMessageToAll(LIGHTBLUE, fstr2);
	            SendClientMessage(playerid, LIGHTGREEN, "Use /cp to access the player control panel.");
	            ShowPlayerDialog(playerid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
				"{FF0000}ACnR Server Rules",
				"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
				"Accept", "Decline");
				for(new line; line<15; line++)
				{
				    TextDrawShowForPlayer(playerid, XMsg[line]);
				}
	        }
        }
    }
    case HOS_MENU:
    {
		if(response)
	    switch(listitem)
        {
            case 0:
			{
			    if(GetPlayerWantedLevel(playerid) >= 1) return SendClientMessage(playerid, RED, "You cant change skins(class) when you have wanted level.");
			    HasChangedSkin{playerid} = true;
			    SetPlayerHealth(playerid, 0.0);
			    ForceClassSelection(playerid);
			}
        	case 1:
			{
            	ShowPlayerDialog(playerid, HOS_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Hospital", "{FFFFFF}Item: Medikit x2 Pack - Price: $50K\nItem: Medikit x5 Pack - Price: $100K", "Select", "Cancel");
        	}
        }
	}
    case HOS_MENU1:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
            if(GetPlayerCash(playerid) < 50000) return SendClientMessage(playerid, RED, "Insufficient funds.");
			GivePlayerCash(playerid, -50000);
	        PlayerInfo[playerid][pKits] += 2;
	        SendClientMessage(playerid, YELLOW, "You have purchased a 2 Pack of Medikits for $50K.");
        }
        case 1:
		{
            if(GetPlayerCash(playerid) < 100000) return SendClientMessage(playerid, RED, "Insufficient funds.");
            GivePlayerCash(playerid, -100000);
			PlayerInfo[playerid][pKits] += 5;
	        SendClientMessage(playerid, YELLOW, "You have purchased a 5 Pack of Medikits for $100K.");
        }
        }
    }
    case CLUCK_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, CLUCK_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell - Menu", "{FFFFFF}Item: Value Meal - Price: $10\nItem: Cezar Salad - Price: $15", "Select", "Cancel");
        }
        }
	}
	case CLUCK_MENU1:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -10);
				if(health + 25 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 25);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Value Meal for $10.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        case 1:
	    {
	        if(GetPlayerCash(playerid) < 15) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -15);
				if(health + 50 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 50);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Cezar Salad for $15.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, CLUCK_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Cluck'n Bell", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        }
	}
	case BURG_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, BURG_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot - Menu", "{FFFFFF}Item: Cheese Burger - Price: $10\nItem: Double Patty and Cheese - Price: $15", "Select", "Cancel");
        }
        }
	}
	case BURG_MENU1:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
            new Float:health;
            GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
	        	GivePlayerCash(playerid, -10);
				if(health + 25 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 25);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Cheese Burger for $10.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        case 1:
	    {
	        if(GetPlayerCash(playerid) < 15) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -15);
				if(health + 50 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 50);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Double Patty and Cheese for $15.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, BURG_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Burger Shot", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        }
	}
	case LVPD_ELEVATOR_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,2267.9355,2445.0942,-7.4531);
			SetPlayerFacingAngle(playerid,179.6141);
        }
        case 1:
		{
            SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,2267.9468,2444.9011,3.2734);
			SetPlayerFacingAngle(playerid,180.5113);
        }
        case 2:
		{
            SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,2294.2534,2451.3782,10.8203);
			SetPlayerFacingAngle(playerid,91.2775);
        }
        case 3:
		{
            SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,2296.2930,2461.4600,38.6875);
			SetPlayerFacingAngle(playerid,3.3004);
        }
        }
	}
	case PIZZA_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, PIZZA_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Well Stacked Pizzas - Menu", "{FFFFFF}Item: Large Pizza - Price: $10\nItem: 2 Large Pizzas - Price: $15", "Select", "Cancel");
        }
        }
	}
	case PIZZA_MENU1:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, RED, "Insufficient funds.");
	        new Float:health;
	        GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -10);
				if(health + 25 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 25);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased a Large Pizza for $10.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, PIZZA_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Well Stacked Pizzas", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        case 1:
	    {
	        if(GetPlayerCash(playerid) < 15) return SendClientMessage(playerid, RED, "Insufficient funds.");
            new Float:health;
            GetPlayerHealth(playerid,health);
			if(health >= 100) return SendClientMessage(playerid, RED, "You cant eat with 100 percent health.");
			{
				GivePlayerCash(playerid, -15);
				if(health + 50 > 100)
				{
			    	SetPlayerHealth(playerid, 100.0);
				}
				else
				{
					SetPlayerHealth(playerid, health + 50);
				}
	        	SendClientMessage(playerid, YELLOW, "You have purchased 2 Large Pizzas for $15.");
	        	ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
	        	ShowPlayerDialog(playerid, PIZZA_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Well Stacked Pizzas", "{FFFFFF}Food/Drink Menu", "Select", "Cancel");
	        }
        }
        }
	}
	case TUNE_MENU:
	{
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
				ShowPlayerDialog(playerid, TUNE_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Paintjobs List", "{FFFFFF}Item: Paint Job - 1 - Price: $5K\nItem: Paint Job - 2 - Price: $5K\nItem: Paint Job - 3 - Price: $5K\nBack", "Select", "Cancel");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");
			}
			case 2:
			{
				ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
			}
            case 5:
			{
				ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
			}
			case 6:
			{
				ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
			}
			case 7:
			{
				ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
			}
            case 8:
			{
				ShowPlayerDialog(playerid, TUNE_MENU9, DIALOG_STYLE_LIST, "{FFFFFF}Bullbars List", "{FFFFFF}Item: Locos Low Chrome Grill - Price: $1K\nItem: Locos Low Chrome Bars - Price: $1K\nItem: Locos Low Chrome Lights - Price: $1K\nItem: Locos Low Chrome Bullbar - Price: $1K\nBack", "Select", "Cancel");
			}
			case 9:
			{
				ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			case 10:
			{
				ShowPlayerDialog(playerid, TUNE_MENU11, DIALOG_STYLE_LIST, "{FFFFFF}Car Stereos List", "{FFFFFF}Item: Bass Boost - Price: $1K\nBack", "Select", "Cancel");
			}
			case 11:
			{
				ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			case 12:
			{
				ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
			}
			case 13:
			{
				ShowPlayerDialog(playerid, TUNE_MENU14, DIALOG_STYLE_LIST, "{FFFFFF}Hydraulics", "{FFFFFF}Item: Hydraulics - Price: $1K\nBack", "Select", "Cancel");
			}
			case 14:
			{
				ShowPlayerDialog(playerid, TUNE_MENU15, DIALOG_STYLE_LIST, "{FFFFFF}NOS", "{FFFFFF}Item: Nirto x2 - Price: $1K\nItem: Nirto x5 - Price: $2K\nItem: Nirto x10 - Price: $3K\nBack", "Select", "Cancel");
			}
			case 15:
			{
				ShowPlayerDialog(playerid, TUNE_MENU16, DIALOG_STYLE_LIST, "{FFFFFF}Neons", "{FFFFFF}Item: Blue Neons - Price: $5K\nItem: Red Neons - Price: $5K\nItem: Green Neons - Price: $5K\nItem: Yellow Neons - Price: $5K\nItem: Pink Neons - Price: $5K\nRemove Neons\nBack", "Select", "Cancel");
			}
			}
       }
   }

   case TUNE_MENU1:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560 ||

				GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				if(GetPlayerCash(playerid) >= 5000)
		        {

					ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),0);
				    OnVehiclePaintjob(playerid, GetPlayerVehicleID(playerid), 0);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					GivePlayerCash(playerid,-5000);
					SendClientMessage(playerid,YELLOW,"You have added Paintjob - 1 to your car for $5K.");
                    ShowPlayerDialog(playerid, TUNE_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Paintjobs List", "{FFFFFF}Item: Paint Job - 1 - Price: $5K\nItem: Paint Job - 2 - Price: $5K\nItem: Paint Job - 3 - Price: $5K\nBack", "Select", "Cancel");

				}
				else
				{
				   SendClientMessage(playerid,RED,"Insufficient funds.");
				}
				else
				{
				   SendClientMessage(playerid,RED,"Paintjobs only work for Wheel Arch Angel and Loco Low Co type cars.");
			       ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
				}
			}
			case 1:
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560 ||

				GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				if(GetPlayerCash(playerid) >= 5000)
		        {

					ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),1);
					OnVehiclePaintjob(playerid, GetPlayerVehicleID(playerid), 1);
					GivePlayerCash(playerid,-5000);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,YELLOW,"You have added Paintjob - 2 to your car for $5K.");
                    ShowPlayerDialog(playerid, TUNE_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Paintjobs List", "{FFFFFF}Item: Paint Job - 1 - Price: $5K\nItem: Paint Job - 2 - Price: $5K\nItem: Paint Job - 3 - Price: $5K\nBack", "Select", "Cancel");

				}
				else
				{
				   SendClientMessage(playerid,RED,"Insufficient funds.");
				}
				else
				{
				   SendClientMessage(playerid,RED,"Paintjobs only work for Wheel Arch Angel and Loco Low Co type cars.");
			       ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
				}
			}
			case 2:
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560 ||

				GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				if(GetPlayerCash(playerid) >= 5000)
		        {

                   ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),2);
                   OnVehiclePaintjob(playerid, GetPlayerVehicleID(playerid), 2);
                   GivePlayerCash(playerid,-5000);
                   PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				   SendClientMessage(playerid,YELLOW,"You have added Paintjob - 3 to your car for $5K.");
                   ShowPlayerDialog(playerid, TUNE_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Paintjobs List", "{FFFFFF}Item: Paint Job - 1 - Price: $5K\nItem: Paint Job - 2 - Price: $5K\nItem: Paint Job - 3 - Price: $5K\nBack", "Select", "Cancel");
				}
				else
				{
				   SendClientMessage(playerid,RED,"Insufficient funds.");
				}
				else
				{
				   SendClientMessage(playerid,RED,"Paintjobs only work for Wheel Arch Angel and Loco Low Co type cars.");
			       ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
				}
			}
			case 3:
			{
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
			}
			}
	   }
   }

   case TUNE_MENU2:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		            GivePlayerCash(playerid,-1000);
		            ChangeVehicleColor(GetPlayerVehicleID(playerid),0,0);//Black
		            OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 0, 0);
		            OnVehiclePaintjob(playerid, GetPlayerVehicleID(playerid), 0);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Black for $1K.");
		            ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 1:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),1,1);//White
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 1, 1);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle White for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 2:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),3,3);//Red
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 3, 3);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Red for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 3:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),79,79); //Blue
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 79, 79);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Blue for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 4:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),86,86);//Green
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 86, 86);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Green for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 5:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),6,6);//Yellow
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 6, 6);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Yellow for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");

			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 6:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),126,126);//Pink
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 126, 126);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Pink for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");
			}
			else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 7:
			{
		    if(GetPlayerCash(playerid) >= 1000)
            {

			        GivePlayerCash(playerid,-1000);
			        ChangeVehicleColor(GetPlayerVehicleID(playerid),66,66);//Brown
			        OnVehicleRespray(playerid, GetPlayerVehicleID(playerid), 66, 66);
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,YELLOW,"You have successfully painted your vehicle Brown for $1K.");
			        ShowPlayerDialog(playerid, TUNE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Colors List", "{FFFFFF}Item: Black - Price: $1K\nItem: White - Price: $1K\nItem: Red - Price: $1K\nItem: Blue - Price: $1K\nItem: Green - Price: $1K\nItem: Yellow - Price: $1K\nItem: Pink - Price: $1K\nItem: Brown - Price: $1K\nBack", "Select", "Cancel");
            }
            else
			{
			    SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 8:
			{
        		    ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
			}
		}
   }

   case TUNE_MENU3:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {

		            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
                    if(GetPlayerCash(playerid) >= 1000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1034);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1034);
		            	GivePlayerCash(playerid,-1000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            	SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1046);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1046);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1065);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1065);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Jetser.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1064);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1064);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1028);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1028);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1089);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1089);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Exhaust to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
	    			}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
	  			 	else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
                    }
                    }
            }
			case 1:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
                {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
                    if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1037);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1037);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Exhaust to your Elegy.");
			            ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1045);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1045);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Exhaust to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1066);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1066);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"ou Have Successfully Added A Wheel Arch X-Flow Exhaust to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1059);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1059);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Exhaust to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1029);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1029);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Exhaust to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1092);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1092);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Exhaust to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
					}
            }
			case 2:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)

			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1126);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1126);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Exhaust to your Remington.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1129);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1129);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Exhaust to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1104);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1104);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Exhaust to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1113);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1113);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Exhaust to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1136);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1136);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Exhaust to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}

					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
			case 3:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1127);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1127);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Exhaust to your Remingon.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1132);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1132);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Exhaust to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1105);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1105);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Exhaust to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1114);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1114);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Exhaust to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
                    if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1135);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1135);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Exhaust to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Exhausts List", "{FFFFFF}Item: Wheel Arch Alien Exhaust - Price: $1K\nItem: Wheel Arch X-Flow Exhaust - Price: $1K\nItem: Locos Low Chromer Exhaust - Price: $1K\nLocos Low Slamin Exhaust - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
			case 4:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
	    }
   }

   case TUNE_MENU4:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                   if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				   GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				   GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				   GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				   GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				   {

		            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
					if(GetPlayerCash(playerid) >= 1000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1171);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1171);
		            	GivePlayerCash(playerid,-1000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1153);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1153);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1160);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1160);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1155);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1155);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1169);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1169);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1166);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1166);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Front Bumper to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
	                }
	                }
            }
			case 1:
            {
                   if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
	               GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
	               GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
	               GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
                   GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		           {


			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1172);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1172);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Elegy.");
			            ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1152);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1152);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1173);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1173);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1157);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1157);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1170);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1170);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1165);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1165);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Front Bumper to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
		    }
			case 2:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
				{

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1179);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1179);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Front Bumper to your Remington.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1189);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1189);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Front Bumper to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1182);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1182);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Front Bumper to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1115);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1115);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Front Bumper to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1191);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1191);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Front Bumper to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
            case 3:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
	            GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1185);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1185);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Front Bumper to your Remington.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1188);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1188);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Front Bumper to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1181);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1181);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Front Bumper to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
                    else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1116);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1116);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Front Bumper to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1190);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1190);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Front Bumper to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Front Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
                    }
                    }
            }
            case 4:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
        }
   }

   case TUNE_MENU5:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {

		            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
					if(GetPlayerCash(playerid) >= 1000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1149);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1149);
		            	GivePlayerCash(playerid,-1000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1150);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1150);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1159);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1159);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1154);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1154);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1141);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1141);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1168);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1168);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Rear Bumper to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
			case 1:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {


			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1148);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1148);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Elegy.");
		                ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1151);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1151);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Flash.");
				        ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1161);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1161);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Jester.");
				        ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1156);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1156);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Stratum.");
				        ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1140);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1140);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Sultan.");
				        ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1167);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1167);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Rear Bumper to your Uranus.");
				        ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
			case 2:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1180);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1180);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Rear Bumper to your Remington.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1187);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1187);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Rear Bumper to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1184);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1184);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Rear Bumper to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1109);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1109);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Rear Bumper to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1192);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1192);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Chromer Rear Bumper to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
			case 3:
            {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1178);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1178);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Rear Bumper to your Remington.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1186);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1186);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Rear Bumper to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1183);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1183);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Rear Bumper to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1110);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1110);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Rear Bumper to your Slamvan.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1193);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1193);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Slamin Rear Bumper to your Tornado.");
					    ShowPlayerDialog(playerid, TUNE_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rear Bumpers List", "{FFFFFF}Item: Wheel Arch Alien Bumper - Price: $1K\nItem: Wheel Arch X-Flow Bumper - Price: $1K\nItem: Locos Low Chromer Bumper - Price: $1K\nItem: Locos Low Slamin Bumper - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Locos Low type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
            case 4:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
        }
   }

   case TUNE_MENU6:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {


		            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
					if(GetPlayerCash(playerid) >= 1000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1035);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1035);
		            	GivePlayerCash(playerid,-1000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1054);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1054);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1067);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1067);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1055);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1055);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1032);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1032);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1088);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1088);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Roof Vent to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
	        case 1:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {



			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1035);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1035);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Elegy.");
			            ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1053);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1053);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1068);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1068);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1061);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1061);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1033);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1033);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1091);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1091);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Roof Vent to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
			case 2:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1128);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1128);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Hardtop Roof to your Blade.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
			        else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1128);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1128);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Hardtop Roof to your Savanna.");
					    ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Savanna or Blade.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
		    case 3:
			{
                 if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1131);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1131);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Locos Low Softtop Roof to your Savanna.");
			            ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
	   				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
					if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1103);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1103);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Locos Low Softtop Roof to your Blade.");
                        ShowPlayerDialog(playerid, TUNE_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Roofs List", "{FFFFFF}Item: Wheel Arch Alien Roof Vent - Price: $1K\nItem: Wheel Arch X-Flow Roof Vent - Price: $1K\nItem: Locos Low Hardtop Roof - Price: $1K\nItem: Locos Low Softtop Roof - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Savanna or Blade.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
            case 4:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
	     }
   }

   case TUNE_MENU7:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {
                    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
					if(GetPlayerCash(playerid) >= 2000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1147);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1147);
		            	GivePlayerCash(playerid,-2000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1049);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1049);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1162);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1162);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, " {FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1158);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1158);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1138);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1138);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1164);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1164);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch Alien Spoiler to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
    	    }
            case 1:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
					if(GetPlayerCash(playerid) >= 2000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1146);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1146);
		            	GivePlayerCash(playerid,-2000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Elegy.");
			            ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1150);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1150);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1158);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1158);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1060);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1060);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1139);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1139);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
					if(GetPlayerCash(playerid) >= 2000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1163);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1163);
		            	GivePlayerCash(playerid,-2000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added a Wheel Arch X-Flow Spoiler to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Spoilers List", "{FFFFFF}Item: Alien Spoiler - Price: $2K\nItem: X-Flow Spoiler - Price: $2K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to X-Flow Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
            }
            case 2:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
	   	 }
    }

    case TUNE_MENU8:
    {
		if(response)
		{
		    switch(listitem)
            {
			case 0:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {

		            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		            {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1036);
		            	AddVehicleComponent(GetPlayerVehicleID(playerid),1040);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1036);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1040);
		            	GivePlayerCash(playerid,-1000);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Elegy.");
		            	ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
                    }
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1047);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1051);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1047);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1051);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1069);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1071);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1056);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1062);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1056);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1062);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1026);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1027);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1026);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1027);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1090);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1094);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1090);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1094);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch Alien Sideskirts to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
					}
		    }
	   	    case 1:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 565 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 559 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 561 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		        {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
			        {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1039);
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1041);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1039);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1041);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Elegy.");
			            ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1048);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1052);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1048);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1052);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Flash.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1070);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1072);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1070);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1072);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Jester.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1057);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1063);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1057);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1063);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Stratum.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1031);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1030);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1031);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1030);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Sultan.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1093);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1095);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1093);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1095);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Wheel Arch X-Flow Sideskirts to your Uranus.");
					    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to Wheel Arch Angels type cars.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
		            }
		    }
		    case 2:
			{
                 if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536 ||
	               GetVehicleModel(GetPlayerVehicleID(playerid)) == 576 ||
		 	       GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
                   {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1102);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1133);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1102);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1133);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Strip Sideskirts to your Savanna.");
	    		        ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
	                }
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
	                else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1134);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1137);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1134);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1137);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Strip Sideskirts to your Tornado.");
	    		        ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
	                }
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
	                else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
					{
		            if(GetPlayerCash(playerid) >= 1000)
                    {
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1108);
					    AddVehicleComponent(GetPlayerVehicleID(playerid),1107);
					    OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1108);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1107);
		            	GivePlayerCash(playerid,-1000);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Strip Sideskirts to your Blade.");
	                    ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
	                }
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Savanna, Tornado or Blade.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
	                }
	        }
	  	    case 3:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			    {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			        {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1122);
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1101);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1122);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1101);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Flames Sideskirts to your Locos Remington.");
			            ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Remington.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
			        }
			}
			case 4:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			    {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			        {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1106);
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1124);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1106);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1124);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Arches Sideskirts to your Remington.");
			            ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Remington.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
			        }
			}
			case 5:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)

			    {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			        {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1118);
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1120);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1118);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1120);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Trim Sideskirts to your Slamvan.");
			            ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Slamvan.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
			        }
			}
			case 6:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)

			    {
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			        {
		            if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1119);
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1121);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1119);
		            	OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1121);
		            	GivePlayerCash(playerid,-1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Wheelcovers to your Slamvan.");
			            ShowPlayerDialog(playerid, TUNE_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Sideskirts List", "{FFFFFF}Item: Wheel Arch Alien Sideskirts - Price: $1K\nItem: Wheel Arch X-Flow Sideskirts - Price: $1K\nItem: Locos Low Chrome Strip - Price: $1K\nItem: Locos Low Chrome Flames - Price: $1K\nItem: Locos Low Chrome Arches - Price: $1K\nItem: Locos Low Chrome Trim - Price: $1K\nItem: Locos Low Wheelcovers - Price: $1K\nBack", "Select", "Cancel");
					}
                    else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Slamvan.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
			        }
			}
			case 7:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");}
            }
         }
   }

   case TUNE_MENU9:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)

			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1100);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            GivePlayerCash(playerid,-1000);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Grill to your Remington.");
			            ShowPlayerDialog(playerid, TUNE_MENU9, DIALOG_STYLE_LIST, "{FFFFFF}Bullbars List", "{FFFFFF}Item: Locos Low Chrome Grill - Price: $1K\nItem: Locos Low Chrome Bars - Price: $1K\nItem: Locos Low Chrome Lights - Price: $1K\nItem: Locos Low Chrome Bullbar - Price: $1K\nBack", "Select", "Cancel");
			        }
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Remington.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
			case 1:
			{
                 if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)

			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1123);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1123);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            GivePlayerCash(playerid,-1000);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Bars to your Remington.");
			            ShowPlayerDialog(playerid, TUNE_MENU9, DIALOG_STYLE_LIST, "{FFFFFF}Bullbars List", "{FFFFFF}Item: Locos Low Chrome Grill - Price: $1K\nItem: Locos Low Chrome Bars - Price: $1K\nItem: Locos Low Chrome Lights - Price: $1K\nItem: Locos Low Chrome Bullbar - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Remington.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
			case 2:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)

			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1125);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1125);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            GivePlayerCash(playerid,-1000);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Lights to your Remington.");
			            ShowPlayerDialog(playerid, TUNE_MENU9, DIALOG_STYLE_LIST, "{FFFFFF}Bullbars List", "{FFFFFF}Item: Locos Low Chrome Grill - Price: $1K\nItem: Locos Low Chrome Bars - Price: $1K\nItem: Locos Low Chrome Lights - Price: $1K\nItem: Locos Low Chrome Bullbar - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Remington.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
			case 3:
			{
                if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)

			    {

			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 535)
			        {
					if(GetPlayerCash(playerid) >= 1000)
                    {
			            AddVehicleComponent(GetPlayerVehicleID(playerid),1117);
			            OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1117);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            GivePlayerCash(playerid,-1000);
			            SendClientMessage(playerid,YELLOW,"You have added Locos Low Chrome Lights to your Slamvan.");
			            ShowPlayerDialog(playerid, TUNE_MENU9, DIALOG_STYLE_LIST, "{FFFFFF}Bullbars List", "{FFFFFF}Item: Locos Low Chrome Grill - Price: $1K\nItem: Locos Low Chrome Bars - Price: $1K\nItem: Locos Low Chrome Lights - Price: $1K\nItem: Locos Low Chrome Bullbar - Price: $1K\nBack", "Select", "Cancel");
					}
					else
			        {
			            SendClientMessage(playerid,RED,"Insufficient funds.");
			        }
			        }
					else
					{
				    SendClientMessage(playerid,RED,"You can only add this component to a Slamvan.");
					ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
					}
					}
			}
			case 4:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
       }
   }

   case TUNE_MENU10:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
			if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1025);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1025);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     GivePlayerCash(playerid,-1000);
                 SendClientMessage(playerid,YELLOW,"You have added some Offroad Wheels.");
	             ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
	        }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 1:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1074);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1074);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     GivePlayerCash(playerid,-1000);
			     SendClientMessage(playerid,YELLOW,"You have added some Mega Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 2:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

	             AddVehicleComponent(GetPlayerVehicleID(playerid),1076);
	             OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1076);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Wires Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
	        case 3:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1078);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1078);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,YELLOW,"You have added some Twist Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 4:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1081);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1081);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,YELLOW,"You have added some Groove Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 5:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

                 AddVehicleComponent(GetPlayerVehicleID(playerid),1082);
                 OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1082);
			     GivePlayerCash(playerid,-1000);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			     SendClientMessage(playerid,YELLOW,"You have added some Import Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 6:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1085);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1085);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,YELLOW,"You have added some Atomic Wheels.");
                 ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 7:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1096);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1096);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          	 SendClientMessage(playerid,YELLOW,"You have added some Ahab Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 8:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

                 AddVehicleComponent(GetPlayerVehicleID(playerid),1097);
                 OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1097);
			     GivePlayerCash(playerid,-1000);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	           	 SendClientMessage(playerid,YELLOW,"You have added some Virtual Wheels.");
                 ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 9:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

			     AddVehicleComponent(GetPlayerVehicleID(playerid),1098);
			     OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1098);
			     GivePlayerCash(playerid,-1000);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	         	 SendClientMessage(playerid,YELLOW,"You have added some Access Wheels.");
			     ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 10:
			{
                 ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
			}
			case 11:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
			}
		}
   }

   case TUNE_MENU11:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
			if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1086);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         GivePlayerCash(playerid,-1000);
		         SendClientMessage(playerid,YELLOW,"You have added a Bass Boost Stereo System.");
		         ShowPlayerDialog(playerid, TUNE_MENU11, DIALOG_STYLE_LIST, "{FFFFFF}Car Stereos List", "{FFFFFF}Item: Bass Boost - Price: $1K\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 1:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
		}
   }

   case TUNE_MENU12:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
		         ShowPlayerDialog(playerid, TUNE_MENU14, DIALOG_STYLE_LIST, "{FFFFFF}Hydraulics", "{FFFFFF}Item: Hydraulics - Price: $1K\nBack", "Select", "Cancel");
			}
			case 1:
			{
		         ShowPlayerDialog(playerid, TUNE_MENU15, DIALOG_STYLE_LIST, "{FFFFFF}NOS", "{FFFFFF}Item: Nitro x2 - Price: $1K\nNitro x5 - Price: $2K\nNitro x10 - Price: $3K\nBack", "Select", "Cancel");
			}
			case 2:
			{
		         ShowPlayerDialog(playerid, TUNE_MENU16, DIALOG_STYLE_LIST, "{FFFFFF}Neons", "{FFFFFF}Item: Blue Neons - Price: $5K\nItem: Red Neons - Price: $5K\nItem: Green Neons - Price: $5K\nItem: Yellow Neons - Price: $5K\nItem: Pink Neons - Price: $5K\nRemove Neons\nBack", "Select", "Cancel");
			}
			case 3:
            {
                 ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
            }
            }
		}
	}

   case TUNE_MENU13:
   {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1084);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1084);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Trance Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 1:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1073);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Shadow Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 2:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1075);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1075);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Rimshine Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 3:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1077);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1077);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Classic Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 4:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1079);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Cutter Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 5:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1080);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1080);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Switch Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 6:
            {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1083);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1083);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added some Dollar Wheels.");
		         ShowPlayerDialog(playerid, TUNE_MENU13, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 2", "{FFFFFF}Item: Trance - Price: $1K\nItem: Shadow - Price: $1K\nItem: Rimshine - Price: $1K\nItem: Classic - Price: $1K\nItem: Cutter - Price: $1K\nItem: Switch - Price: $1K\nItem: Dollar - Price: $1K\nBack", "Select", "Cancel");
            }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
            case 7:
            {
		         ShowPlayerDialog(playerid, TUNE_MENU10, DIALOG_STYLE_LIST, "{FFFFFF}Wheels List - 1", "{FFFFFF}Item: Offroad - Price: $1K\nItem: Mega - Price: $1K\nItem: Wires - Price: $1K\nItem: Twist - Price: $1K\nItem: Grove - Price: $1K\nItem: Import - Price: $1K\nItem: Atomic - Price: $1K\nItem: Ahab - Price: $1K\nItem: Virtual - Price: $1K\nItem: Access - Price: $1K\nNext\nBack", "Select", "Cancel");
            }
            }
		}
    }
    case TUNE_MENU14:
    {
		if(response)
		{
			switch(listitem)
            {
		    case 0:
		    {
		    if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1087);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1087);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         GivePlayerCash(playerid,-1000);
		         SendClientMessage(playerid,YELLOW,"You have added Hydraulics to your car for $1K.");
		         ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 1:
		    {
			    ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			}
		}
	}

	case TUNE_MENU15:
    {
		if(response)
		{
			switch(listitem)
            {
            case 0:
			{
			if(GetPlayerCash(playerid) >= 1000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1009);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1009);
		         GivePlayerCash(playerid,-1000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added Nitros x2 to your car for $1K.");
		         ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 1:
			{
			if(GetPlayerCash(playerid) >= 2000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1008);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1008);
		         GivePlayerCash(playerid,-2000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added Nitros x5 to your car for $2K.");
		         ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
		    case 2:
			{
			if(GetPlayerCash(playerid) >= 3000)
            {

		         AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
		         OnVehicleMod(playerid,GetPlayerVehicleID(playerid),1010);
		         GivePlayerCash(playerid,-3000);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,YELLOW,"You have added Nitros x10 to your car for $3K.");
		         ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 3:
		    {
			    ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 2", "{FFFFFF}Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			}
		}
	}
	case TUNE_MENU16:
    {
		if(response)
		{
			switch(listitem)
            {
            case 0:
			{
			if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only buy neons for owned vehicles.");
			if(GetPlayerCash(playerid) >= 5000)
			{
			    DestroyNeons(GetPlayerVehicleID(playerid));
		    	blueneons[GetPlayerVehicleID(playerid)] = CreateObject(18648,0,0,0,0,0,0);
            	blueneons2[GetPlayerVehicleID(playerid)] = CreateObject(18648,0,0,0,0,0,0);
            	AttachObjectToVehicle(blueneons[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(blueneons2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vNeons] = BLUE_NEONS;
                GivePlayerCash(playerid,-5000);
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
                SendClientMessage(playerid, YELLOW, "You have added Blue Neons to your car for $5K.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
		    }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 1:
			{
			if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only buy neons for owned vehicles.");
			if(GetPlayerCash(playerid) >= 5000)
			{
			    DestroyNeons(GetPlayerVehicleID(playerid));
		    	redneons[GetPlayerVehicleID(playerid)] = CreateObject(18647,0,0,0,0,0,0);
            	redneons2[GetPlayerVehicleID(playerid)] = CreateObject(18647,0,0,0,0,0,0);
            	AttachObjectToVehicle(redneons[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(redneons2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vNeons] = RED_NEONS;
                GivePlayerCash(playerid,-5000);
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
                SendClientMessage(playerid, YELLOW, "You have added Red Neons to your car for $5K.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
		    }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 2:
			{
			if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only buy neons for owned vehicles.");
			if(GetPlayerCash(playerid) >= 5000)
			{
			    DestroyNeons(GetPlayerVehicleID(playerid));
		    	greenneons[GetPlayerVehicleID(playerid)] = CreateObject(18649,0,0,0,0,0,0);
      			greenneons2[GetPlayerVehicleID(playerid)] = CreateObject(18649,0,0,0,0,0,0);
            	AttachObjectToVehicle(greenneons[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(greenneons2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vNeons] = GREEN_NEONS;
                GivePlayerCash(playerid,-5000);
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
                SendClientMessage(playerid, YELLOW, "You have added Green Neons to your car for $5K.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
		    }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 3:
			{
			if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only buy neons for owned vehicles.");
			if(GetPlayerCash(playerid) >= 5000)
			{
			    DestroyNeons(GetPlayerVehicleID(playerid));
		    	yellowneons[GetPlayerVehicleID(playerid)] = CreateObject(18650,0,0,0,0,0,0);
       			yellowneons2[GetPlayerVehicleID(playerid)] = CreateObject(18650,0,0,0,0,0,0);
            	AttachObjectToVehicle(yellowneons[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(yellowneons2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vNeons] = YELLOW_NEONS;
                GivePlayerCash(playerid,-5000);
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
                SendClientMessage(playerid, YELLOW, "You have added Yellow Neons to your car for $5K.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
		    }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 4:
			{
			if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only buy neons for owned vehicles.");
			if(GetPlayerCash(playerid) >= 5000)
			{
			    DestroyNeons(GetPlayerVehicleID(playerid));
		    	pinkneons[GetPlayerVehicleID(playerid)] = CreateObject(18651,0,0,0,0,0,0);
          		pinkneons2[GetPlayerVehicleID(playerid)] = CreateObject(18651,0,0,0,0,0,0);
            	AttachObjectToVehicle(pinkneons[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(pinkneons2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
				VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vNeons] = PINK_NEONS;
                GivePlayerCash(playerid,-5000);
                PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
                SendClientMessage(playerid, YELLOW, "You have added Pink Neons to your car for $5K.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
		    }
			else
			{
			     SendClientMessage(playerid,RED,"Insufficient funds.");
			}
			}
			case 5:
			{
				if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0) return SendClientMessage(playerid, RED, "You can only remove neons from owned vehicles.");
			    DestroyNeons(GetPlayerVehicleID(playerid));
				SaveVehicleStats(IsShopVehicle[GetPlayerVehicleID(playerid)]);
			    SendClientMessage(playerid, YELLOW, "Neons Removed.");
				ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
			}
			case 6:
		    {
			    ShowPlayerDialog(playerid, TUNE_MENU12, DIALOG_STYLE_LIST, "Tune Menu - 2", "Hydraulics\nNOS\nNeons\nBack", "Select", "Cancel");
			}
			}
		}
    }
    case PANEL_MENU:
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
		        {
		            ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapons", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
		        }
		        case 1:
		        {
                    ShowPlayerDialog(playerid,VEHICLE_MENU,DIALOG_STYLE_INPUT,"{FFFFFF}Vehicles","{FFFFFF}Enter the name of any vehicle below:","Spawn","Cancel");
		        }
		        case 2:
		        {
		            ShowPlayerDialog(playerid, TELE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Teleports", "{FFFFFF}Exterior Locations\nInterior Locations\nAirports", "Select", "Cancel");
		        }
		        case 3:
		        {
		            ShowPlayerDialog(playerid,SKIN_MENU,DIALOG_STYLE_INPUT,"{FFFFFF}Skins","{FFFFFF}Enter a skin id from 0-299:","Set","Cancel");
		        }
		        case 4:
		        {
		            ShowPlayerDialog(playerid, TUNE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Tune Menu - 1","{FFFFFF}Paint Jobs\nColors\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSideskirts\nBullbars\nWheels\nCar Stereos\nNext", "Select", "Cancel");
                }
				case 5:
		        {
ShowPlayerDialog(playerid,EVENTS_HOWTO, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}ACnR Events","{FFFFFF}Commands: /(begin/finish)event /(dis)armevent /eventvehs /stopjoins /countdown\n\nOfficial ACnR Events:\n\n- 'Hide'Or'Die' - Players given some time to hide in a open area/building,\nThen admins find/kill them all,Last one standing wins 200k.\n\n- 'Kill'That'Admin' - Admins arm up with bodyguards and announce random amounts on their heads,\nEach admin kill rises the win amount (ACnR Signature event)", "Ok", "");
                }
                case 6:
                {
                    ShowPlayerDialog(playerid, OBJECTS_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Objects", "{FFFFFF}Commands: /(create/cancel/set/attach/detach)object /objlist\n/move(object/up/down/north/south/east/west) /rotate(x/y/z)", "Ok", "");
                }
                case 7:
                {
                    ShowPlayerDialog(playerid, ACMDS_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR Admin Commands",
"{FFFFFF}Lvl4: /(h/b)cmds /set(score/level/vip/helper/hhelper/builder)\nLvl3: /restart /(ban)ip /set(wanted/health/armour/cash/skin) /get\nLvl2: /aweaps /car /force /jetpack /ban /afix /events /god(car) /goto /explode /ip /flip /akill /give(gun/cash)\nLvl1: /goto(at/cells) /(un)mute /nmute /(r)warn /kick /ann /asay /dcar /clearchat /addnos /disarm\nLvl1: /duty /a /weaps /(spec)off /cage /(un)freeze /ap /aranks /mutelist /(save/load)pos /exitat /plus /minus /undercover",
 "Ok", "");
                }
		    }
		}
    }
    case TELE_MENU:
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
		        {
                    ShowPlayerDialog(playerid, TELE_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Exterior Locations", "{FFFFFF}Fort Carson\nPrickle Pine\nPalamino Creek\nGrove Street\nDoherty\nCome-A-Lot\nTemple\nMt Chilliad\nSanta Maria Beach\nIdlewood\nOcean Flats\nSF Aircraft Carrier\nArea 69\nLiberty City\n4 Dragons Casino\nCaligulas Casino\nLVPD\nLas Venturas Square\nKACC Military Fuels\nBlackfield\nBayside", "Select", "Cancel");
                }
                case 1:
		        {
                    ShowPlayerDialog(playerid, TELE_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Interior Locations", "{FFFFFF}Kickstart Arena\nLas Venturas Arena\nJizzys Pleasure Dome\nJefferson Motel\nZero's RC Battlefield\nShamal Passenger Plane\nAdromoda Cargo Plane", "Select", "Cancel");
                }
                case 2:
		        {
                    ShowPlayerDialog(playerid, TELE_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}Airports", "{FFFFFF}Los Santos International Airport\nSan Fierro Easter Basin Airport\nLas Venturas Airport\nAbandoned Airfield, Verdant Meadows", "Select", "Cancel");
                }
            }
        }
    }
    case TELE_MENU1:
    {
        if(response)
		{
	        switch(listitem)
            {
            case 0:
		    {
		        SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-361.10, 1185.23, 20.49);
                SendClientMessage(playerid, LIGHTGREEN ,"Fort Carson, Las Venturas.");
            }
            case 1:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,1293.61, 2529.54, 11.42);
                SendClientMessage(playerid, LIGHTGREEN ,"Prickle Pine, Las Venturas.");
            }
            case 2:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,2231.64, 156.93, 27.63);
                SendClientMessage(playerid, LIGHTGREEN ,"Palomino Creek, Red County.");
            }
            case 3:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,2505.64, -1683.72, 14.25);
                SendClientMessage(playerid, LIGHTGREEN ,"Grove Street, Los Santos.");
            }
            case 4:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-1935.77, 228.79, 34.16);
                SendClientMessage(playerid, LIGHTGREEN ,"Doherty, San Fierro.");
            }
            case 5:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,387.55, 1035.70, 11.56);
                SendClientMessage(playerid, LIGHTGREEN ,"Come-A-Lot, Las Venturas.");
            }
            case 6:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,1041.26, -1036.77, 32.48);
                SendClientMessage(playerid, LIGHTGREEN ,"Temple, Los Santos.");
            }
            case 7:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-2234.2651,-1736.5273,480.8152);
                SendClientMessage(playerid, LIGHTGREEN ,"Mt Chilliad, Flint County.");
            }
            case 8:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,322.65, -1780.30, 5.55);
                SendClientMessage(playerid, LIGHTGREEN ,"Santa Maria Beach, Los Santos.");
            }
            case 9:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,2078.44, -1831.44, 14.13);
                SendClientMessage(playerid, LIGHTGREEN ,"Idlewood, Los Santos.");
            }
            case 10:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-2707.48, 218.65, 4.93);
                SendClientMessage(playerid, LIGHTGREEN ,"Ocean Flats, San Fierro.");
            }
            case 11:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-1347.7941,497.3724,18.2344);
                SendClientMessage(playerid, LIGHTGREEN ,"Aircraft Carrier, San Fierro.");
            }
            case 12:
		    {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,283.4610,2036.9712,17.6406);
                SendClientMessage(playerid, LIGHTGREEN ,"Area 69, Las Venturas.");
            }
            case 13:
		    {
                SetPlayerInterior(playerid, 1);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,-729.276000,503.086944,1371.971801);
                SendClientMessage(playerid, LIGHTGREEN ,"Liberty City, LC.");
            }
            case 14:
		    {
		        SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid,2028.1781,1008.2630,10.8203);
               	SendClientMessage(playerid, LIGHTGREEN, "4 Dragons Casino, Las Venturas.");
		    }
		    case 15:
		    {
		        SetPlayerInterior(playerid, 0);
         		SetPlayerVirtualWorld(playerid, 0);
              	SetPlayerPos(playerid,2183.7783,1678.1868,11.0807);
              	SendClientMessage(playerid, LIGHTGREEN, "Caligulas Casino, Las Venturas.");
		    }
		    case 16:
		    {
		      	SetPlayerInterior(playerid, 0);
              	SetPlayerVirtualWorld(playerid, 0);
               	SetPlayerPos(playerid,2290.2549,2424.4880,10.8203);
              	SendClientMessage(playerid, LIGHTGREEN, "LVPD, Las Venturas.");
		    }
		    case 17:
		    {
		      	SetPlayerInterior(playerid, 0);
              	SetPlayerVirtualWorld(playerid, 0);
               	SetPlayerPos(playerid,2298.8076,2352.6245,10.8203);
              	SendClientMessage(playerid, LIGHTGREEN, "Las Venturas Square, Las Venturas.");
		    }
		    case 18:
		    {
		      	SetPlayerInterior(playerid, 0);
              	SetPlayerVirtualWorld(playerid, 0);
              	SetPlayerPos(playerid,2619.0615,2720.9163,36.5386);
             	SendClientMessage(playerid, LIGHTGREEN, "KACC Military Fuels, Las Venturas.");
			}
		    case 19:
		    {
      			SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid, 0);
               	SetPlayerPos(playerid,1129.4067,1311.8624,10.8203);
             	SendClientMessage(playerid, LIGHTGREEN, "Blackfield, Las Venturas.");
		    }
		    case 20:
		    {
      			SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid, 0);
               	SetPlayerPos(playerid,-2437.4387,2236.8357,4.9844);
             	SendClientMessage(playerid, LIGHTGREEN, "Bayside, Las Venturas.");
		    }
            }
		}
	}
	case TELE_MENU2:
    {
        if(response)
        {
	        switch(listitem)
            {
                case 0:
		        {
                    SetPlayerInterior(playerid, 14);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,-1410.72, 1591.16, 1052.53);
                    SendClientMessage(playerid, LIGHTGREEN ,"Kickstart Arena.");
		        }
		        case 1:
		        {
					IsPlayerInArena{playerid} = true;
		            SetPlayerInterior(playerid, 15);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,-1394.20, 987.62, 1023.96);
                    SendClientMessage(playerid, LIGHTGREEN ,"Las Venturas Arena.");
					SendClientMessage(playerid, WHITE, "Welcome to Las Venturas Arena, use /exitarena at anytime to leave.");
		        }
		        case 2:
		        {
                    SetPlayerInterior(playerid, 3);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,-2660.6185, 1426.8320, 907.3626);
                    SendClientMessage(playerid, LIGHTGREEN ,"Jizzys Pleasure Dome, San Fierro.");
		        }
		        case 3:
		        {
                    SetPlayerInterior(playerid, 15);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,2220.26, -1148.01, 1025.80);
                    SendClientMessage(playerid, LIGHTGREEN ,"Jefferson Motel, Los Santos.");
		        }
		        case 4:
		        {
                    SetPlayerInterior(playerid, 10);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,-975.5766, 1061.1312, 1345.6719);
                    SendClientMessage(playerid, LIGHTGREEN ,"Zero's RC Battlefield.");
		        }
		        case 5:
		        {
                    SetPlayerInterior(playerid, 1);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,1.6127, 34.7411, 1199.0);
                    SendClientMessage(playerid, LIGHTGREEN ,"Shamal Passenger Plane.");
		        }
		        case 6:
		        {
                    SetPlayerInterior(playerid, 9);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,315.48, 984.13, 1959.11);
                    SendClientMessage(playerid, LIGHTGREEN ,"Adromoda Cargo Plane.");
		        }
	        }
	    }
	}
	case TELE_MENU3:
    {
        if(response)
        {
	        switch(listitem)
            {
                case 0:
		        {
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,1881.1639,-2390.3616,13.5547);
                    SendClientMessage(playerid, LIGHTGREEN ,"Los Santos International Airport.");
		        }
		        case 1:
		        {
		            SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,-1286.5164,57.1271,14.1484);
                    SendClientMessage(playerid, LIGHTGREEN ,"San Fierro, Easter Basin Airport.");
		        }
		        case 2:
		        {
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,1319.2031,1250.7645,10.8203);
                    SendClientMessage(playerid, LIGHTGREEN ,"Las Venturas Airport.");
		        }
		        case 3:
		        {
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    SetPlayerPos(playerid,411.2631,2533.6057,19.1484);
                    SendClientMessage(playerid, LIGHTGREEN ,"Abandoned Airport, Verdant Meadows.");
		        }
	        }
	    }
	}
    case VEHICLE_MENU:
    {
        new Float:x, Float:y, Float:z, string[150];
        new v = GetVehicleIDFromModelName(inputtext);
        if(response)
        if(v > 400 && v < 611)
	    {
            new Float:a;
		    GetPlayerFacingAngle(playerid, a);
		    GetPlayerPos(playerid, x, y, z);
		    if(IsPlayerInAnyVehicle(playerid) == 1)
		    {
			    GetXYPosInFrontOfPlayer(playerid, x, y, 8);
		    }
		    else
		    {
		        GetXYPosInFrontOfPlayer(playerid, x, y, 5);
		    }
		    new pVeh = CreateVehicle(v, x, y, z, a+90, -1, -1, -1);
		    LinkVehicleToInterior(pVeh, GetPlayerInterior(playerid));
		    SetVehicleVirtualWorld(pVeh, GetPlayerVirtualWorld(playerid));
		    format(string, sizeof(string), "%s spawned.", GlobalVehicleNames[v - 400]);
	        SendClientMessage(playerid, YELLOW, string);
        }
        else
        {
            SendClientMessage(playerid, RED, "Invalid vehicle name.");
            ShowPlayerDialog(playerid,VEHICLE_MENU,DIALOG_STYLE_INPUT,"{FFFFFF}Vehicles","{FFFFFF}Enter the name of any vehicle below:", "Spawn", "Cancel");
        }
    }
    case SKIN_MENU:
    {
        if(response)
        if(IsNumeric(inputtext))
        {
            if(CheckValidSkinID(strval(inputtext)))
            {
                SetPlayerSkin(playerid, strval(inputtext));
                new string[50];
                format(string, sizeof(string), "{FFFFFF}> Skin id set to %s", (inputtext));
		        SendClientMessage(playerid, 0x0, string);
            }
            else
            {
                SendClientMessage(playerid, RED, "Invalid skin id.");
                ShowPlayerDialog(playerid,SKIN_MENU,DIALOG_STYLE_INPUT,"{FFFFFF}Skin","{FFFFFF}Enter a skin id from 0-299:", "Set", "Cancel");
            }
		}
    }
    case WEAPON_MENU:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU1, DIALOG_STYLE_LIST, "{FFFFFF}Handguns", "{FFFFFF}9mm\nSilenced 9mm\nDesert Eagle", "Select", "Cancel");
        }
        case 1:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU2, DIALOG_STYLE_LIST, "{FFFFFF}Shotguns", "{FFFFFF}Shotgun\nSawnoff Shotgun\nCombat Shotgun", "Select", "Cancel");
		}
        case 2:
		{
		    ShowPlayerDialog(playerid, WEAPON_MENU3, DIALOG_STYLE_LIST, "{FFFFFF}SMG's", "{FFFFFF}Tec 9\nMicro SMG\nMP5", "Select", "Cancel");
        }
		case 3:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU4, DIALOG_STYLE_LIST, "{FFFFFF}Assault Rifles", "{FFFFFF}AK47\nM4", "Select", "Cancel");
        }
        case 4:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU5, DIALOG_STYLE_LIST, "{FFFFFF}Rifles", "{FFFFFF}Country Rifle\nSniper Rifle", "Select", "Cancel");
        }
        case 5:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU6, DIALOG_STYLE_LIST, "{FFFFFF}Hand Thrown", "{FFFFFF}Grenades\nTear Gas\nMolotov Cocktail", "Select", "Cancel");
        }
        case 6:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU7, DIALOG_STYLE_LIST, "{FFFFFF}Hand Held", "{FFFFFF}Chainsaw\nKnife\nBaseball Bat\nGolf Club\nNight Stick\nShovel\nPool Cue\nKatana\nPurple Dildo\nSmall White Vibrator\nLarge White Vibrator\nSilver Vibrator\nFlowers\nCane\nSatchel\nDetonator\nSpraycan\nFire Extinguisher\nCamera", "Select", "Cancel");
        }
        case 7:
		{
            ShowPlayerDialog(playerid, WEAPON_MENU8, DIALOG_STYLE_LIST, "{FFFFFF}Heavy Weapons", "{FFFFFF}RPG\nHeat Seaker RPG\nFlamethrower\nMinigun", "Select", "Cancel");
        }
        }
	}
    case WEAPON_MENU1:
    {
		if(response)
	    switch(listitem)
        {
        case 0:
		{
            GivePlayerWeapon(playerid,22,99999);
            ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
		case 1:
		{
	        GivePlayerWeapon(playerid,23,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
		case 2:
		{
	        GivePlayerWeapon(playerid,24,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU2:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        GivePlayerWeapon(playerid,25,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
	        GivePlayerWeapon(playerid,26,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 2:
		{
	        GivePlayerWeapon(playerid,27,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU3:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        GivePlayerWeapon(playerid,32,99999);
            ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
	        GivePlayerWeapon(playerid,28,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 2:
		{
	        GivePlayerWeapon(playerid,29,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU4:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
	        GivePlayerWeapon(playerid,30,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
        {
	        GivePlayerWeapon(playerid,31,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
		}
		}
    }
    case WEAPON_MENU5:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
			GivePlayerWeapon(playerid,33,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
			GivePlayerWeapon(playerid,34,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU6:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
			GivePlayerWeapon(playerid,16,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
			GivePlayerWeapon(playerid,17,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 2:
		{
			GivePlayerWeapon(playerid,18,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU7:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
			GivePlayerWeapon(playerid,9,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
			GivePlayerWeapon(playerid,4,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 2:
		{
			GivePlayerWeapon(playerid,5,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 3:
		{
			GivePlayerWeapon(playerid,2,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 4:
		{
			GivePlayerWeapon(playerid,3,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 5:
		{
			GivePlayerWeapon(playerid,6,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 6:
		{
			GivePlayerWeapon(playerid,7,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 7:
		{
			GivePlayerWeapon(playerid,8,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 8:
		{
			GivePlayerWeapon(playerid,10,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 9:
		{
			GivePlayerWeapon(playerid,11,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 10:
		{
			GivePlayerWeapon(playerid,12,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 11:
		{
			GivePlayerWeapon(playerid,13,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 12:
		{
			GivePlayerWeapon(playerid,14,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 13:
		{
			GivePlayerWeapon(playerid,15,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 14:
		{
			GivePlayerWeapon(playerid,39,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 15:
		{
			GivePlayerWeapon(playerid,40,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 16:
		{
			GivePlayerWeapon(playerid,41,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 17:
		{
			GivePlayerWeapon(playerid,42,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 18:
		{
			GivePlayerWeapon(playerid,43,1);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    case WEAPON_MENU8:
    {
        if(response)
	    switch(listitem)
        {
        case 0:
		{
			GivePlayerWeapon(playerid,35,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 1:
		{
			GivePlayerWeapon(playerid,36,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 2:
		{
			GivePlayerWeapon(playerid,37,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        case 3:
		{
			GivePlayerWeapon(playerid,38,99999);
	        ShowPlayerDialog(playerid, WEAPON_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Weapon Menu", "{FFFFFF}Handguns\nShotguns\nSMG's\nAssault Rifles\nRifles\nHand Thrown\nHand Held\nHeavy Weapons", "Select", "Cancel");
        }
        }
    }
    }
    return 1;
}

public SkydiveInteriorChanger(playerid)
{
	if(!IsPlayerConnected(playerid))
	{
	    KillTimer(skytimer{playerid});
	}
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, 315.745086, 984.969299, 1958.919067))
	{
	    SetPlayerInterior(playerid, 0);
	    KillTimer(skytimer{playerid});
	}
	return 1;
}

stock GetPlayerIDFromName(const playername[], partofname=0)
{
    new i;
    new playername1[64];
    for (i=0;i<MAX_PLAYERS;i++)
    {
        if (IsPlayerConnected(i))
        {
            GetPlayerName(i,playername1,sizeof(playername1));
            if (strcmp(playername1,playername,true)==0)
            {
                return i;
            }
        }
    }
    new correctsigns_userid=-1;
    new tmpuname[128];
    new hasmultiple=-1;
    if(partofname)
    {
        for (i=0;i<MAX_PLAYERS;i++)
        {
            if (IsPlayerConnected(i))
            {
                GetPlayerName(i,tmpuname,sizeof(tmpuname));

                if(!strfind(tmpuname,playername1[partofname],true, 0))
                {
                    hasmultiple++;
                    correctsigns_userid=i;
                }
                if (hasmultiple>0)
                {
                    return -2;
                }
            }
        }
    }
    return correctsigns_userid;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);//Credits to MP2
	if(GetPlayerAnimationIndex(playerid) == 1660 || GetPlayerAnimationIndex(playerid) == 1661) { GivePlayerCash(playerid, -1); return 1; }//Drink machine/s
	if(IsPlayerUsingAnim{playerid} == true && newkeys == KEY_SECONDARY_ATTACK)
    {
        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_NONE)
        {
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
    	ClearAnimations(playerid);
    	IsPlayerUsingAnim{playerid} = false;
    }
    if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
    {
        if(InsideCmdMenu[0][playerid] == 1 || InsideCmdMenu[1][playerid] == 1 || InsideCmdMenu[2][playerid] == 1)
        {
			for(new i = 0; i < 28; i++)
			{
				PlayerTextDrawHide(playerid, CmdMenuTD[i]);
			}
			InsideCmdMenu[0][playerid] = 0;
			InsideCmdMenu[1][playerid] = 0;
			InsideCmdMenu[2][playerid] = 0;
		}
    }
    if ((newkeys & KEY_LOOK_BEHIND) && !(oldkeys & KEY_LOOK_BEHIND))
    {
        if(InsideCmdMenu[0][playerid] == 1 || InsideCmdMenu[1][playerid] == 1 || InsideCmdMenu[2][playerid] == 1)
        {
			for(new i = 0; i < 28; i++)
			{
				PlayerTextDrawHide(playerid, CmdMenuTD[i]);
			}
			for(new i = 0; i < 10; i++)
			{
				InsideCmdMenu[i][playerid] = 0;
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 231.8503, 159.9728, 1003.0234))
	    {
	        SendClientMessage(playerid,0xFFFFFFFF,"[BOT]OfficerDurland: Welcome to the Las Venturas Police Department. How can I help you today?");
	    }
    }
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    GetPlayerLastVehicleID[playerid] = vehicleid;
	new string[150];
	if(!ispassenger)
	{
	    if(IsShopVehicle[vehicleid] != -1)
		{
		    if(strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[vehicleid]][vOwner], false))
		    {
		        format(string, sizeof(string), "This vehicle is owned by %s.", VehicleInfo[IsShopVehicle[vehicleid]][vOwner]);
		        SendClientMessage(playerid, RED, string);
		    }
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574) // Street Sweeper
	{
	    SendClientMessage(playerid, 0xFFFFFFFF, "You've left the sweeper and are no longer earning money.");
	    GivePlayerCash(playerid, GainedMoney * 19);
	    GainedMoney = 0;
	}
    return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_PASSENGER && HasBeenCuffed{playerid} == true)
	{
		RemovePlayerFromVehicle(playerid);
		return 1;
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574) // Street Sweeper
	{
	    if(newstate == PLAYER_STATE_DRIVER)
	    {
	    	SendClientMessage(playerid, 0xFFFFFFFF, "Help keep the streets clean, Drive Around and you can earn money.");
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(IsABoat(GetPlayerVehicleID(playerid)))
		{
	    	GameTextForPlayer(playerid, "Press ~r~~k~~TOGGLE_SUBMISSIONS~ ~w~or type /fish to begin fishing.", 5000, 5);
	    }
		if(IsATruckerCar(GetPlayerVehicleID(playerid)))
		{
			GameTextForPlayer(playerid, "You can start a trucker mission by pressing ~r~~k~~TOGGLE_SUBMISSIONS~~w~.", 5000, 5);
		}
	    SendClientMessage(playerid, COLOR_WHITE, "Type {00AAFF}/vehhelp{FFFFFF} or {00AAFF}/vh{FFFFFF} to see vehicle related commands.");
	}
	if(IsPlayerBeingSpectated{playerid} == true && PlayerBeingSpectatedBy[playerid] != -1)
	{
	    if(IsAdminSpectating{PlayerBeingSpectatedBy[playerid]} == true && SpecInfo[PlayerBeingSpectatedBy[playerid]][IsSpectating] == playerid)
	    {
    		if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    		{
    		    TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], true);
        		SetPlayerInterior(PlayerBeingSpectatedBy[playerid], GetPlayerInterior(playerid));
        		SetPlayerVirtualWorld(PlayerBeingSpectatedBy[playerid], GetPlayerVirtualWorld(playerid));
        		PlayerSpectateVehicle(PlayerBeingSpectatedBy[playerid], GetPlayerVehicleID(playerid));
        		return 1;
    		}
    		else if(newstate == PLAYER_STATE_ONFOOT)
    		{
    		    TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], true);
        		SetPlayerInterior(PlayerBeingSpectatedBy[playerid], GetPlayerInterior(playerid));
        		SetPlayerVirtualWorld(PlayerBeingSpectatedBy[playerid], GetPlayerVirtualWorld(playerid));
        		PlayerSpectatePlayer(PlayerBeingSpectatedBy[playerid], playerid);
        		return 1;
    		}
	    }
	}
    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
        case 601, 598, 427, 523, 497, 421:
        {
			if(GetTeam{playerid} == CLASS_CIV && newstate == PLAYER_STATE_DRIVER)
			{
			    if(GetPlayerLastVehicleID[playerid] != GetPlayerVehicleID(playerid))
			    {
	                new current_zone;
	        		current_zone = Player_Zone[playerid];
					new string[150];
		            format(string,sizeof(string),"[DISPATCH]: Suspect %s (%d) has just stolen a law enforcement vehicle at %s", GetPlayerNameEx(playerid) ,playerid, ZoneNames[current_zone][zone_name]);
	                CopRadio(BLUE, string);
	                SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid) + 5);
	                SendClientMessage(playerid, RED, "You've commited a crime (Law enforcement vehicle theft). Your wanted level has been increased.");
	        		return 1;
        		}
			}
        }
        case 490:
        {
			if(GetTeam{playerid} != CLASS_FBI && newstate == PLAYER_STATE_DRIVER)
			{
                SendClientMessage(playerid, RED, "Only FBI agents can drive FBI ranchers.");
		    	RemovePlayerFromVehicle(playerid);
        		return 1;
			}
        }
        case 447:
        {
			if(PlayerInfo[playerid][aLevel] == 0 && PlayerInfo[playerid][vLevel] == 0 && newstate == PLAYER_STATE_DRIVER)
			{
            	SendClientMessage(playerid, RED, "Only admins(+ VIPs) can fly sea sparrows.");
		    	RemovePlayerFromVehicle(playerid);
        		return 1;
			}
        }
        case 476, 520, 425, 470:
        {
            if(GetTeam{playerid} != CLASS_ARMY && PlayerInfo[playerid][vLevel] == 0 && newstate == PLAYER_STATE_DRIVER)
			{
            	SendClientMessage(playerid, RED, "Only Las Venturas Army Soldiers(+ VIPs) can use army vehicles.");
		    	RemovePlayerFromVehicle(playerid);
        		return 1;
			}
        }
    }
	if(GetTeam{playerid} == CLASS_CIV && newstate == PLAYER_STATE_DRIVER)
	{
        if(IsPlayerInOwnedVehicle(playerid, GetPlayerVehicleID(playerid)) == 0)
		{
    		if(GetPlayerLastVehicleID[playerid] != GetPlayerVehicleID(playerid))
    		{
	 			new current_zone;
	        	current_zone = Player_Zone[playerid];
				new string[150];
		     	format(string,sizeof(string),"[DISPATCH]: Suspect %s (%d) has just stolen a vehicle at %s", GetPlayerNameEx(playerid) ,playerid, ZoneNames[current_zone][zone_name]);
	          	CopRadio(BLUE, string);
	        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 1);
	         	SendClientMessage(playerid, RED, "You've commited a crime (Grand theft auto). Your wanted level has been increased.");
	         	return 1;
         	}
		}
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    if(IsPlayerBeingSpectated{playerid} == true && PlayerBeingSpectatedBy[playerid] != -1)
	{
	    if(IsAdminSpectating{PlayerBeingSpectatedBy[playerid]} == true && SpecInfo[PlayerBeingSpectatedBy[playerid]][IsSpectating] == playerid)
	    {
    		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
    		{
    		    TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], true);
        		SetPlayerInterior(PlayerBeingSpectatedBy[playerid], GetPlayerInterior(playerid));
        		SetPlayerVirtualWorld(PlayerBeingSpectatedBy[playerid], GetPlayerVirtualWorld(playerid));
        		PlayerSpectateVehicle(PlayerBeingSpectatedBy[playerid], GetPlayerVehicleID(playerid));
    		}
    		else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    		{
    		    TogglePlayerSpectating(PlayerBeingSpectatedBy[playerid], true);
        		SetPlayerInterior(PlayerBeingSpectatedBy[playerid], GetPlayerInterior(playerid));
        		SetPlayerVirtualWorld(PlayerBeingSpectatedBy[playerid], GetPlayerVirtualWorld(playerid));
        		PlayerSpectatePlayer(PlayerBeingSpectatedBy[playerid], playerid);
    		}
	    }
	}
	if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
	{
		SaveBankStats(playerid);
		SaveFightStats(playerid);
		SaveSettings(playerid);
		SaveSkillLevels(playerid);
    	SaveUserStats(playerid);
    	SaveDegreeStats(playerid);
 	}
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    
    if(IsLoggedIn{playerid} == 0)
	{
		SendClientMessage(playerid, RED, "You MUST be registered and logged in before you can spawn.") && KickEx(playerid);
		return 0;
	}
    else if(GetTeam{playerid} == CLASS_COPS && PlayerInfo[playerid][pWanted] >= 1 || GetPlayerWantedLevel(playerid) >= 1)
    {
		SendClientMessage(playerid, RED, "You cant spawn as Law Enforcement while you have a Wanted Level.");
      	ForceClassSelection(playerid);
      	return 0;
    }
    else if(GetTeam{playerid} == CLASS_ARMY)
    {
        if(PlayerInfo[playerid][pWanted] < 1 || GetPlayerWantedLevel(playerid) < 1)
        {
			/*if(DegreeInfo[playerid][dDefense] == 1)
    		{
				return 1;
    		}
    		else
    		{
				SendClientMessage(playerid, RED, "This command is restricted to Defense Degree.");
      			GameTextForPlayer(playerid,"~r~Restricted Class", 3000, 5);
      			ForceClassSelection(playerid);
      			return 0;
    		}*/
    		return 1;
    	}
    	else
    	{
			SendClientMessage(playerid, RED, "You cant spawn as Law Enforcement while you have a Wanted Level.");
      		ForceClassSelection(playerid);
    	}
      	return 0;
    }
    else if(GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_FBI)
    {
        if(PlayerInfo[playerid][pWanted] < 1 || GetPlayerWantedLevel(playerid) < 1)
        {
			/*if(DegreeInfo[playerid][dLaw] == 1)
    		{
				return 1;
    		}
    		else
    		{
				SendClientMessage(playerid, RED, "This command is restricted to Law Degree.");
      			GameTextForPlayer(playerid,"~r~Restricted Class", 3000, 5);
      			ForceClassSelection(playerid);
      			return 0;
    		}*/
    		return 1;
    	}
    	else
    	{
			SendClientMessage(playerid, RED, "You cant spawn as Law Enforcement while you have a Wanted Level.");
      		ForceClassSelection(playerid);
    	}
      	return 0;
    }
    else if(GetTeam{playerid} == CLASS_MEDIC)
    {
        if(PlayerInfo[playerid][pWanted] < 1 || GetPlayerWantedLevel(playerid) < 1)
        {
			/*if(DegreeInfo[playerid][dHealth] == 1)
    		{
				return 1;
    		}
    		else
    		{
				SendClientMessage(playerid, RED, "This command is restricted to Medical Degree.");
      			GameTextForPlayer(playerid,"~r~Restricted Class", 3000, 5);
      			ForceClassSelection(playerid);
      			return 0;
    		}*/
    		return 1;
    	}
    	else
    	{
			SendClientMessage(playerid, RED, "You cant spawn as a Medic while you have a Wanted Level.");
      		ForceClassSelection(playerid);
    	}
      	return 0;
    }
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	Vehicle_Armor(vehicleid);
    if(IsShopVehicle[vehicleid] == -1)
	{
	    DestroyNeons(vehicleid);
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if(IsShopVehicle[vehicleid] != -1)
	{
	    new v = IsShopVehicle[vehicleid];
	    DestroyNeons(vehicleid);
		DestroyVehicle(vehicleid);

		new newveh = CreateVehicle(VehicleInfo[v][vModel], VehicleInfo[v][vPosX], VehicleInfo[v][vPosY], VehicleInfo[v][vPosZ], VehicleInfo[v][vPosA], VehicleInfo[v][vColor1], VehicleInfo[v][vColor2], 500000);
        SetVehicleNumberPlate(newveh, VehicleInfo[v][vPlate]);
        IsShopVehicle[newveh] = v;
		SetVehicleHealth(newveh, 1000.0);
		VehicleInfo[v][vHealth] = 1000.0;

	    VehicleInfo[v][vFuel] = 75 + random(25);
		
		for(new m = 0; m < 12; m++)
		{
		    if(GetVehicleMods[v][m] > 0)
		    {
		        AddVehicleComponent(newveh, GetVehicleMods[v][m]);
			}
		}
		
		if(VehicleInfo[v][vPaintJob] != 0)
		{
			ChangeVehiclePaintjob(newveh, VehicleInfo[v][vPaintJob]);
		}

		if(VehicleInfo[v][vLocked] == 1)
		{
			SetVehicleParamsForAll(newveh, 0, 1);
        	GetVehicleParamsEx(newveh, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(newveh, engine, lights, alarm, ON, bonnet, boot, condition);
		}
		else if(VehicleInfo[v][vLocked] == 0)
		{
			SetVehicleParamsForAll(newveh, 0, 0);
        	GetVehicleParamsEx(newveh, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(newveh, engine, lights, alarm, OFF, bonnet, boot, condition);
		}

		if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == BLUE_NEONS)
		{
				blueneons[newveh] = CreateObject(18648,0,0,0,0,0,0);
            	blueneons2[newveh] = CreateObject(18648,0,0,0,0,0,0);
            	AttachObjectToVehicle(blueneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(blueneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == RED_NEONS)
		{
				redneons[newveh] = CreateObject(18647,0,0,0,0,0,0);
            	redneons2[newveh] = CreateObject(18647,0,0,0,0,0,0);
            	AttachObjectToVehicle(redneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(redneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == GREEN_NEONS)
		{
			greenneons[newveh] = CreateObject(18649,0,0,0,0,0,0);
          	greenneons2[newveh] = CreateObject(18649,0,0,0,0,0,0);
           	AttachObjectToVehicle(greenneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
         	AttachObjectToVehicle(greenneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == YELLOW_NEONS)
		{
			yellowneons[v] = CreateObject(18650,0,0,0,0,0,0);
           	yellowneons2[v] = CreateObject(18650,0,0,0,0,0,0);
           	AttachObjectToVehicle(yellowneons[v], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
           	AttachObjectToVehicle(yellowneons2[v], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
		else if(VehicleInfo[v][vNeons] != NO_NEONS && VehicleInfo[v][vNeons] == PINK_NEONS)
		{
			pinkneons[newveh] = CreateObject(18651,0,0,0,0,0,0);
          	pinkneons2[newveh] = CreateObject(18651,0,0,0,0,0,0);
         	AttachObjectToVehicle(pinkneons[newveh], newveh, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
        	AttachObjectToVehicle(pinkneons2[newveh], newveh, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
				
		GetVehicleFuel[newveh] = VehicleInfo[v][vFuel];
		GetVehicleCurrentHealth[newveh] = VehicleInfo[v][vHealth];
	}
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        foreach(Player, i)
        {
            if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
            {
                GetPlayerPos(i, posx, posy, posz);
                tempposx = (oldposx -posx);
                tempposy = (oldposy -posy);
                tempposz = (oldposz -posz);
                if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
                {
                    SendClientMessage(i, col1, string);
                }
                else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
                {
                    SendClientMessage(i, col2, string);
                }
                else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
                {
                    SendClientMessage(i, col3, string);
                }
                else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
                {
                    SendClientMessage(i, col4, string);
                }
                else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
                {
                    SendClientMessage(i, col5, string);
                }
            }
            else
            {
                SendClientMessage(i, col1, string);
            }
        }
    }
    return 1;
}

public SetVehicleParamsForAll(carid,objective,doorslocked)
{
	foreach(Player, i) { SetVehicleParamsForPlayer(carid,i,objective,doorslocked); }
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(IsShopVehicle[vehicleid] != -1)
	{
 		if(VehicleInfo[IsShopVehicle[vehicleid]][vLocked] == 1)
  		{
			SetVehicleParamsForAll(vehicleid, 0, 1);
        	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, ON, bonnet, boot, condition);
			VehicleInfo[IsShopVehicle[vehicleid]][vLocked] = 1;
		}
  		else
  		{
  			SetVehicleParamsForAll(vehicleid, 0, 0);
        	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, OFF, bonnet, boot, condition);
			VehicleInfo[IsShopVehicle[vehicleid]][vLocked] = 0;
   		}
   	}
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	if(IsShopVehicle[vehicleid] != -1)
	{
 		if(VehicleInfo[IsShopVehicle[vehicleid]][vLocked] == 1)
  		{
			SetVehicleParamsForAll(vehicleid, 0, 1);
        	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, ON, bonnet, boot, condition);
			VehicleInfo[IsShopVehicle[vehicleid]][vLocked] = 1;
		}
  		else
  		{
  			SetVehicleParamsForAll(vehicleid, 0, 0);
        	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, condition);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, OFF, bonnet, boot, condition);
			VehicleInfo[IsShopVehicle[vehicleid]][vLocked] = 0;
   		}
   	}
	return 1;
}

public AcceptCMDExpire(playerid)
{
    offer_price[playerid] = -1;
    offerer_id[playerid] = -1;
    offer_price2[playerid] = -1;
    offerer_id2[playerid] = -1;
    offer_price3[playerid] = -1;
    offerer_id3[playerid] = -1;
    offer_price4[playerid] = -1;
    offerer_id4[playerid] = -1;
    offer_price5[playerid] = -1;
    offerer_id5[playerid] = -1;
    offer_price6[playerid] = -1;
    offerer_id6[playerid] = -1;
    offer_price7[playerid] = -1;
    offerer_id7[playerid] = -1;
    offer_price8[playerid] = -1;
    offerer_id8[playerid] = -1;
    offer_price9[playerid] = -1;
    offerer_id9[playerid] = -1;
    offeredveh[playerid] = -1;
    gunbuying[playerid] = 0;
    matsbuying[playerid] = 0;
    degreebuying[playerid] = 0;
	DeletePVar(playerid, "Skill_NOSOfferer");
	DeletePVar(playerid, "Skill_NOSOfferer");
	DeletePVar(playerid, "Skill_HYDOfferer");
	DeletePVar(playerid, "Skill_HYDPrice");
	return 1;
}

public LoadHouse_data(houseid, name[], value[])
{
	INI_String("HouseOwner", HouseInfo[houseid][hOwner], 24);
	INI_String("HouseName", HouseInfo[houseid][hName], 40);
	INI_Int("HouseValue", HouseInfo[houseid][hValue]);
	INI_Float("CPOutX", HouseInfo[houseid][hCPOutX]);
	INI_Float("CPOutY", HouseInfo[houseid][hCPOutY]);
	INI_Float("CPOutZ", HouseInfo[houseid][hCPOutZ]);
	INI_Float("SpawnOutX", HouseInfo[houseid][hSPOutX]);
	INI_Float("SpawnOutY", HouseInfo[houseid][hSPOutY]);
	INI_Float("SpawnOutZ", HouseInfo[houseid][hSPOutZ]);
	INI_Float("SpawnOutAngle", HouseInfo[houseid][hSPOutA]);
	INI_Int("SpawnWorld", HouseInfo[houseid][hWorld]);
	INI_Int("SpawnInterior", HouseInfo[houseid][hSpawnInterior]);
	INI_Int("HouseInterior", HouseInfo[houseid][hHouseInterior]);
	INI_Int("QuitInHouse", HouseInfo[houseid][hQuit]);
	INI_String("KeyOwner1", HouseInfo[houseid][hKeyOwner1], 24);
	INI_String("KeyOwner2", HouseInfo[houseid][hKeyOwner2], 24);
	INI_String("KeyOwner3", HouseInfo[houseid][hKeyOwner3], 24);
	INI_String("KeyOwner4", HouseInfo[houseid][hKeyOwner4], 24);
	INI_String("KeyOwner5", HouseInfo[houseid][hKeyOwner5], 24);
	INI_String("KeyOwner6", HouseInfo[houseid][hKeyOwner6], 24);
	INI_String("KeyOwner7", HouseInfo[houseid][hKeyOwner7], 24);
	INI_String("KeyOwner8", HouseInfo[houseid][hKeyOwner8], 24);
	INI_String("KeyOwner9", HouseInfo[houseid][hKeyOwner9], 24);
	INI_String("KeyOwner10", HouseInfo[houseid][hKeyOwner10], 24);
	return 1;
}

public LoadBiz_data(bizid,name[],value[])
{
	INI_String("bName", BizInfo[bizid][bName], 50);
	INI_String("bOwner", BizInfo[bizid][bOwner], 24);
	INI_Int("bPrice", BizInfo[bizid][bPrice]);
	INI_Float("bExtX", BizInfo[bizid][bExtX]);
	INI_Float("bExtY", BizInfo[bizid][bExtY]);
	INI_Float("bExtZ", BizInfo[bizid][bExtZ]);
	INI_Float("bIntX", BizInfo[bizid][bIntX]);
	INI_Float("bIntY", BizInfo[bizid][bIntY]);
	INI_Float("bIntZ", BizInfo[bizid][bIntZ]);
	INI_Float("bExtSpwnX", BizInfo[bizid][bExtSpwnX]);
	INI_Float("bExtSpwnY", BizInfo[bizid][bExtSpwnY]);
	INI_Float("bExtSpwnZ", BizInfo[bizid][bExtSpwnZ]);
	INI_Float("bExtSpwnA", BizInfo[bizid][bExtSpwnA]);
	INI_Float("bIntSpwnX", BizInfo[bizid][bIntSpwnX]);
	INI_Float("bIntSpwnY", BizInfo[bizid][bIntSpwnY]);
	INI_Float("bIntSpwnZ", BizInfo[bizid][bIntSpwnZ]);
	INI_Float("bIntSpwnA", BizInfo[bizid][bIntSpwnA]);
	INI_Float("bRobX", BizInfo[bizid][bRobX]);
	INI_Float("bRobY", BizInfo[bizid][bRobY]);
	INI_Float("bRobZ", BizInfo[bizid][bRobZ]);
	INI_Int("bInterior", BizInfo[bizid][bInterior]);
	INI_Int("bVWorld", BizInfo[bizid][bVWorld]);
	INI_Int("bEarnings", BizInfo[bizid][bEarnings]);
	return 1;
}

public BizRob(playerid)
{
	if(IsPlayerRobbingBiz{playerid} == true)
	{
    	new file[40];
		format(file, sizeof(file), BIZ_FILE, BizRobCP[playerid]);
		new robbery = BizInfo[BizRobCP[playerid]][bEarnings]/4;
		new INI:bFilee = INI_Open(file);
		INI_WriteInt(bFilee, "bEarnings", BizInfo[BizRobCP[playerid]][bEarnings] - BizInfo[BizRobCP[playerid]][bEarnings]/4);
		INI_Close(bFilee);
		BizInfo[BizRobCP[playerid]][bEarnings] = BizInfo[BizRobCP[playerid]][bEarnings] - BizInfo[BizRobCP[playerid]][bEarnings]/4;
		GivePlayerCash(playerid, robbery);
		IsPlayerRobbingBiz{playerid} = false;
		format(fstr, sizeof(fstr), "~w~You ~g~Robbed ~w~The Business!~n~You Got ~g~$%s.", robbery);
		GameTextForPlayer(playerid, fstr, 5000, 5);
		format(fstr2, sizeof(fstr2), "[DISPATCH]: Suspect %s (%d) has robbed the %s at %s", GetPlayerNameEx(playerid), playerid, BizInfo[BizRobCP[playerid]][bName] /*at location*/);
		CopRadio(BLUE, fstr2);
		format(fstr3, sizeof(fstr3), "[ROBBERY]: %s (%d) has just robbed %s for $%s", GetPlayerNameEx(playerid), playerid, BizInfo[BizRobCP[playerid]][bName], number_format(robbery));
		SendXMessage(playerid,fstr3);
		PlayerInfo[playerid][pHoldups]++;
		PlayerInfo[playerid][pCrimes]++;
	}
	return 1;
}

public LoadVeh_data(vehicleid, name[], value[])
{
    INI_Int("Model", VehicleInfo[vehicleid][vModel]);
	INI_Int("Color1", VehicleInfo[vehicleid][vColor1]);
	INI_Int("Color2", VehicleInfo[vehicleid][vColor2]);
	INI_Int("Price", VehicleInfo[vehicleid][vPrice]);
    INI_String("Owner", VehicleInfo[vehicleid][vOwner], 24);
	INI_Float("PosX", VehicleInfo[vehicleid][vPosX]);
	INI_Float("PosY", VehicleInfo[vehicleid][vPosY]);
	INI_Float("PosZ", VehicleInfo[vehicleid][vPosZ]);
	INI_Float("PosA", VehicleInfo[vehicleid][vPosA]);
    INI_String("Plate", VehicleInfo[vehicleid][vPlate], 32);
	INI_Int("PaintJob", VehicleInfo[vehicleid][vPaintJob]);
	INI_Int("Locked", VehicleInfo[vehicleid][vLocked]);
	INI_Int("Neons", VehicleInfo[vehicleid][vNeons]);
	INI_Int("Fuel", VehicleInfo[vehicleid][vFuel]);
	INI_Float("Health", VehicleInfo[vehicleid][vHealth]);
	INI_Int("Mod1", GetVehicleMods[vehicleid][0]);
	INI_Int("Mod2", GetVehicleMods[vehicleid][1]);
	INI_Int("Mod3", GetVehicleMods[vehicleid][2]);
	INI_Int("Mod4", GetVehicleMods[vehicleid][3]);
	INI_Int("Mod5", GetVehicleMods[vehicleid][4]);
	INI_Int("Mod6", GetVehicleMods[vehicleid][5]);
	INI_Int("Mod7", GetVehicleMods[vehicleid][6]);
	INI_Int("Mod8", GetVehicleMods[vehicleid][7]);
	INI_Int("Mod9", GetVehicleMods[vehicleid][8]);
	INI_Int("Mod10", GetVehicleMods[vehicleid][9]);
	INI_Int("Mod11", GetVehicleMods[vehicleid][10]);
	INI_Int("Mod12", GetVehicleMods[vehicleid][11]);
    return 1;
}

public ResetTextLines(playerid)
{
	text_line_count{playerid} = 0;
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(IsShopVehicle[vehicleid] != -1)
	{
    	new modcount = 0;
		for(new m = 0; m < MAX_ALOUD_MODS; m++)
		{
	    	if(GetVehicleMods[IsShopVehicle[vehicleid]][m] == 0)
	    	{
	        	GetVehicleMods[IsShopVehicle[vehicleid]][m] = componentid;
	        	SaveVehicleStats(IsShopVehicle[vehicleid]);
				modcount++;
	        	break;
			}
		}
		if(modcount == 0)
		{
	    	for(new m = 0; m < 12; m++)
			{
				GetVehicleMods[IsShopVehicle[vehicleid]][m] = 0;
			}
			SaveVehicleStats(IsShopVehicle[vehicleid]);
		}
	}

    //Credits to Donya
    switch(componentid)
    {
        case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(vehicleid,componentid);
        case 1026..1033,1138..1142: if(GetVehicleModel(vehicleid) != 560) RemoveVehicleComponent(vehicleid,componentid);
    }
    if(IsPlayerUsingTuneMenu{playerid} == false) return GivePlayerCash(playerid, -AVehicleModPrices[componentid - 1000]);
    //End of credits..
    
    IsPlayerUsingTuneMenu{playerid} = false;
	return 1;
}

public Update_Zones()
{
	new line1[10];
	new line2[10];
	foreach(Player, i)
	{
	  	if(ZoneUpdates[i] == 1)
	  	{
		   	if(IsPlayerInZone(i,Player_Zone[i]))
		   	{
	   		}
		   	else
		   	{
			    new Player_Zone_before;
			    Player_Zone_before = Player_Zone[i];
			    Player_Zone[i] = -1;
			    for(new j=0; j<sizeof(ZoneNames);j++)
				{
			    	if(IsPlayerInZone(i,j) && Player_Zone[i] == -1)
				 	{
				      	Player_Zone[i] = j;
				      	format(line1,10,"p%dzone",i);
				      	format(line2,10,"%d",j);
				      	PropertySet(line1,line2);
	     			}
				}
    			if(Player_Zone[i] == -1) Player_Zone[i] = Player_Zone_before;
   			}
		}
 	}
 	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(IsShopVehicle[vehicleid] != -1 && !strcmp(GetName(playerid), VehicleInfo[vehicleid][vOwner], false))
	{
		VehicleInfo[IsShopVehicle[vehicleid]][vColor1] = color1;
		VehicleInfo[IsShopVehicle[vehicleid]][vColor2] = color2;
		SaveVehicleStats(IsShopVehicle[vehicleid]);
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(IsShopVehicle[vehicleid] != -1 && !strcmp(GetName(playerid), VehicleInfo[vehicleid][vOwner], false))
	{
	    VehicleInfo[IsShopVehicle[vehicleid]][vPaintJob] = paintjobid;
	    SaveVehicleStats(IsShopVehicle[vehicleid]);
	}
	return 1;
}

public TazerTimer(playerid)
{
	ClearAnimations(playerid);
	GameTextForPlayer(playerid, "~g~Recovered", 3000, 5);
    HasBeenCuffed{playerid} = false;
    TogglePlayerControllable(playerid, true);
	return 1;
}

public RobberyTimer(playerid)
{
	new string[150];
	PlayerInfo[playerid][pHoldups]++;
	PlayerInfo[playerid][pCrimes]++;
	SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
	ClearAnimations(playerid);
	if(IsRobbingRedsands{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		GivePlayerCash(playerid,loot);
		IsRobbingRedsands{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Redsands Casino at Redsands West.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Redsands Casino.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Redsands Casino for $%s at Redsands West.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingPizza{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingPizza{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Well Stacked Pizzas at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Well Stacked Pizzas.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Well Stacked Pizzas for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
    else if(IsRobbingBar{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingBar{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Las Venturas Bar at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Las Venturas Bar.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Las Venturas Bar for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingCalg{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingCalg{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Caligulas Casino at The Las Venturas Strip.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Caligulas Casino.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Caligulas Casino for $%s at The Las Venturas Strip.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
	 	
 	}
	else if(IsRobbingDrag{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingDrag{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the 4 Dragons Casino at The Las Venturas Strip[South]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the 4 Dragons Casino.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the 4 Dragons Casino for $%s at The Las Venturas Strip[South]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingIsle{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingIsle{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed The Emerald Isle Casino at The Las Venturas Strip[North]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from The Emerald Isle Casino.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed The Emerald Isle Casino for $%s at The Las Venturas Strip[North]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingVegas{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingVegas{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Las Venturas Casino at The Las Venturas Strip.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Las Venturas Casino.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Las Venturas Casino for $%s at The Las Venturas Strip.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingUNI{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingUNI{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Las Venturas University at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Las Venturas University.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Las Venturas University for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingGym{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingGym{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Las Venturas Gym at Redsands East.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Las Venturas Gym.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Las Venturas Gym for $%s at Redsands East.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
 	}
	else if(IsRobbingClub{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingClub{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Las Venturas Night Club at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Las Venturas Night Club.", number_format(loot));
	    SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Las Venturas Night Club for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
	 	format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
	 	GameTextForPlayer(playerid, string ,5000,5);
	 	
 	}
	else if(IsRobbingBank1{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingBank1{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Bank at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Bank.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Bank for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingBank2{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingBank2{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Bank at El Quebrados.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Bank.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Bank for $%s at El Quebrados.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingBank3{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingBank3{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Bank at Fort Carson.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Bank.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Bank for $%s at Fort Carson.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingBank4{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(49000) + 1000;
		IsRobbingBank4{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Bank at Tierra Robada.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Bank.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Bank for $%s at Tierra Robada.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
	else if(IsRobbingStore1{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingStore1{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the 24/7 Store at The Old Vegas Strip[North]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the 24/7 Store.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the 24/7 Store for $%s at The Old Vegas Strip[North]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingStore2{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingStore2{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the 24/7 Store at The Old Vegas Strip[SE]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the 24/7 Store.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the 24/7 Store for $%s at The Old Vegas Strip[SE]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingStore3{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingStore3{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the 24/7 Store at The Las Venturas Strip.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the 24/7 Store.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the 24/7 Store for $%s at The Las Venturas Strip.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingStore4{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingStore4{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the 24/7 Store at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the 24/7 Store.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the 24/7 Store for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
	else if(IsRobbingCluck1{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingCluck1{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Cluck'n Bell at The Old Vegas Strip.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Cluck'n Bell.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Cluck'n Bell for $%s at The Old Vegas Strip.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingCluck2{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingCluck2{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Cluck'n Bell at Fort Carson.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Cluck'n Bell.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Cluck'n Bell for $%s at Fort Carson.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingCluck3{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingCluck3{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Cluck'n Bell at Tierra Robada.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Cluck'n Bell.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Cluck'n Bell for $%s at Tierra Robada.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
	else if(IsRobbingShot1{playerid} == true && HasBeenArrested{playerid} == false)
	{
    	new loot = random(19000) + 1000;
		IsRobbingShot1{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Burger Shot at The Old Vegas Strip[West]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Burger Shot.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Burger Shot for $%s at The Old Vegas Strip[West]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
    }
    else if(IsRobbingShot2{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingShot2{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Burger Shot at The Old Vegas Strip[SE]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Burger Shot.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Burger Shot for $%s at The Old Vegas Strip[SE]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
    }
    else if(IsRobbingShot3{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingShot3{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Burger Shot at Redsands West.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Burger Shot.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Burger Shot for $%s at Redsands West.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
    }
    else if(IsRobbingShot4{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingShot4{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Burger Shot at Spinybed.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Burger Shot.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Burger Shot for $%s at Spinybed.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
    }
    else if(IsRobbingShot5{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingShot5{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Burger Shot at Redsands East.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Burger Shot.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Burger Shot for $%s at Redsands East.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
    }
	else if(IsRobbingAmmu1{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu1{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at The Las Venturas Strip[South]", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at The Las Venturas Strip[South]",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingAmmu2{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu2{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at Bone County.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at Bone County.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingAmmu3{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu3{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at Fort Carson.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at Fort Carson.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingAmmu4{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu4{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at El Quebrados.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at El Quebrados.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingAmmu5{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu5{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at The Old Vegas Strip.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at The Old Vegas Strip.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
 	else if(IsRobbingAmmu6{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new loot = random(19000) + 1000;
		IsRobbingAmmu6{playerid} = false;
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has robbed the Ammunation at Las Venturas Square.", GetPlayerNameEx(playerid), playerid);
		CopRadio(BLUE, fstr);
		format(string, sizeof(string), "Great Job! You have robbed $%s from the Ammunation.", number_format(loot));
    	SendClientMessage(playerid, WHITE, string);
		GivePlayerCash(playerid,loot);
		format(string, sizeof(string), "[ROBBERY]: %s (%d) has just robbed the Ammunation for $%s at Las Venturas Square.",GetPlayerNameEx(playerid), playerid, number_format(loot));
		SendXMessage(playerid,string);
 		format(string, sizeof(string), "~w~Robbery ~g~Completed!~n~~w~You Stole: ~g~$%s", number_format(loot));
 		GameTextForPlayer(playerid, string ,5000,5);
 		
 	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid)
{
	if(GetTeam{playerid} == CLASS_CIV && IsPlayerHoldingAGun(playerid) == 1)
	{
		shotsfired[playerid] ++;
		if(shotsfired[playerid] >= 15)
		{
			new current_zone, string[150];
			current_zone = Player_Zone[playerid];
			SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 3);
			format(string, sizeof(string), "[DISPATCH]: Suspect %s (%d) has assaulted %s (%d) with a deadly weapon at %s", GetPlayerNameEx(playerid), playerid, GetName(damagedid), damagedid, ZoneNames[current_zone][zone_name]);
			CopRadio(BLUE, string);
	        SendClientMessage(playerid, RED, "You've commited a crime (Assault with a deadly weapon). Your wanted level has been increased.");
			shotsfired[playerid] = 0;
		}
	}
    return 1;
}

public DetectATDeparture(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, 2150.0178,2425.3809,65.2773))
	{
	    KillTimer(attimer{playerid});
        hasenteredtower{playerid} = 0;
	}
	return 1;

}

public FailureToPayTicket(playerid)
{
	if(HasBeenIssuedTicket{playerid} == true && HasBeenArrested{playerid} == false)
	{
		new current_zone;
        current_zone = Player_Zone[playerid];
		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		SendClientMessage(playerid, RED, "You've commited a crime (Failure to pay ticket). Your wanted level has been increased.");
		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has failed to pay a ticket at %s", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
		CopRadio(BLUE, fstr);
		HasBeenIssuedTicket{playerid} = false;
		TicketIssuer[playerid] = -1;
	}
	return 1;
}

public RestartServer()
{
	GameTextForAll("~w~Server ~g~ Now Restarting..", 5000, 5);
    SendRconCommand("gmx");
	return 1;
}

public StartCountDown()
{
	CountStatus = 1;
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			GameTextForAll("~r~Get Ready!", 1000, 5);
			SetTimer("CountDownStage1", 1000, false);
	    }
	}
	return 1;
}

public CountDownStage1()
{
	CountStatus = 1;
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			GameTextForAll("~w~3", 1000, 5);
			SetTimer("CountDownStage2", 1000, false);
	    }
	}
	return 1;
}

public CountDownStage2()
{
	CountStatus = 1;
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			GameTextForAll("~w~2", 1000, 5);
			SetTimer("CountDownStage3", 1000, false);
	    }
	}
	return 1;
}

public CountDownStage3()
{
	CountStatus = 1;
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			GameTextForAll("~w~1", 1000, 5);
			SetTimer("FinishCountDown", 1000, false);
	    }
	}
	return 1;
}

public FinishCountDown()
{
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			GameTextForAll("~g~Go!", 1000, 5);
			TogglePlayerControllable(i, true);
			if(HasMadeEvent{i} == 1)
			{
			    IsAtEvent[i] = 0;
			}
	    }
	}
	CountStatus = 0;
	return 1;
}

public AutoUncage(playerid)
{
	if(IsCaged{playerid} == true)
	{
		if(CageTime[playerid] > 0)
		{
			CageTime[playerid] --;
			new ctime = (CageTime[playerid]);
         	format(fstr, sizeof(fstr), "~g~Released In:~n~~w~%s", TimeConvert(ctime));
         	GameTextForPlayer(playerid, fstr, 5000, 5);
         	return 1;
      	}
		if(JailTime[playerid] == 0)
     	{
     	    KillTimer(CageTimer[playerid]);
			CageTime[playerid] = 0;
			PlayerInfo[playerid][cTime] = 0;
			IsCaged{playerid} = false;
			if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
			{
			    SaveUserStats(playerid);
			}
			new rand = random(sizeof(MedicSpawns));
			SetPlayerPos(playerid, MedicSpawns[rand][0], MedicSpawns[rand][1], MedicSpawns[rand][2]);
			SetPlayerFacingAngle(playerid, MedicSpawns[rand][3]);
			GameTextForPlayer(playerid, "~g~Uncaged", 5000, 5);
	  	}
	  	return 1;
	}
    return 1;
}

public splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

public AutoUnjail(playerid)
{
	if(IsJailed{playerid} == true)
	{
		if(JailTime[playerid] > 0)
		{
			JailTime[playerid] --;
			new jtime;
			jtime = (JailTime[playerid]);
         	format(fstr, sizeof(fstr), "~g~Released In:~n~~w~%s", TimeConvert(jtime));
         	GameTextForPlayer(playerid, fstr, 5000, 5);
         	return 1;
      	}
		if(JailTime[playerid] == 0)
     	{
     	    KillTimer(JailTimer[playerid]);
			JailTime[playerid] = 0;
			PlayerInfo[playerid][jTime] = 0;
			IsJailed{playerid} = false;
			if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
			{
			    SaveUserStats(playerid);
			}
			SetPlayerHealth(playerid, 100.0);
			SetPlayerWantedLevel(playerid, 0);
    		SetPlayerInterior(playerid, 3);
    		SetPlayerPos(playerid, 200.6972, 168.2653, 1003.0234);
    		SetPlayerFacingAngle(playerid, 89.0391);
			format(fstr, sizeof(fstr), "%s (%d) has been released from jail.", GetPlayerNameEx(playerid), playerid);
			SendClientMessageToAll(YELLOW, fstr);
			if(PlayerInfo[playerid][vLevel] < 1)
			{
				new bail = random(4000) + 1000;
				GivePlayerCash(playerid, -bail);
				format(fstr2, sizeof(fstr2), "You have been released from jail, your bail was $%s.", number_format(bail));
				SendClientMessage(playerid, LIGHTGREEN, fstr2);
			}
	  	}
	}
    return 1;
}

public LoadGun_data(playerid, name[], value[])
{
    INI_Int("gSlot0_gun", GunInfo[playerid][gSlot0_gun]);
    INI_Int("gSlot0_ammo", GunInfo[playerid][gSlot0_ammo]);
    INI_Int("gSlot1_gun", GunInfo[playerid][gSlot1_gun]);
    INI_Int("gSlot1_ammo", GunInfo[playerid][gSlot1_ammo]);
    INI_Int("gSlot2_gun", GunInfo[playerid][gSlot2_gun]);
    INI_Int("gSlot2_ammo", GunInfo[playerid][gSlot2_ammo]);
    INI_Int("gSlot3_gun", GunInfo[playerid][gSlot3_gun]);
    INI_Int("gSlot3_ammo", GunInfo[playerid][gSlot3_ammo]);
    INI_Int("gSlot4_gun", GunInfo[playerid][gSlot4_gun]);
    INI_Int("gSlot4_ammo", GunInfo[playerid][gSlot4_ammo]);
    INI_Int("gSlot5_gun", GunInfo[playerid][gSlot5_gun]);
    INI_Int("gSlot5_ammo", GunInfo[playerid][gSlot5_ammo]);
    INI_Int("gSlot6_gun", GunInfo[playerid][gSlot6_gun]);
    INI_Int("gSlot6_ammo", GunInfo[playerid][gSlot6_ammo]);
    INI_Int("gSlot7_gun", GunInfo[playerid][gSlot7_gun]);
    INI_Int("gSlot7_ammo", GunInfo[playerid][gSlot7_ammo]);
    INI_Int("gSlot8_gun", GunInfo[playerid][gSlot8_gun]);
    INI_Int("gSlot8_ammo", GunInfo[playerid][gSlot8_ammo]);
    INI_Int("gSlot9_gun", GunInfo[playerid][gSlot9_gun]);
    INI_Int("gSlot9_ammo", GunInfo[playerid][gSlot9_ammo]);
    INI_Int("gSlot10_gun", GunInfo[playerid][gSlot10_gun]);
    INI_Int("gSlot10_ammo", GunInfo[playerid][gSlot10_ammo]);
    INI_Int("gSlot11_gun", GunInfo[playerid][gSlot11_gun]);
    INI_Int("gSlot11_ammo", GunInfo[playerid][gSlot11_ammo]);
    INI_Int("gSlot12_gun", GunInfo[playerid][gSlot12_gun]);
    INI_Int("gSlot12_ammo", GunInfo[playerid][gSlot12_ammo]);
    return 1;
}

public LoadPos_data(playerid, name[], value[])
{
    INI_Float("rPos_X", PosInfo[playerid][rPos_X]);
    INI_Float("rPos_Y", PosInfo[playerid][rPos_Y]);
    INI_Float("rPos_Z", PosInfo[playerid][rPos_Z]);
    INI_Float("rPos_A", PosInfo[playerid][rPos_A]);
    INI_Int("rInterior", PosInfo[playerid][rInterior]);
    INI_Int("rWorld", PosInfo[playerid][rWorld]);
    return 1;
}

//=======================================================================
//    All redirect commands are listed below.
//=======================================================================
CMD:hhc(playerid, params[]) return cmd_hhcheck(playerid, params);
CMD:cf(playerid, params[]) return cmd_cuff(playerid, params);
CMD:tz(playerid, params[]) return cmd_taze(playerid, params);
CMD:esc(playerid, params[]) return cmd_escape(playerid, params);
CMD:ch(playerid, params[]) return cmd_classhelp(playerid, params);
CMD:jh(playerid, params[]) return cmd_jailhelp(playerid, params);
CMD:ghelp(playerid, params[]) return cmd_infohelp(playerid, params);
CMD:gh(playerid, params[]) return cmd_genhelp(playerid, params);
CMD:ih(playerid, params[]) return cmd_infohelp(playerid, params);
CMD:mh(playerid, params[]) return cmd_msghelp(playerid, params);
CMD:vh(playerid, params[]) return cmd_vehhelp(playerid, params);
CMD:hm(playerid, params[]) return cmd_housemenu(playerid, params);
CMD:ah(playerid, params[]) return cmd_acmds(playerid, params);
CMD:grl(playerid, params[]) return cmd_groupleave(playerid, params);
CMD:grc(playerid, params[]) return cmd_groupcreate(playerid, params);
CMD:gri(playerid, params[]) return cmd_groupinvite(playerid, params);
CMD:grlead(playerid, params[]) return cmd_groupleader(playerid, params);
CMD:grj(playerid, params[]) return cmd_groupjoin(playerid, params);
CMD:grk(playerid, params[]) return cmd_groupkick(playerid, params);
CMD:gm(playerid, params[]) return cmd_groupmessage(playerid, params);
CMD:grlist(playerid, params[]) return cmd_grouplist(playerid, params);
CMD:ej(playerid, params[]) return cmd_eject(playerid, params);
//=======================================================================

CMD:smtd(playerid, params[])
{
	if(isnull(params)) {
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /smtd [id]");
	}
	if(!IsNumeric(params)) {
	    return SendClientMessage(playerid, RED, "You may only enter numbers.");
	}
    ShowMissionGUIFrame(playerid, strval(params));
	return 1;
}

CMD:hmtd(playerid, params[])
{
	if(isnull(params)) {
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /hmtd [id]");
	}
	if(!IsNumeric(params)) {
	    return SendClientMessage(playerid, RED, "You may only enter numbers.");
	}
    HideMissionGUIFrame(playerid, strval(params));
	return 1;
}

CMD:cmtd(playerid, params[])
{
    new title[15], line1[20], line2[20], mission, string[15], string1[25], string2[25];
    if(sscanf(params, "s[15]ds[20]S[20]", title, mission, line1, line2))
		return SendClientMessage(playerid, RED, "[USAGE]: /cmtd [title] [missionnumber] [line1] [line2 (optional)]");
	if(strlen(title) > 15)
		return SendClientMessage(playerid, RED, "The title can only contain 15 charcters!");
	if(strlen(line1) > 20)
		return SendClientMessage(playerid, RED, "Line one can only contain 20 charcters!");
	if(strlen(line2) > 20)
		return SendClientMessage(playerid, RED, "Line two can only contain 20 charcters!");
	if(mission > 5)
		return SendClientMessage(playerid, RED, "Mission number cannot be any higher than 5");
	if(mission < 1)
		return SendClientMessage(playerid, RED, "Mission number cannot be any lower than 1");

	format(string, sizeof(string), "%s", title);
	format(string1, sizeof(string1), "%s", line1);
	if(IsNull(line2)) {
		format(string2, sizeof(string2), "_");
	}
	else {
	    format(string2, sizeof(string2), "%s", line2);
	}
    UpdateMissionGUI(playerid, string, string1, string2, mission);
	return 1;
}

CMD:cmtd1(playerid, params[])
{
    new title[15], line1[20], line2[20], mission, string[15], string1[25], string2[25];
    if(sscanf(params, "s[15]ds[20]S[20]", title, mission, line1, line2))
		return SendClientMessage(playerid, RED, "[USAGE]: /cmtd [missionnumber] [line1]");
	if(strlen(title) > 15)
		return SendClientMessage(playerid, RED, "The title can only contain 15 charcters!");
	if(strlen(line1) > 20)
		return SendClientMessage(playerid, RED, "Line one can only contain 20 charcters!");
	if(strlen(line2) > 20)
		return SendClientMessage(playerid, RED, "Line two can only contain 20 charcters!");
	if(mission > 5)
		return SendClientMessage(playerid, RED, "Mission number cannot be any higher than 5");
	if(mission < 1)
		return SendClientMessage(playerid, RED, "Mission number cannot be any lower than 1");

	format(string, sizeof(string), "%s", title);
	format(string1, sizeof(string1), "%s", line1);
    UpdateMissionGUI(playerid, string, string1, string2, mission);
	return 1;
}

/*CMD:search(playerid, params[])
{
	if(PlayerInfo[playerid][pSkill] != 16) {
		return SendClientMessage(playerid, COLOR_GREY, "You are not a treasure hunter.");
	}
	else if(IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while in a vehicle.");
	}
	else if(gettime()-GetPVarInt(playerid, "LastScan") < GetPVarInt(playerid, "ScanReload")) {
		return SendClientMessage(playerid, COLOR_GRAD2, "Your metal detector is still recharging. Please wait.");
	}

	else if(!GetPVarType(playerid, "HiddenTreasure")) { // New Treasure
 		SetPVarInt(playerid, "HiddenTreasure", random(sizeof(HiddenTreasure)));
	}

	new
		szMessage[128],
		Float:distance = GetPlayerDistanceFromPoint(playerid, HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][0], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][1], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][2]);

    if(IsPlayerInArea(playerid, 402.2964, 737.5547, -1923.9410, -1752.8732) && distance > 3)
  	{
        SetPlayerCheckpoint(playerid,HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][0], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][1], HiddenTreasure[GetPVarInt(playerid, "HiddenTreasure")][2], 3);
        SetTimerEx("DisableCheckPoint", 2000, 0, "i", playerid);

   		format(szMessage, 128, "You are %f meters away from the treasure. ", distance);
     	SendClientMessage(playerid, COLOR_WHITE, szMessage);

        //if(PlayerInfo[playerid][pTreasureSkill] >=0 && PlayerInfo[playerid][pTreasureSkill] <= 24) SetPVarInt(playerid, "ScanReload", 20);
		//else if(PlayerInfo[playerid][pTreasureSkill] >=25 && PlayerInfo[playerid][pTreasureSkill] <= 299) SetPVarInt(playerid, "ScanReload", 15);
		//else if(PlayerInfo[playerid][pTreasureSkill] >=300 && PlayerInfo[playerid][pTreasureSkill] <= 599) SetPVarInt(playerid, "ScanReload", 10);
		//else if(PlayerInfo[playerid][pTreasureSkill] >=600) SetPVarInt(playerid, "ScanReload", 5);

  		SetPVarInt(playerid, "LastScan", gettime());

	}
 	else if(distance <= 3) // Finds Treasure
  	{
  	    FoundTreasure(playerid);
  	    PlayerInfo[playerid][pMetalDetector]--;
		++PlayerInfo[playerid][pTreasureSkill];
  	    DeletePVar(playerid, "HiddenTreasure");

  	    if(PlayerInfo[playerid][pTreasureSkill] == 25) {
  	        SendClientMessage(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 2, the time it takes for your metal detector to charge is now 15 seconds!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 150) {
  	        SendClientMessage(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 3, your chance to find a rare is now 10%!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 300) {
  	        SendClientMessage(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 4, the time it takes for your metal detector to charge is now 10 seconds!");
  	    }
  	    if(PlayerInfo[playerid][pTreasureSkill] == 600) {
  	        SendClientMessage(playerid, COLOR_WHITE, "* Your Treasure Hunting Skill is now Level 5, your chance to find a rare is now 20%!");
  	    }
   	}
    else {
    	SendClientMessage(playerid, COLOR_GREY, "You are not at a beach.");
    }
	return 1;
}*/

CMD:csoundid(playerid, params[])
{
	if(isnull(params)) {
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /csoundid [id]");
	}
	if(!IsNumeric(params)) {
	    return SendClientMessage(playerid, RED, "You may only enter numbers.");
	}
	PlayCrimeReportForPlayer(playerid, 4, strval(params));
	return 1;
}

CMD:soundid(playerid, params[])
{
	if(isnull(params)) {
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /soundid [cid]");
	}
	if(!IsNumeric(params)) {
	    return SendClientMessage(playerid, RED, "You may only enter numbers.");
	}
	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	PlayerPlaySound(playerid, strval(params), Pos[0], Pos[1], Pos[2]);
	return 1;
}

CMD:id(playerid, params[]) {
	if(isnull(params)) {
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /id [player name]");
	}

	new
		szMessage[128],
		szPlayerName[MAX_PLAYER_NAME],
		iTargetID = strval(params);

	if(IsNumeric(params) && IsPlayerConnected(strval(params)))
	{
	    if(PlayerInfo[playerid][aLevel] >= 1) format(szMessage, sizeof szMessage, "%s (ID: %d) - (Score: %d) - (Ping: %d) - (FPS: %d)", GetPlayerNameEx(iTargetID), iTargetID, GetPlayerScore(iTargetID), GetPlayerPing(iTargetID), pFPS[iTargetID]);
		else format(szMessage, sizeof szMessage, "%s (ID: %d) - (Score: %d) - (Ping: %d)", GetPlayerNameEx(iTargetID), iTargetID, GetPlayerScore(iTargetID), GetPlayerPing(iTargetID));
		return SendClientMessage(playerid, COLOR_WHITE, szMessage);
	}
	else if(strlen(params) < 3) {
		return SendClientMessage(playerid, COLOR_GREY, "Input at least 3 characters to search.");
	}
	else foreach(new i: Player)
	{
		GetPlayerName(i, szPlayerName, sizeof szPlayerName);
		if(strfind(szPlayerName, params, true) != -1) {
			if(PlayerInfo[playerid][aLevel] >= 1) format(szMessage, sizeof szMessage, "%s (ID: %d) - (Score: %d) - (Ping: %d) - (FPS: %d)", GetPlayerNameEx(i), i, GetPlayerScore(i), GetPlayerPing(i), pFPS[i]);
			else format(szMessage, sizeof szMessage, "%s (ID: %d) - (Score: %d) - (Ping: %d)", GetPlayerNameEx(i), i, GetPlayerScore(i), GetPlayerPing(i));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
		}
	}
	return 1;
}

CMD:hhcheck(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /hhcheck [player]");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][aLevel] >= PlayerInfo[playerid][aLevel] && giveplayerid != playerid)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessage(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated a health hack check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "Checking %s for health hacks, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessage(playerid, COLOR_YELLOW, string);

			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			GetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
			GetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
			HHcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			HHcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);

			TogglePlayerControllable(giveplayerid, 1);

            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
            SetPlayerVirtualWorld(giveplayerid, 0);
		    SetPlayerInterior(giveplayerid, 1);
		    SetPlayerHealth(giveplayerid, 100);
		    RemoveArmor(giveplayerid);
			SetPlayerPos(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else { return 0; }
	return 1;
}

CMD:clearadminchat(playerid,params[]) {
    #pragma unused params
	IsPlayerAdmin(playerid);
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
	SendXMessage(playerid,"_");
    return 1;
}

CMD:enter(playerid, params[])
{
    for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVirtualWorld] == DDoorsInfo[i][ddInteriorVW]) {
            SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInterior] = DDoorsInfo[i][ddExteriorInt];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVirtualWorld] = DDoorsInfo[i][ddExteriorVW];
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                foreach(new passenger: Player)
                {
                    if(passenger != playerid)
                    {
	                    if(IsPlayerInVehicle(passenger, GetPlayerVehicleID(playerid)))
	                    {
		                    SetPlayerInterior(passenger,DDoorsInfo[i][ddExteriorInt]);
				            PlayerInfo[passenger][pInterior] = DDoorsInfo[i][ddExteriorInt];
				            PlayerInfo[passenger][pVirtualWorld] = DDoorsInfo[i][ddExteriorVW];
				            SetPlayerVirtualWorld(passenger, DDoorsInfo[i][ddExteriorVW]);
	                    }
					}
                }
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			//if(DDoorsInfo[i][ddCustomExterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ], FREEZE_TIME);
            return 1;
        }
    }
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing next available dynamic door...");
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ddname [doorid] [name]");

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessage(playerid, COLOR_WHITE, "You have changed the name of the door!");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();

	format(string, sizeof(string), "%s has edited DoorID %d's Name to %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:ddedit(playerid, params[])
{
   	if(IsOnduty{playerid} == 0) return SendClientMessage(playerid, -1, "You must be on Admin Duty to use this Command!");
	if(PlayerInfo[playerid][aLevel] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ddedit [name] [doorid] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessage(playerid, COLOR_GREY, "Family, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessage( playerid, COLOR_WHITE, "Invalid Door ID!");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom interior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomInterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom exterior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomExterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "You have changed the VIP Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VIP Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "family", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(string, sizeof(string), "You have changed the Family to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Family.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faction", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "You have changed the Faction to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Faction.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "You have changed the Admin Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Admin Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "You have changed the Wanted to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "You have changed the VehicleAble to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VehicleAble.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "You have changed the Color to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Color.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "You have changed the PickupModel to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0) {
	        format(string, sizeof(string), "DoorID %d does not exist.", doorid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
	    }
    	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "You have deleted DoorID %d.", doorid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /goindoor [doornumber]");

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		PlayerInfo[playerid][pInterior] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pVirtualWorld] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /gotodoor [doornumber]");

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInterior] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVirtualWorld] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:ddstatus(playerid, params[])
{
	new doorid;
	if(sscanf(params, "i", doorid))
	{
		SendClientMessage(playerid, COLOR_GREY, "USAGE: /ddstatus [doorid]");
		return 1;
	}
	if (PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Door Status (ID: %d) ___________|", doorid);
		SendClientMessage(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "(Ext) X: %f | Y: %f | Z: %f | (Int) X: %f | Y: %f | Z: %f", DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Pickup ID: %d | Custom Int: %d | Custom Ext: %d | Exterior VW: %d | Exterior Int: %d | Interior VW: %d | Interior Int: %d", DDoorsInfo[doorid][ddPickupID], DDoorsInfo[doorid][ddCustomInterior], DDoorsInfo[doorid][ddCustomExterior], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], DDoorsInfo[doorid][ddInteriorVW], DDoorsInfo[doorid][ddInteriorInt]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "VIP: %d | Family: %d | Faction: %d | Admin: %d | Wanted: %d | Vehiclable: %d | Locked: %d | Password: %s", DDoorsInfo[doorid][ddVIP], DDoorsInfo[doorid][ddFamily], DDoorsInfo[doorid][ddFaction], DDoorsInfo[doorid][ddAdmin], DDoorsInfo[doorid][ddWanted], DDoorsInfo[doorid][ddVehicleAble], DDoorsInfo[doorid][dLocked], DDoorsInfo[doorid][dPass]);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:ddnear(playerid, params[])
{
	new szMessage[128];
	if(PlayerInfo[playerid][aLevel] == 4 && IsOnduty{playerid} == 1)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing all dynamic doors within 30 meters of you...");
		for(new i; i < MAX_DDOORS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]))
			{
				format(szMessage, sizeof(szMessage), "(Interior) DDoor ID %d | %f from you", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]));
			    SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
			if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
			{
				format(szMessage, sizeof(szMessage), "(Exterior) DDoor ID %d | %f from you", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]));
			    SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:debit(playerid, params[])
{
	new playerid2, debitamount;
	if(sscanf(params, "ud", playerid2, debitamount)) return SendClientMessage(playerid, RED, "[USAGE]: /debit [playerid] [amount]");
	if(!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, RED, "Player not found.");
	if(debitamount > BankInfo[playerid][Balance]) return SendClientMessage(playerid, RED, "Insufficient funds.");
	BankInfo[playerid][Balance] = BankInfo[playerid][Balance] -debitamount;
	GivePlayerCash(playerid2, debitamount);
	if(playerid2 == playerid)
	{
		format(fstr, sizeof(fstr), "[CREDITCARD]: You have withdrawn $%s from your bank account and handed it to yourself.", number_format(debitamount));
		SendClientMessage(playerid, WHITE, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		return true;
	}
	else
	{
		format(fstr, sizeof(fstr), "[CREDITCARD]: You have withdrawn $%s from your bank account and handed it to %s.", number_format(debitamount), GetName(playerid2));
		SendClientMessage(playerid, WHITE, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
	}
	return true;
}

CMD:credit(playerid, params[])
{
	new playerid2, creditamount;
	if(sscanf(params, "ud", playerid2, creditamount)) return SendClientMessage(playerid, RED, "[USAGE]: /credit [playerid] [amount]");
	if(!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, RED, "Player not found.");
	if(creditamount > BankInfo[playerid][Credit]) return SendClientMessage(playerid, RED, "Insufficient funds.");
	BankInfo[playerid][Credit] = BankInfo[playerid][Credit] -creditamount;
	GivePlayerCash(playerid2, creditamount);
	if(playerid2 == playerid)
	{
		format(fstr, sizeof(fstr), "[DEBITCARD]: You have withdrawn $%s from your credit account and handed it to yourself.", number_format(creditamount));
		SendClientMessage(playerid, WHITE, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
		return true;
	}
	else
	{
		format(fstr, sizeof(fstr), "[DEBITCARD]: You have withdrawn $%s from your credit account and handed it to %s.", number_format(creditamount), GetName(playerid2));
		SendClientMessage(playerid, WHITE, fstr);
		BankInfo[playerid][Transactions] = BankInfo[playerid][Transactions] + 1;
		BankInfo[playerid][Fees] = BankInfo[playerid][Fees] + 4;
		GivePlayerCash(playerid, - 4);
		SendClientMessage(playerid, RED, "FEE: You were charged a $4 fee for this transaction.");
		SendClientMessage(playerid, WHITE, "THANKYOU: Thank you for banking with Las Venturas Bank.");
	}
	return true;
}

CMD:objlist(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	ShowPlayerDialog(playerid, OBJECT_LIST_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}List of SOME object id's:", "{FFFFFF}Stunt object's: 13592, 13594, 13666\n\nRoadblocks: 981, 1459, 1422, 4516, 4524, 4527\n\nBuildingss: 4563, 9900\n\nRamp: 1655\n\nExplosive barrel: 1225\n\nTower: 3279\n\nSubmarine: 1612\n\nPirate ship: 8493\n\nLand mass: 9455\n\nNature: 700-725+\n\nRoad's: 5482-5512\n\nSmoke machine: 2780", "Ok", "");
	return true;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] >= 2)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessage(playerid, GREY, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessage(playerid, GREY, "You have been teleported to the coordinates specified.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:createobject(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(GetSetObjectsCount[playerid] >= MAX_SET_OBJECTS)
	{
	    format(fstr, sizeof fstr, "You can only set a maximum of %d objects per spawn, use /deletesetobjects", MAX_SET_OBJECTS);
    	SendClientMessage(playerid, RED, fstr);
	    return true;
	}
	if(IsPlayerEditingObject{playerid} == true) return SendClientMessage(playerid, RED, "You're already editing an object, use /(set/cancel)object to edit another.");
	if(sscanf(params, "d", ObjectInfo[playerid][oID])) return SendClientMessage(playerid, RED, "[USAGE]: /createobject [objectid]");
	if(ObjectInfo[playerid][oID] > 15000 || ObjectInfo[playerid][oID] < 1) return SendClientMessage(playerid, RED, "Invalid objectid.");
    new Float:objX, Float:objY, Float:objZ;
	GetPlayerPos(playerid, objX, objY, objZ);
	IsPlayerEditingObject{playerid} = true;
	ObjectInfo[playerid][oCurrent] = CreateObject(ObjectInfo[playerid][oID], objX+5, objY+5, objZ, 0, 0, 0);
    format(fstr, sizeof(fstr), "Object id %d created at coordinates: %.2f, %.2f, %.2f", ObjectInfo[playerid][oID], objX, objY, objZ);
    SendClientMessage(playerid, WHITE, fstr);
    ObjectInfo[playerid][oX] = objX + 3;
	ObjectInfo[playerid][oY] = objY + 3;
	ObjectInfo[playerid][oZ] = objZ;
	return true;
}

CMD:cancelobject(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to cancel.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	IsPlayerEditingObject{playerid} = false;
	DestroyObject(ObjectInfo[playerid][oCurrent]);
	SendClientMessage(playerid, WHITE, "Object cancelled.");
	return true;
}

CMD:setobject(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to set.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	GetSetObjectsCount[playerid]++;
	GetSetObjects[playerid][GetSetObjectsCount[playerid]] = ObjectInfo[playerid][oCurrent];
	IsPlayerEditingObject{playerid} = false;
	ObjectInfo[playerid][oCurrent] = -1;
	SendClientMessage(playerid, WHITE, "Object set.");
	return true;
}

CMD:deletesetobjects(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	for(new o = 0; o < MAX_SET_OBJECTS; o++)
	{
	    if(GetSetObjects[playerid][o] == -1) continue;
    	DestroyObject(GetSetObjects[playerid][o]);
    	GetSetObjects[playerid][o] = -1;
    	GetSetObjectsCount[playerid]--;
    }
	SendClientMessage(playerid, WHITE, "Set object/s deleted.");
	return true;
}

CMD:attachobject(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to attach.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You already have an attached object, use /detachobject");
	IsPlayerAttachingObject{playerid} = true;
	DestroyObject(ObjectInfo[playerid][oCurrent]);
	new Float:xx, Float:yy, Float:zz;
	GetPlayerPos(playerid, xx, yy, zz);
	ObjectInfo[playerid][oCurrent] = CreateObject(ObjectInfo[playerid][oID], xx +5, yy +5, zz, 0, 0, 0);
	AttachObjectToPlayer(ObjectInfo[playerid][oCurrent], playerid, 2.0, 2.0, 5.0, 0, 1.5, 2);
	SendClientMessage(playerid, WHITE, "Object attached.");
	return true;
}

CMD:detachobject(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to attach.");
 	if(IsPlayerAttachingObject{playerid} == false) return SendClientMessage(playerid, RED, "You dont have an object to detach.");
	IsPlayerAttachingObject{playerid} = false;
	DestroyObject(ObjectInfo[playerid][oCurrent]);
	new Float:xx, Float:yy, Float:zz;
	GetPlayerPos(playerid, xx, yy, zz);
	ObjectInfo[playerid][oCurrent] = CreateObject(ObjectInfo[playerid][oID], xx +5, yy +5, zz, 0, 0, 0);
	SendClientMessage(playerid, WHITE, "Object detached.");
	return true;
}

CMD:moveobject(playerid, params[])
{
    new Float:Dist, Coord[150], Symbol[150], Float:Time;
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(sscanf(params, "s[150]s[150]ff", Symbol, Coord, Dist, Time)) return SendClientMessage(playerid, RED, "[USAGE]: /moveobject [symbol] [coord] [distance] [seconds]");
	if(Dist < 0) return SendClientMessage(playerid, RED, "Please enter the distance you want to move the object in metres.");
	if(Time > 100) return SendClientMessage(playerid, RED, "You cant move objects faster then 100k/m per hour.");
	if(strfind(Symbol, "+", false) != -1)
	{
		if(strfind(Coord, "x", false) != -1)
		{
			ObjectInfo[playerid][oX] = ObjectInfo[playerid][oX] + Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else if(strfind(Coord, "y", false) != -1)
		{
			ObjectInfo[playerid][oY] = ObjectInfo[playerid][oY] + Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else if(strfind(Coord, "z", false) != -1)
		{
			ObjectInfo[playerid][oZ] = ObjectInfo[playerid][oZ] + Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else
		{
	    	SendClientMessage(playerid, RED, "The coord can only be x, y or z.");
		}
	}
	else if(strfind(Symbol, "-", false) != -1)
	{
		if(strfind(Coord, "x", false) != -1)
		{
			ObjectInfo[playerid][oX] = ObjectInfo[playerid][oX] - Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else if(strfind(Coord, "y", false) != -1)
		{
			ObjectInfo[playerid][oY] = ObjectInfo[playerid][oY] - Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else if(strfind(Coord, "z", false) != -1)
		{
			ObjectInfo[playerid][oZ] = ObjectInfo[playerid][oZ] - Dist;
			MoveObject(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ], Time);
			SendClientMessage(playerid, WHITE, "Object now moving.");
		}
		else
		{
	    	SendClientMessage(playerid, RED, "The coord can only be x, y or z.");
		}
	}
	else
	{
		SendClientMessage(playerid, RED, "The symbol can only be + or -.");
	}
	return true;
}

CMD:moveup(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:ZCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", ZCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /moveup [coord]");
	if(ZCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oZ] = ObjectInfo[playerid][oZ] + ZCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved up.");
	return true;
}

CMD:movedown(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:ZCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", ZCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /movedown [coord]");
	if(ZCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oZ] = ObjectInfo[playerid][oZ] - ZCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved down.");
	return true;
}

CMD:movenorth(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:YCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", YCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /movenorth [coord]");
	if(YCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oY] = ObjectInfo[playerid][oY] + YCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved north.");
	return true;
}

CMD:movesouth(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:YCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", YCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /movesouth [coord]");
	if(YCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oY] = ObjectInfo[playerid][oY] - YCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved south.");
	return true;
}

CMD:movewest(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:XCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", XCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /movewest [coord]");
	if(XCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oX] = ObjectInfo[playerid][oX] - XCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved west.");
	return true;
}

CMD:moveeast(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:XCoord;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to move.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", XCoord)) return SendClientMessage(playerid, RED, "[USAGE]: /moveeast [coord]");
	if(XCoord < 0) return SendClientMessage(playerid, RED, "Please enter a coordinate to move the object.");
	ObjectInfo[playerid][oX] = ObjectInfo[playerid][oX] + XCoord;
	SetObjectPos(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oX], ObjectInfo[playerid][oY], ObjectInfo[playerid][oZ]);
	SendClientMessage(playerid, WHITE, "Object moved east.");
	return true;
}

CMD:rotatex(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:XRot;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to rotate.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", XRot)) return SendClientMessage(playerid, RED, "[USAGE]: /rotatex [rotation]");
	if(XRot < 0) return SendClientMessage(playerid, RED, "Please enter a rotation coordinate to rotate the object.");
	ObjectInfo[playerid][oRotX] = ObjectInfo[playerid][oRotX] + XRot;
	SetObjectRot(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oRotX], ObjectInfo[playerid][oRotY], ObjectInfo[playerid][oRotZ]);
	SendClientMessage(playerid, WHITE, "Object rotated.");
	return true;
}

CMD:rotatey(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:YRot;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to rotate.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", YRot)) return SendClientMessage(playerid, RED, "[USAGE]: /rotatey [rotation]");
	if(YRot < 0) return SendClientMessage(playerid, RED, "Please enter a rotation coordinate to rotate the object.");
	ObjectInfo[playerid][oRotY] = ObjectInfo[playerid][oRotY] + YRot;
	SetObjectRot(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oRotX], ObjectInfo[playerid][oRotY], ObjectInfo[playerid][oRotZ]);
	SendClientMessage(playerid, WHITE, "Object rotated.");
	return true;
}

CMD:rotatez(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	new Float:ZRot;
	if(IsPlayerEditingObject{playerid} == false) return SendClientMessage(playerid, RED, "You are not editing any objects to rotate.");
	if(IsPlayerAttachingObject{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command with an attached object, use /detachobject");
	if(sscanf(params, "f", ZRot)) return SendClientMessage(playerid, RED, "[USAGE]: /rotatez [rotation]");
	if(ZRot < 0) return SendClientMessage(playerid, RED, "Please enter a rotation coordinate to rotate the object.");
	ObjectInfo[playerid][oRotZ] = ObjectInfo[playerid][oRotZ] + ZRot;
	SetObjectRot(ObjectInfo[playerid][oCurrent], ObjectInfo[playerid][oRotX], ObjectInfo[playerid][oRotY], ObjectInfo[playerid][oRotZ]);
	SendClientMessage(playerid, WHITE, "Object rotated.");
	return true;
}

CMD:r(playerid, params[])
{
	new msg[64];
	if(chattingwith[playerid] == -1) return SendClientMessage(playerid, RED, "You have not had any private messages to reply to.");
    if(IsMuted{playerid} == 1) return SendClientMessage(playerid, RED, "You cant use this command while you are muted.");
    if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /r [msg]");
    if(PMs{chattingwith[playerid]} == 1) return SendClientMessage(playerid, RED, "That player is currently ignoring private messages.");
    if(!IsPlayerConnected(chattingwith[playerid])) return SendClientMessage(playerid, RED, "The player has disconnected.");
    if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
    {
        format(fstr, sizeof(fstr),"PM To %s (%d): %s", GetName(chattingwith[playerid]), chattingwith[playerid], msg);
        SendClientMessage(playerid, WHITE, fstr);
        format(fstr, sizeof(fstr),"PM From %s (%d): %s", GetPlayerNameEx(playerid), playerid, msg);
        SendClientMessage(chattingwith[playerid], YELLOW, fstr);
        PlayerPlaySound(chattingwith[playerid],1085,0.0,0.0,0.0);
        chattingwith[chattingwith[playerid]] = playerid;
        new astring[100];
        format(astring, sizeof(astring),"PM: %s (%d) to %s (%d): %s", GetPlayerNameEx(playerid), playerid, GetName(chattingwith[playerid]), chattingwith[playerid], msg);
        Log("logs/commands.log", astring);
	}
	return true;
}

CMD:tog(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
	    new name[24], number;
        if(sscanf(params, "s[64]D", name, number)) {
            SendClientMessage(playerid, COLOR_GREY, "USAGE: /tog [name] [number]");
            SendClientMessage(playerid, COLOR_GREY, "Available names: pms, join, quit, kick, timeout, menus, nametags, drawdistance");
            SendClientMessage(playerid, COLOR_GREY, "Available names: fps");
            return 1;
        }
        if(strcmp(params, "pms", true) == 0)
		{
			if(PMs{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off your PMs and will no longer recieve any.");
			    PMs{playerid} = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on your PMs and will now be able recieve them.");
			    PMs{playerid} = 1;
			}
   		}
        if(strcmp(params, "join", true) == 0)
		{
			if(JoinMsg{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off the Join messages. You will no longer see when someone joins.");
			    JoinMsg{playerid} = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on the Join messages. You will now be able to see when someone joins.");
			    JoinMsg{playerid} = 1;
			}
   		}
        if(strcmp(params, "quit", true) == 0)
		{
			if(QuitMsg{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off the Quit messages. You will no longer see when someone quits.");
			    QuitMsg{playerid} = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on the Quit messages. You will now be able to see when someone quits.");
			    QuitMsg{playerid} = 1;
			}
   		}
        if(strcmp(params, "kick", true) == 0)
		{
			if(KickMsg{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off the Kick messages. You will no longer see when someone gets kicked.");
			    KickMsg{playerid} = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on the Kick messages. You will now be able to see when someone gets kicked.");
			    KickMsg{playerid} = 1;
			}
   		}
        if(strcmp(params, "timeout", true) == 0)
		{
			if(TimeoutMsg{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off the Timeout messages. You will no longer see when someone timesout.");
			    TimeoutMsg{playerid} = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on the Timeout messages. You will now be able to see when someone timesout.");
			    TimeoutMsg{playerid} = 1;
			}
   		}
        if(strcmp(params, "menus", true) == 0)
		{
			if(TDMenu{playerid} == 0)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled your Menus. You will see menus using textdraws.");
			    TDMenu{playerid} = 1;
			}
			else if(TDMenu{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled your Menus. You will see menus using text.");
			    TDMenu{playerid} = 2;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled your Menus. You will see menus using dialogs.");
			    TDMenu{playerid} = 0;
			}
   		}
        if(strcmp(params, "nametags", true) == 0)
		{
			if(NameTags{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off Name Tags. You will no longer see other players nametags.");
			    NameTags{playerid} = 0;
			    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, false);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on Name Tags. You will now be able to see other players nametags.");
			    NameTags{playerid} = 1;
			    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, true);
			}
   		}
        if(strcmp(params, "drawdistance", true) == 0)
		{
		    new string[128];
	        if(sscanf(params, "d", number)) {
	            SendClientMessage(playerid, COLOR_GREY, "USAGE: /tog drawdistance [distance]");
	            SendClientMessage(playerid, COLOR_GREY, "Default: 70, Minimum: 5, Max: 100");
		        format(string, sizeof(string), "Current Distance: %d", NTDD{playerid});
		        SendClientMessage(playerid, COLOR_GRAD6, string);
	            return 1;
	        }
	        if(number < 4 || number > 101)
				return SendClientMessage(playerid, RED, "Default: 70, Minimum: 0, Max: 100. Please choose a number between those.");

            SetNameTagDrawDistance(number);
            NTDD{playerid} = number;
		    format(string, sizeof(string), "You've set Name Tag Draw Distance to: %d", number);
		    SendClientMessage(playerid, COLOR_YELLOW, string);
		    SendClientMessage(playerid, COLOR_YELLOW, "Higher settings will yield less performance.");
   		}
        if(strcmp(params, "fps", true) == 0)
		{
			if(TogFPS{playerid} == 1)
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled off your FPS Counter.");
			    TogFPS{playerid} = 0;
			    HideFPSCounter(playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_YELLOW, "You have toggled on your FPS Counter");
			    TogFPS{playerid} = 1;
			    ShowFPSCounter(playerid);
			}
   		}
    }
    else { return 1; }
    return 1;
}

CMD:pm(playerid, params[])
{
	new id, msg[64];
    if(IsMuted{playerid} == 1) return SendClientMessage(playerid, RED, "You cant use this command while you are muted.");
    if(sscanf(params, "us[64]", id, msg)) return SendClientMessage(playerid, RED, "[USAGE]: /pm [playerid] [msg]");
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid, RED, "Player not found.");
    if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
    if(playerid == id) return SendClientMessage(playerid, RED, "You cannot PM yourself.");
    if(PMs{playerid} == 0) return SendClientMessage(playerid, RED, "That player is currently ignoring private messages.");
    {
        format(fstr, sizeof(fstr), "PM To %s (%d): %s", GetName(id), id, msg);
        SendClientMessage(playerid, WHITE, fstr);
        format(fstr, sizeof(fstr), "PM From %s (%d): %s", GetPlayerNameEx(playerid), playerid, msg);
        SendClientMessage(id, YELLOW, fstr);
        SendClientMessage(id, LIGHTGREEN, "Use /r [msg] to quick reply to this PM.");
        PlayerPlaySound(id,5204,0.0,0.0,0.0);
        chattingwith[id] = playerid;
        new astring[100];
        format(astring, sizeof(astring),"PM: %s (%d) to %s (%d): %s", GetPlayerNameEx(playerid), playerid, GetName(id), id, msg);
        Log("logs/commands.log", astring);

    }
	return true;
}

CMD:mask(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
	if(HasBandanaAttached{playerid} == false)
	{
		SetPlayerAttachedObject(playerid, 0, 18912, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);
		HasBandanaAttached{playerid} = true;
		return true;
	}
	else if(HasBandanaAttached{playerid} == true)
	{
        if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
		{
			RemovePlayerAttachedObject(playerid, 0);
        	HasBandanaAttached{playerid} = false;
        }
	}
	return true;
}

CMD:shield(playerid, params[])
{
	if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only Law Enforcement Personel Can Use Riot Sheilds.");
	if(HasShieldAttached{playerid} == false)
	{
		SetPlayerAttachedObject(playerid, 1, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
		HasShieldAttached{playerid} = true;
		return true;
	}
	else if(HasShieldAttached{playerid} == true)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
		{
			RemovePlayerAttachedObject(playerid, 1);
			HasShieldAttached{playerid} = false;
		}
	}
	return true;
}

CMD:ad(playerid, params[])
{
    new msg[64];
    if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /ad [msg]");
    if(IsMuted{playerid} == 1) return SendClientMessage(playerid, RED, "You cant use this command while you are muted.");
    if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your ad can only contain 1-64 characters.");
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer30]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer30] = gettime();
    
	format(fstr, sizeof(fstr), "[ADVERT]: %s - [CONTACT]: %s (%d)", msg, GetPlayerNameEx(playerid), playerid);
    SendClientMessageToAll(LIGHTGREEN, fstr);
    return true;
}

CMD:hit(playerid, params[])
{
    new amount;
  	if(GetTeam{playerid} != CLASS_CIV)
	  	return SendClientMessage(playerid, RED, "Only civilians can place hits.");
    if(sscanf(params, "ud", ID, amount))
		return SendClientMessage(playerid, RED, "[USAGE]: /hit [playerid] [amount]");
	if(amount < 10000)
		return SendClientMessage(playerid, RED, "The hit must be atleast $10K.");
	if(!IsPlayerConnected(ID))
		return SendClientMessage(playerid, RED, "Player not found.");
	if(ID == playerid)
		return SendClientMessage(playerid, RED, "You cant place a hit on yourself.");
	if(GetPlayerCash(playerid) < amount)
		return SendClientMessage(playerid, RED, "Insufficient funds.");
	if(HasHit[ID] > 0)
		return SendClientMessage(playerid, RED, "That player already has a hit contract placed on them.");

	HasHit[ID] = amount;
	HasPlacedHit[ID] = playerid;
	format(fstr, sizeof(fstr), "You have placed a hit on %s (%d) for $%s.", GetName(ID), ID, number_format(amount));
	SendClientMessage(playerid, YELLOW, fstr);
	format(fstr2, sizeof(fstr2), "[HIT]: %s (%d) has just placed a hit on %s (%d) for $%s.", GetPlayerNameEx(playerid), playerid, GetName(ID), ID, number_format(amount));
	SendClientMessageToAll(RED, fstr2);
    return true;
}

CMD:cancelhit(playerid, params[])
{
	new contract_id;
  	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if(sscanf(params, "u", contract_id)) return SendClientMessage(playerid, RED, "[USAGE]: /cancelhit [playerid]");
	if(!IsPlayerConnected(contract_id)) return SendClientMessage(playerid, RED, "Player not found.");
	if(contract_id == playerid) return SendClientMessage(playerid, RED, "You cant cancel your own hit.");
	if(HasHit[contract_id] > 0 && HasPlacedHit[contract_id] == playerid)
	{
	    HasHit[contract_id] = 0;
	    HasPlacedHit[contract_id] = -1;
		format(fstr, sizeof(fstr), "[HIT]: %s (%d) has cancelled the hit they placed on %s (%d).", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(contract_id), contract_id);
   		SendClientMessageToAll(RED, fstr);
	}
	else
	{
	    SendClientMessage(playerid, RED, "You can only cancel hits that you have placed.");
	}
	return 1;
}

CMD:hits(playerid, params[])
{
    new count = 0;
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can view the hit list.");
    foreach(Player, i)
    {
	    if(HasHit[i] > 0)
	    {
		    SendClientMessage(playerid, BLUE, "Listing all Hits:");
		    format(fstr, sizeof(fstr), "Hit: %s (%d) - Price: $%s", GetName(i), i, number_format(HasHit[i]));
		    SendClientMessage(playerid, WHITE, fstr);
		    count++;
		}
	}
	if(count == 0)
	{
		SendClientMessage(playerid, RED, "There are currently no hit contracts at the moment.");
	}
	return true;
}

CMD:breakcuffs(playerid, params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer5]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//1 mins
    TimerInfo[playerid][CMD_timer5] = gettime();
    if(HasBeenCuffed{playerid} == false) return SendClientMessage(playerid, RED, "You're not currently cuffed.");
    new BreakChances = random(5);
    switch(BreakChances)
    {
        case 0:
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have successfully broken the cuffs!");
			TogglePlayerControllable(playerid, true);
			HasBeenCuffed{playerid} = false;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		case 1..4: return SendClientMessage(playerid, RED, "You have failed to break free.");
    }
    new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /breakcuffs", GetPlayerNameEx(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:uncuff(playerid, params[])
{
    new targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessage(playerid,RED, "[USAGE]: /uncuff [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(targetid == playerid) return SendClientMessage(playerid, RED, "You cant uncuff yourself.");
    if(HasBeenCuffed{targetid} == false) return SendClientMessage(playerid, RED, "That player is not hand cuffed.");
    if(!ProxDetectorS(5.0, playerid, targetid)) return SendClientMessage(playerid, RED, "That player is not close enough.");
	if(IsPlayerInAnyVehicle(targetid) && IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant uncuff players through vehicles.");
    if(IsACop(playerid))
    {
        GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 5);
        GameTextForPlayer(playerid, "~r~Suspect Uncuffed", 3000, 5);
        HasBeenCuffed{targetid} = false;
        SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
    }
    else
    {
        SendClientMessage(playerid, RED, "Only law enforcement can uncuff players.");
    }
    new astring[100];
    format(astring,sizeof(astring),"%s (%d) typed: /uncuff %d", GetPlayerNameEx(playerid), playerid, targetid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:cure(playerid, params[])
{
    if(GetTeam{playerid} == CLASS_MEDIC || GetPlayerSkill(playerid) == 6)
	{
	    if((gettime() - 60) < TimerInfo[playerid][CMD_timer7])
		{
			SendClientMessage(playerid, RED, "Please wait before using this command again.");//1 mins
			TimerInfo[playerid][CMD_timer7] = gettime();
	    }
	    else
	    {
	    	SendClientMessage(playerid, RED, "Sorry! This command hasn't been finished yet!");
	    }
	}
	else
	{
		SendClientMessage(playerid, RED, "Only medics can heal players.");
	}
	return 1;
}

CMD:heal(playerid, params[])
{
    new healee, price;
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(sscanf(params, "ud", healee, price)) return SendClientMessage(playerid, RED, "[USAGE]: /heal [playerid] [price]");
    if(GetTeam{playerid} != CLASS_MEDIC || GetPlayerSkill(playerid) != 6) return SendClientMessage(playerid, RED, "Only medics can heal players.");
	if(!IsPlayerConnected(healee)) return SendClientMessage(playerid, RED, "Player not found.");
    if(healee == playerid) return SendClientMessage(playerid, RED, "You cant heal yourself.");
    new Float:health;
    GetPlayerHealth(healee, health);
    if(health >= 100.0) return SendClientMessage(playerid, RED, "That player is not wounded.");
    if(!ProxDetectorS(5.0, playerid, healee)) return SendClientMessage(playerid, RED, "That player is not close enough.");
    if(IsPlayerInAnyVehicle(healee) && IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant heal players through vehicles.");
    {
	    if((gettime() - 60) < TimerInfo[playerid][CMD_timer7]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//1 mins
	    TimerInfo[playerid][CMD_timer7] = gettime();
        format(fstr, sizeof(fstr), "You have offered to heal %s (%d) for $%s, please wait for a reply.", GetName(healee), healee, number_format(price));
        SendClientMessage(playerid, YELLOW, fstr);
        format(fstr2, sizeof(fstr2), "Medic %s (%d) has offered to heal you for $%s, use /(accept/decline)heal", GetPlayerNameEx(playerid), playerid, number_format(price));
        SendClientMessage(healee, YELLOW, fstr2);
        offerer_id4[healee] = playerid;
        offer_price4[healee] = price;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", healee);
    }
    new astring[100];
    format(astring,sizeof(astring),"%s (%d) typed: /heal %d %d", GetPlayerNameEx(playerid), playerid, healee, price);
    Log("logs/commands.log", astring);
    return true;
}

CMD:accept(playerid, params[])
{
	new Float:cx, Float:cy, Float:cz;
    if(IsPlayerConnected(playerid))
	{
        if(isnull(params)) {
            SendClientMessage(playerid, COLOR_GREY, "USAGE: /accept [name]");
            SendClientMessage(playerid, COLOR_GREY, "Available names: heal, veh, biz, refill, fix, mats, house, gun, bribe");
            SendClientMessage(playerid, COLOR_GREY, "Available names: nos, hyd, lawyer, defense");
            return 1;
        }
        if(strcmp(params, "heal", true) == 0)
		{
			if(offerer_id4[playerid] == -1) return SendClientMessage(playerid, RED, "You have not been offered medical services recently.");
			if(GetPlayerCash(playerid) < offer_price4[playerid]) return SendClientMessage(playerid, RED, "Insufficient funds.");
		    if(!ProxDetectorS(5.0, playerid, offerer_id4[playerid])) return SendClientMessage(playerid, RED, "The person offering is not close enough.");
			SetPlayerHealth(playerid, 100);
			format(fstr, sizeof(fstr), "Medic %s (%d) has just healed you for $%s", GetName(offerer_id4[playerid]), playerid, number_format(offer_price4[playerid]));
			SendClientMessage(playerid, YELLOW, fstr);
			GivePlayerCash(playerid, - offer_price4[playerid]);
			offerer_id4[playerid] = -1;
			format(fstr, sizeof(fstr), "You have healed %s (%d) for $%s", GetName(offerer_id4[playerid]), playerid, number_format(offer_price4[playerid]));
			SendClientMessage(playerid, YELLOW, fstr);
			SetPlayerScore(offerer_id4[playerid], GetPlayerScore(playerid) +1);
			GivePlayerCash(offerer_id4[playerid], offer_price4[playerid]);
   		}
        else if(strcmp(params, "veh", true) == 0)
		{
			new Float:posX, Float:posY, Float:posZ;
			GetPlayerPos(offerer_id[playerid], posX, posY, posZ);
		    if(!IsPlayerConnected(offerer_id[playerid]))
				return SendClientMessage(playerid, RED, "The offerer has disconnected.");
		    if(offerer_id[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered a vehicle recently.");
			if(GetPlayerCash(playerid) < offer_price[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ))
				return SendClientMessage(playerid, RED, "You need to be near the offerer to buy the vehicle from them.");
			new string[150], string2[150];
			GivePlayerCash(offerer_id[playerid], offer_price[playerid]);
			GivePlayerCash(playerid, - offer_price[playerid]);
			VehicleInfo[offeredveh[playerid]][vPrice] = offer_price[playerid];
			new vowner[24], vplate[32];
			format(vowner, sizeof(vowner), "%s", GetName(playerid));
			format(vplate, sizeof(vplate), "ACnR");
			VehicleInfo[offeredveh[playerid]][vOwner] = vowner;
			VehicleInfo[offeredveh[playerid]][vPlate] = vplate;
			VehicleInfo[offeredveh[playerid]][vLocked] = 0;
			SaveVehicleStats(offeredveh[playerid]);
			RemovePlayerFromVehicle(offerer_id[playerid]);
			TogglePlayerControllable(offerer_id[playerid], true);
			format(string, sizeof(string), "Vehicle sold to %s for $%s", GetPlayerNameEx(playerid), number_format(offer_price[playerid]));
			SendClientMessage(offerer_id[playerid], WHITE, string);
			format(string2, sizeof(string2), "Vehicle purchased from %s for $%s", GetPlayerNameEx(offerer_id[playerid]), number_format(offer_price[playerid]));
			SendClientMessage(playerid, WHITE, string2);
			offer_price[playerid] = -1;
			offerer_id[playerid] = -1;
			offeredveh[playerid] = -1;
   		}
        else if(strcmp(params, "biz", true) == 0)
		{
			new Float:posX, Float:posY, Float:posZ;
			GetPlayerPos(offerer_id2[playerid], posX, posY, posZ);
		    if(!IsPlayerConnected(offerer_id2[playerid]))
				return SendClientMessage(playerid, RED, "The offerer has disconnected.");
		    if(offerer_id2[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered a business recently.");
			if(GetPlayerCash(playerid) < offer_price2[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ))
				return SendClientMessage(playerid, RED, "You need to be near the offerer to buy the business from them.");
		    new string[150], string2[150];
		    new file[40];
			format(file, sizeof(file), BIZ_FILE, sellingbizid[playerid]);
			format(bizlabel, sizeof(bizlabel), "%s's business", GetName(playerid));
			Update3DTextLabelText(bLabel[BizID[playerid]], YELLOW, bizlabel);
			new INI:bFilee = INI_Open(file);
			INI_WriteString(bFilee, "bName", bizlabel);
			INI_WriteString(bFilee, "bOwner", GetName(playerid));
			INI_Close(bFilee);
			GivePlayerCash(offerer_id2[playerid], BizInfo[sellingbizid[playerid]][bPrice]/2);
			GivePlayerCash(playerid, - offer_price2[playerid]);
			GivePlayerCash(offerer_id2[playerid], offer_price2[playerid]);
			format(string, sizeof(string), "Business sold to %s for $%s", GetName(playerid), number_format(offer_price2[playerid]));
			SendClientMessage(offerer_id2[playerid], WHITE, string);
			format(string2, sizeof(string2), "Business purchased from %s for $%s", GetName(offerer_id2[playerid]), number_format(offer_price2[playerid]));
			SendClientMessage(playerid, WHITE, string2);
			offer_price2[playerid] = -1;
			offerer_id2[playerid] = -1;
			sellingbizid[playerid] = -1;
   		}
        else if(strcmp(params, "refill", true) == 0)
		{
			if(offerer_id9[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered mechanical services recently.");
			if(GetPlayerCash(playerid) < offer_price8[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
			if(!IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
			GetPlayerPos(offerer_id9[playerid], cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "You must be near the offerer to buy mechanical services from them.");

		    GivePlayerCash(offerer_id9[playerid], offer_price9[playerid]);
		    GivePlayerCash(playerid, - offer_price9[playerid]);
			new veh = GetPlayerVehicleID(playerid);
			GetVehicleFuel[veh] = 100;
			offerer_id9[playerid] = -1;
			SendClientMessage(offerer_id9[playerid], COLOR_LIGHTBLUE, "Vehicle refilled.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your vehicle has been refilled.");
   		}
        else if(strcmp(params, "fix", true) == 0)
		{
			if(offerer_id8[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered mechanical services recently.");
			if(GetPlayerCash(playerid) < offer_price8[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
			if(!IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
			GetPlayerPos(offerer_id8[playerid], cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "You must be near the offerer to buy mechanical services from them.");

		    GivePlayerCash(offerer_id8[playerid], offer_price8[playerid]);
		    GivePlayerCash(playerid, - offer_price8[playerid]);
			RepairVehicle(GetPlayerVehicleID(playerid));
			offerer_id8[playerid] = -1;
			SendClientMessage(offerer_id8[playerid], COLOR_LIGHTBLUE, "Vehicle fixed.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Your vehicle has been fixed.");
   		}
        else if(strcmp(params, "mats", true) == 0)
		{
			//if(DegreeInfo[playerid][dWeapons] < 1) return SendClientMessage(playerid, RED, "This command is restricted to Weapons Degree.");
			if(GetTeam{playerid} == CLASS_MEDIC)
				return SendClientMessage(playerid, RED, "Medics cannot use this command!");
			if(IsACop(playerid))
				return SendClientMessage(playerid, RED, "Law Enforcement cannot use this command!");
			if(offerer_id6[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered a gun recently.");
			if(GetPlayerCash(playerid) < offer_price6[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer_id6[playerid], cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "You must be near the offerer to buy mats from them.");

		    GivePlayerCash(offerer_id6[playerid], offer_price6[playerid]);
		    GivePlayerCash(playerid, - offer_price6[playerid]);
			PlayerInfo[offerer_id6[playerid]][pMaterials] = PlayerInfo[offerer_id6[playerid]][pMaterials] - matsbuying[playerid];
			PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] + matsbuying[playerid];
			offerer_id6[playerid] = -1;
			SendClientMessage(offerer_id6[playerid], WHITE, "Mats sold.");
			SendClientMessage(playerid, WHITE, "Mats received.");
   		}
        else if(strcmp(params, "house", true) == 0)
		{
			if(offerer_id3[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered a house recently.");
			if(GetPlayerCash(playerid) < offer_price3[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
		    if(!ProxDetectorS(5.0, playerid, offerer_id3[playerid]))
				return SendClientMessage(playerid, RED, "You need to be near the offerer to buy the house from them.");

			new file[40];
			format(file, sizeof(file), HOUSE_FILE, sellinghouseid[playerid]);
			GivePlayerCash(offerer_id3[playerid], offer_price3[playerid]);
			new str[150];
			format(str,sizeof(str),"You have successfully sold your house to %s for $%s.", GetName(playerid), number_format(offer_price3[playerid]));
			SendClientMessage(offerer_id3[playerid],WHITE,str);
			HouseInfo[sellinghouseid[playerid]][hValue] = HouseInfo[sellinghouseid[playerid]][hValue] - ReturnPercent(GetHouseValue(sellinghouseid[playerid]), HOUSE_SELLING_PERCENT_RETURN);
			new gname[40], gowner[24];
			format(gowner,sizeof(gowner), "%s", GetName(playerid));
			format(gname,sizeof(gname), "%s's house", GetName(playerid));
			HouseInfo[sellinghouseid[playerid]][hOwner] = gowner;
			HouseInfo[sellinghouseid[playerid]][hName] = gname;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[sellinghouseid[playerid]][hKeyOwner1] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner2] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner3] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner4] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner5] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner6] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner7] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner8] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner9] = stringg;
			HouseInfo[sellinghouseid[playerid]][hKeyOwner10] = stringg;
			GivePlayerCash(playerid, - offer_price3[playerid]);
			new str2[150];
			format(str2, sizeof(str2),"You have successfully bought a house from %s for $%s.", GetName(offerer_id3[playerid]), number_format(offer_price3[playerid]));
			SendClientMessage(playerid, WHITE, str2);
			/*Loop(h2, MAX_HOUSES)
			{
				if(IsHouseInRangeOfHouse(sellinghouseid[playerid], h2, VALUE_RANGE_BETWEEN_HOUSES) && h2 != sellinghouseid[playerid])
				{
					new file2[24];
					format(file2, sizeof(file2), HOUSE_FILE, h2);
					HouseInfo[h2][hValue] = HouseInfo[h2][hValue] - ReturnPercent(GetHouseValue(h2), HOUSE_SOLD_AREA_VALUE);
					UpdateHouseText(h2);
					SaveHouseStats(h2);
				}
			}*/
			UpdateHouseText(sellinghouseid[playerid]);
			SaveHouseStats(sellinghouseid[playerid]);
   		}
        else if(strcmp(params, "gun", true) == 0)
		{
			if(offerer_id5[playerid] == -1)
				return SendClientMessage(playerid, RED, "You haven't been offered a gun recently.");
			if(GetPlayerCash(playerid) < offer_price5[playerid])
				return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer_id5[playerid], cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "You must be near the offerer to buy a gun from them.");
			offerer_id5[playerid] = -1;
			switch (gunbuying[playerid])
			{
			    case 1:
			    {
				    GivePlayerCash(offerer_id5[playerid], offer_price5[playerid]);
				    GivePlayerCash(playerid, - offer_price5[playerid]);
					PlayerInfo[offerer_id5[playerid]][pMaterials] = PlayerInfo[offerer_id5[playerid]][pMaterials] - 50;
					GivePlayerWeapon(playerid, 24, 99999);
					SendClientMessage(offerer_id5[playerid], WHITE, "Weapon sold, you used 50 materials to fabricate the firearm.");
				}
				case 2:
				{
				    GivePlayerCash(offerer_id5[playerid], offer_price5[playerid]);
				    GivePlayerCash(playerid, - offer_price5[playerid]);
					PlayerInfo[offerer_id5[playerid]][pMaterials] = PlayerInfo[offerer_id5[playerid]][pMaterials] - 100;
					GivePlayerWeapon(playerid, 29, 99999);
					SendClientMessage(offerer_id5[playerid], WHITE, "Weapon sold, you used 100 materials to fabricate the firearm.");
				}
				case 3:
				{
				    GivePlayerCash(offerer_id5[playerid], offer_price5[playerid]);
				    GivePlayerCash(playerid, - offer_price5[playerid]);
					PlayerInfo[offerer_id5[playerid]][pMaterials] = PlayerInfo[offerer_id5[playerid]][pMaterials] - 200;
					GivePlayerWeapon(playerid, 27, 99999);
					SendClientMessage(offerer_id5[playerid], WHITE, "Weapon sold, you used 200 materials to fabricate the firearm.");
				}
				case 4:
				{
				    GivePlayerCash(offerer_id5[playerid], offer_price5[playerid]);
				    GivePlayerCash(playerid, - offer_price5[playerid]);
					PlayerInfo[offerer_id5[playerid]][pMaterials] = PlayerInfo[offerer_id5[playerid]][pMaterials] - 250;
					GivePlayerWeapon(playerid, 31, 99999);
					SendClientMessage(offerer_id5[playerid], WHITE, "Weapon sold, you used 250 materials to fabricate the firearm.");
				}
				case 5:
				{
				    GivePlayerCash(offerer_id5[playerid], offer_price5[playerid]);
				    GivePlayerCash(playerid, - offer_price5[playerid]);
					PlayerInfo[offerer_id5[playerid]][pMaterials] = PlayerInfo[offerer_id5[playerid]][pMaterials] - 500;
					GivePlayerWeapon(playerid, 34, 99999);
					SendClientMessage(offerer_id5[playerid], WHITE, "Weapon sold, you used 500 materials to fabricate the firearm.");
				}
			}
			SendClientMessage(playerid, WHITE, "Weapon received.");
   		}
        else if(strcmp(params, "bribe", true) == 0)
		{
		    if(!IsACop(playerid)) return SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
			{
			    if(Bribe[playerid] == -1)
			    {
			        SendClientMessage(playerid, RED, "You have not been offered any bribes lately.");
			    }
		        else if(GetPlayerWantedLevel(BribeFrom[playerid]) >= 4)
				{
				    GivePlayerCash(playerid, Bribe[playerid]);
				    GivePlayerCash(BribeFrom[playerid], -Bribe[playerid]);
				    SendClientMessage(BribeFrom[playerid], LIGHTGREEN, "Your bribe was accepted.");
					SendClientMessage(playerid, YELLOW, "You have accepted the bribe.");
					SetPlayerWantedLevel(BribeFrom[playerid], 0);
					BribeTo[BribeFrom[playerid]] = -1;
					Bribe[playerid] = -1;
					BribeFrom[playerid] = -1;
				}
				else
				{
				    SendClientMessage(playerid, RED, "That player is no longer wanted.");
					BribeTo[BribeFrom[playerid]] = -1;
					Bribe[playerid] = -1;
					BribeFrom[playerid] = -1;
				}
		    }
   		}
        else if(strcmp(params, "nos", true) == 0)
		{
		    new offerer = GetPVarInt(playerid, "Skill_NOSOfferer"), price = GetPVarInt(playerid, "Skill_NOSPrice");
			if(!GetPVarType(playerid, "Skill_NOSOfferer")) return SendClientMessage(playerid, RED, "You have not been offered mechanical services recently.");
			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer, cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "The person offering is not close enough.");
			format(fstr, sizeof(fstr), "Mechanic %s (%d) has just added nos to your vehicle for $%s", GetPlayerNameEx(offerer), offerer, number_format(price));
			SendClientMessage(playerid, YELLOW, fstr);
			GivePlayerCash(playerid, - price);
			
			format(fstr, sizeof(fstr), "You have added nos to %s's (%d) vehicle for $%s", GetPlayerNameEx(playerid), playerid, number_format(price));
			SendClientMessage(offerer, YELLOW, fstr);
			SetPlayerScore(offerer, GetPlayerScore(offerer) +1);
			GivePlayerCash(offerer, price);
			new nostogive;
            /*new level = PlayerInfo[playerid][pMechSkill];
 		 	if(level >= 0 && level < 50) { nostogive = 1009; }
    		else if(level >= 50 && level < 100) { nostogive = 1009; }
         	else if(level >= 100 && level < 200) { nostogive = 1008; }
            else if(level >= 200 && level < 400) { nostogive = 1008; }
            else if(level >= 400) { nostogive = 1010; }*/
            nostogive = 1010;
            AddVehicleComponent(GetPlayerVehicleID(playerid),nostogive);
            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
        	PlayerPlaySound(offerer,1133,0.0,0.0,0.0);

			DeletePVar(playerid, "Skill_NOSOfferer");
		    DeletePVar(playerid, "Skill_NOSPrice");
   		}
        else if(strcmp(params, "hyd", true) == 0)
		{
		    new offerer = GetPVarInt(playerid, "Skill_HYDOfferer"), price = GetPVarInt(playerid, "Skill_HYDPrice");
			if(!GetPVarType(playerid, "Skill_HYDOfferer")) return SendClientMessage(playerid, RED, "You have not been offered mechanical services recently.");
			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer, cx, cy, cz);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
				return SendClientMessage(playerid, RED, "The person offering is not close enough.");
			format(fstr, sizeof(fstr), "Mechanic %s (%d) has just added hydraulics to your vehicle for $%s", GetPlayerNameEx(offerer), offerer, number_format(price));
			SendClientMessage(playerid, YELLOW, fstr);
			GivePlayerCash(playerid, - price);
			
			format(fstr, sizeof(fstr), "You have added hydraulics to %s's (%d) vehicle for $%s", GetPlayerNameEx(playerid), playerid, number_format(price));
			SendClientMessage(offerer, YELLOW, fstr);
			SetPlayerScore(offerer, GetPlayerScore(offerer) +1);
			GivePlayerCash(offerer, price);

            PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
        	PlayerPlaySound(offerer,1133,0.0,0.0,0.0);

			AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);

			DeletePVar(playerid, "Skill_HYDOfferer");
		    DeletePVar(playerid, "Skill_HYDPrice");
   		}
        else if(strcmp(params, "lawyer", true) == 0)
		{
		    new offerer = GetPVarInt(playerid, "Skill_FREEOfferer"), price = GetPVarInt(playerid, "Skill_FREEPrice");
			if(!GetPVarType(playerid, "Skill_FREEOfferer")) return SendClientMessage(playerid, RED, "You have not been offered legal services recently.");
			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer, cx, cy, cz);
			if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
			{
				format(fstr, sizeof(fstr), "Lawyer %s (%d) has just freed %s from Prison for $%s", GetPlayerNameEx(offerer), offerer, GetPlayerNameEx(playerid), number_format(price));
				SendClientMessage(playerid, YELLOW, fstr);
				format(fstr, sizeof(fstr), "You have freed %s (%d) from prison for $%s", GetPlayerNameEx(playerid), playerid, number_format(price));
				SendClientMessage(offerer, YELLOW, fstr);
				format(fstr, sizeof(fstr), "Lawyer %s (%d) has just freed %s from Prison for $%s", GetPlayerNameEx(offerer), offerer, GetPlayerNameEx(playerid), number_format(price));
				SendXMessage(playerid,fstr);

				SetPlayerScore(offerer, GetPlayerScore(offerer) +1);
				GivePlayerCash(offerer, price);
				GivePlayerCash(playerid, - price);

				DeletePVar(playerid, "Skill_FREEOfferer");
			    DeletePVar(playerid, "Skill_FREEPrice");

				IsJailed{playerid} = false;
		    	SetPlayerHealth(playerid, 100.00);
		    	SetPlayerInterior(playerid, 3);
		    	SetPlayerPos(playerid, 200.6972, 168.2653, 1003.0234);
		    	SetPlayerFacingAngle(playerid, 89.0391);
		    }
		    else {
				SendClientMessage(playerid, RED, "The person offering is not close enough.");
		    }
   		}
        else if(strcmp(params, "defense", true) == 0)
		{
		    new offerer = GetPVarInt(playerid, "Skill_DEFENDOfferer"), price = GetPVarInt(playerid, "Skill_DEFENDPrice");
			if(!GetPVarType(playerid, "Skill_DEFENDOfferer")) return SendClientMessage(playerid, RED, "You have not been offered legal services recently.");
			if(GetPlayerCash(playerid) < price) return SendClientMessage(playerid, RED, "Insufficient funds.");
			GetPlayerPos(offerer, cx, cy, cz);
			if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
			{
				format(fstr, sizeof(fstr), "Lawyer %s (%d) has just defended %s for $%s", GetPlayerNameEx(offerer), offerer, GetPlayerNameEx(playerid), number_format(price));
				SendClientMessage(playerid, YELLOW, fstr);
				format(fstr, sizeof(fstr), "You have defended %s (%d) for $%s", GetPlayerNameEx(playerid), playerid, number_format(price));
				SendClientMessage(offerer, YELLOW, fstr);
				format(fstr, sizeof(fstr), "Lawyer %s (%d) has just provided legal defense to %s for $%s", GetPlayerNameEx(offerer), offerer, GetPlayerNameEx(playerid), number_format(price));
				SendXMessage(playerid,fstr);

				SetPlayerScore(offerer, GetPlayerScore(offerer) +1);
				GivePlayerCash(offerer, price);
				GivePlayerCash(playerid, - price);
				
				SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) - 1);

				DeletePVar(playerid, "Skill_DEFENDOfferer");
			    DeletePVar(playerid, "Skill_DEFENDPrice");
		    }
		    else {
				SendClientMessage(playerid, RED, "The person offering is not close enough.");
		    }
   		}
   		else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid Selection.");
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) typed: /accept %s", GetPlayerNameEx(playerid), playerid, strlen(params));
		Log("logs/commands.log", astring);
    }
    else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
    return 1;
}

CMD:decline(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
        if(isnull(params)) {
            SendClientMessage(playerid, COLOR_GREY, "USAGE: /decline [name]");
            SendClientMessage(playerid, COLOR_GREY, "Available names: heal, veh, biz, refill, fix, mats, house, gun, bribe");
            return 1;
        }
		new astring[100];
		format(astring, sizeof(astring), "%s (%d) typed: /decline %s", GetPlayerNameEx(playerid), playerid, strlen(params));
		Log("logs/commands.log", astring);
        if(strcmp(params, "heal", true) == 0)
		{
		    new string[150];
		    if(offerer_id4[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered medical services recently.");
			offer_price4[playerid] = -1;
			offerer_id4[playerid] = -1;
			format(string, sizeof(string), "%s (%d) has declined your offer.", GetPlayerNameEx(playerid), playerid);
			SendClientMessage(offerer_id4[playerid], RED, string);
			SendClientMessage(playerid, WHITE, "Offer declined.");
		}
        if(strcmp(params, "veh", true) == 0)
		{
		    new string[150];
		    if(offerer_id[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered a vehicle recently.");
			offer_price[playerid] = -1;
			offerer_id[playerid] = -1;
			format(string, sizeof(string), "%s (%d) has declined your offer.", GetName(playerid), playerid);
			SendClientMessage(offerer_id[playerid], RED, string);
			SendClientMessage(playerid, WHITE, "Offer declined.");
		}
        if(strcmp(params, "biz", true) == 0)
		{
		    new string[150];
		    if(offerer_id2[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered a business recently.");
			offer_price2[playerid] = -1;
			offerer_id2[playerid] = -1;
			sellingbizid[playerid] = -1;
			format(string, sizeof(string), "%s (%d) has declined your offer.", GetName(playerid), playerid);
			SendClientMessage(offerer_id2[playerid], RED, string);
			SendClientMessage(playerid, WHITE, "Offer declined.");
		}
        if(strcmp(params, "refill", true) == 0)
		{
			if(offerer_id9[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered mechanical services recently.");
			offerer_id9[playerid] = -1;
			offer_price9[playerid] = -1;
			SendClientMessage(offerer_id8[playerid], WHITE, "Services declined.");
			SendClientMessage(playerid, WHITE, "Services declined.");
		}
        if(strcmp(params, "fix", true) == 0)
		{
			if(offerer_id8[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered mechanical services recently.");
			offerer_id8[playerid] = -1;
			offer_price8[playerid] = -1;
			SendClientMessage(offerer_id8[playerid], WHITE, "Services declined.");
			SendClientMessage(playerid, WHITE, "Services declined.");
		}
        if(strcmp(params, "mats", true) == 0)
		{
			if(offerer_id6[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered any materials recently.");
			offerer_id6[playerid] = -1;
			offer_price6[playerid] = -1;
			matsbuying[playerid] = 0;
			SendClientMessage(offerer_id6[playerid], WHITE, "Mats declined.");
			SendClientMessage(playerid, WHITE, "Mats declined.");
		}
        if(strcmp(params, "house", true) == 0)
		{
		    new string[150];
		    if(offerer_id3[playerid] == -1) return SendClientMessage(playerid, RED, "You haven't been offered a house recently.");
			offer_price3[playerid] = -1;
			offerer_id3[playerid] = -1;
			sellinghouseid[playerid] = -1;
			format(string, sizeof(string), "%s (%d) has declined your offer.", GetName(playerid), playerid);
			SendClientMessage(offerer_id3[playerid], RED, string);
			SendClientMessage(playerid, WHITE, "Offer declined.");
		}
        if(strcmp(params, "gun", true) == 0)
		{
			if(GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Medics cannot use this command!");
			if(IsACop(playerid)) return SendClientMessage(playerid, RED, "Law Enforcement cannot use this command!");
			if(offerer_id5[playerid] == -1) return SendClientMessage(playerid, RED, "This have not been offered a gun recently.");
			SendClientMessage(offerer_id5[playerid], WHITE, "Weapon declined.");
			SendClientMessage(playerid, WHITE, "Weapon declined.");
			offerer_id5[playerid] = -1;
			offer_price5[playerid] = -1;
			gunbuying[playerid] = 0;
		}
        if(strcmp(params, "bribe", true) == 0)
		{
		    if(!IsACop(playerid)) return SendClientMessage(playerid, RED,"Only Law Enforcement Can Decline Bribes.");
			{
			    if(BribeFrom[playerid] == 0)
				{
				    SendClientMessage(playerid, RED, "You have not been offered any bribes lately.");
				}
				else
				{
				    format(fstr, sizeof(fstr), "%s has declined your bribe. You've been reported.", GetPlayerNameEx(playerid));
					SendClientMessage(BribeFrom[playerid], RED, fstr);
					SendClientMessage(BribeFrom[playerid], RED, "You've commited a crime (Bribery). Your wanted level has been increased.");
				    SendClientMessage(playerid, YELLOW, "You have declined the bribe.");
				    new current_zone;
		        	current_zone = Player_Zone[BribeFrom[playerid]];
				    format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has just attempted to bribe %s (%d) at %s.", GetName(BribeFrom[playerid]), BribeFrom[playerid], GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
		    		CopRadio(BLUE, fstr);
					SetPlayerWantedLevel(BribeFrom[playerid], GetPlayerWantedLevel(BribeFrom[playerid]) + 2);
					BribeTo[BribeFrom[playerid]] = -1;
					Bribe[playerid] = -1;
					BribeFrom[playerid] = -1;
				}
			}
		}
   		else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid Selection.");
    }
    else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
    return 1;
}

CMD:cutrope(playerid, params[])
{
    if(PlayerInfo[playerid][pScissors] < 1) return SendClientMessage(playerid, RED, "You need a pair of scissors");
    if(HasBeenTied{playerid} == false) return SendClientMessage(playerid, RED, "You're not tied up.");
    if(IsLoggedIn{playerid} == 0) return SendClientMessage(playerid, RED, "You need to be logged in before you can use this command.");
    if((gettime() - 10) < TimerInfo[playerid][CMD_timer6]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//1 mins
    TimerInfo[playerid][CMD_timer6] = gettime();
    new CutChances = random(3);
    switch(CutChances)
    {
    	case 0: return SendClientMessage(playerid, LIGHTGREEN, "You have successfully broken free!"), TogglePlayerControllable(playerid, true);
    	case 1: return SendClientMessage(playerid, RED, "You have failed to break free.");
    	case 2: return SendClientMessage(playerid, RED, "You have failed to break free and broken your pair of scissors."), PlayerInfo[playerid][pScissors] = 0, SaveUserStats(playerid);
    }
    new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /cutrope", GetPlayerNameEx(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:wanted(playerid, params[])
{
	new count = 0;
    if(IsACop(playerid) || PlayerInfo[playerid][pSkill] == 14)
	{
	    foreach(Player, i)
	    {
			new current_zone;
			current_zone = Player_Zone[i];
		    if(GetPlayerWantedLevel(i) > 0)
		    {
			    SendClientMessage(playerid, BLUE, "Listing all Wanted suspects:");
			    format(fstr, sizeof(fstr), "Suspect: %s (%d) - Wanted Level: %d - Location: %s", GetName(i), i, GetPlayerWantedLevel(i), ZoneNames[current_zone][zone_name]);
			    SendClientMessage(playerid, WHITE, fstr);
			    count++;
			}
		}
		if(count == 0)
		{
			SendClientMessage(playerid, RED, "There are currently no wanted suspects at the moment.");
		}
	}
	else
	{
		SendClientMessage(playerid, RED, "You cannot view the wanted list! You must be a Lawyer or Cop.");
	}
	return 1;
}

CMD:fish(playerid, params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can go fishing!");

 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{//Range of 8 for the docks near el que
	    if(IsABoat(GetPlayerVehicleID(playerid)))
	    {
	        SendClientMessage(playerid, -1, "You are fishing! But not really since this command hasn't been finished yet.");
	    }
	}
	return 1;
}

CMD:bail(playerid, params[])
{
	new prisioner, bail[50];
    if(sscanf(params, "us[50]", prisioner, bail)) return SendClientMessage(playerid, RED, "[USAGE]: /bail [playerid] [condition]");
    if(!IsPlayerConnected(prisioner)) return SendClientMessage(playerid, RED, "Player not found.");
    if(strlen(bail) < 1 || strlen(bail) > 24) return SendClientMessage(playerid, RED, "Your bail condition can only contain 1-24 characters.");
    if(IsJailed{prisioner} == false) return SendClientMessage(playerid, RED, "That player is not in jail.");
    if(IsJailed{playerid} == true) return SendClientMessage(playerid, RED, "You cant bail yourself out of jail.");
    new Float:posX, Float:posY, Float:posZ;
	GetPlayerPos(prisioner, posX, posY, posZ);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ))
		return SendClientMessage(playerid, RED, "You need to be near the prisoner to bail them out.");
    if(IsACop(playerid))
    {
	    format(fstr, sizeof(fstr), "You have released %s (%d) on bail. Condition: %s", GetName(prisioner), prisioner, bail);
        SendClientMessage(playerid, YELLOW, fstr);
        format(fstr, sizeof(fstr), "Prisioner %s (%d) has just been released on bail.", GetName(prisioner), prisioner, bail);
        SendClientMessageToAll(ORANGE, fstr);
        format(fstr2, sizeof(fstr2), "%s (%d) has given you bail! Condition: %s", GetPlayerNameEx(playerid), playerid, bail);
        SendClientMessage(prisioner, LIGHTGREEN, fstr2);
        IsJailed{prisioner} = false;
    	SetPlayerHealth(prisioner, 100.00);
    	SetPlayerInterior(prisioner, 3);
    	SetPlayerPos(prisioner, 200.6972, 168.2653, 1003.0234);
    	SetPlayerFacingAngle(prisioner, 89.0391);
 	}
	else
	{
        SendClientMessage(playerid, RED, "Only law enforcement can bail out prisioners.");
	}
	new astring[100],aName[24];
	GetPlayerName(playerid,(aName),sizeof(aName));
    format(astring,sizeof(astring),"%s (%d) typed: /bail %d %s",aName,playerid,prisioner,bail);
    Log("logs/commands.log", astring);
    return true;
}

CMD:break(playerid, params[])
{
	new prisioner;
    if(sscanf(params, "u", prisioner)) return SendClientMessage(playerid, RED, "[USAGE]: /break [playerid]");
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can break out players.");
    if(!IsPlayerConnected(prisioner)) SendClientMessage(playerid, RED, "Player not found.");
    if(IsJailed{prisioner} == false) return SendClientMessage(playerid,RED, "That player is not in jail.");
    if(IsJailed{playerid} == true) return SendClientMessage(playerid, RED, "You cant break yourself out of jail, try /escape");
    if(IsInCellCP{playerid} == false) return SendClientMessage(playerid, RED, "You must be at a jail cell to use this command.");
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer7]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//1 mins
    TimerInfo[playerid][CMD_timer7] = gettime();
    new BreakChances = random(5);
    switch(BreakChances)
    {
    	case 0:
		{
			JailTime[prisioner] = 0;
			InMateID[prisioner] = 0;
			IsJailed{prisioner} = false;
			IsInCell{prisioner} = 0;
    		SetPlayerWantedLevel(prisioner, GetPlayerWantedLevel(prisioner) + 6);
			SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 6);
			SetPlayerHealth(prisioner, 100.00);
			SetPlayerInterior(prisioner, 3);
			SetPlayerPos(prisioner, 200.6972, 168.2653, 1003.0234);
			SetPlayerFacingAngle(prisioner, 89.0391);
    		format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has just broken %s (%d) out of jail at the LVPD [Inside].", GetPlayerNameEx(playerid), playerid, GetName(prisioner), prisioner);
    		CopRadio(BLUE, fstr);
            SendClientMessage(playerid, RED, "You've commited a crime (Assisted Jail Break). Your wanted level has been increased.");
    		format(fstr2, sizeof(fstr2), "You have successfully broken %s (%d) out of jail.", GetName(prisioner), prisioner);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, fstr2);
            SendClientMessage(prisioner, RED, "You've commited a crime (Assisted Jail Break). Your wanted level has been increased.");
    		format(fstr3, sizeof(fstr3), "%s (%d) has broken you out of jail", GetPlayerNameEx(playerid), playerid);
            SendClientMessage(prisioner, COLOR_LIGHTBLUE, fstr3);
		}
    	case 1..4:
		{
			SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 6);
			format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has attempted to break %s (%d) out of jail at the LVPD [Inside].", GetPlayerNameEx(playerid), playerid, GetName(prisioner), prisioner);
			CopRadio(BLUE, fstr);
			SendClientMessage(playerid, RED, "You've commited a crime (Attempted Jail Break). Your wanted level has been increased.");
    		format(fstr2, sizeof(fstr2), "You have failed to break %s (%d) out of jail.", GetName(prisioner), prisioner);
            SendClientMessage(playerid, RED, fstr2);
    		format(fstr3, sizeof(fstr3), "%s (%d) has just failed to try and break you out of jail.", GetPlayerNameEx(playerid), playerid);
            SendClientMessage(prisioner, RED, fstr3);
		}
	}
	new astring[100],aName[24];
	GetPlayerName(playerid,(aName),sizeof(aName));
    format(astring,sizeof(astring),"%s (%d) typed: /break %d",aName,playerid,prisioner);
    Log("logs/commands.log", astring);
    return true;
}

CMD:bribe(playerid, params[])
{
	new bribe, copid, Float:x, Float:y, Float:z;
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
	if(sscanf(params, "ud", copid, bribe)) return SendClientMessage(playerid, RED, "[USAGE]: /bribe [playerid] [amount]");
	if(!IsPlayerConnected(copid)) return SendClientMessage(playerid, RED, "Player not found.");
	if(GetTeam{copid} == CLASS_CIV || GetTeam{copid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "You can only bribe law enforcement players.");
	if(GetPlayerWantedLevel(playerid) <= 4) return SendClientMessage(playerid, RED, "You're not wanted by the police.");
	if(BribeTo[playerid]!= 0) return SendClientMessage(playerid, RED, "You have already offered the bribe, await a response.");
	if(bribe < 1000) return SendClientMessage(playerid, RED, "Bribes must be atleast $1K.");
	if(bribe > GetPlayerCash(playerid)) return SendClientMessage(playerid, RED, "Insufficient funds.");
	if(BribeFrom[copid] != -1) return SendClientMessage(playerid, RED, "That player has already been offered a bribe.");
	{
	    GetPlayerPos(copid, x, y, z);
	    if(!IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z)) return SendClientMessage(playerid, RED, "You must be near them to bribe them.");
		BribeTo[playerid] = copid;
		BribeFrom[copid] = playerid;
		Bribe[copid] = bribe;
		format(fstr, sizeof(fstr), "%s (%d) has just offered you a $%s bribe.", GetPlayerNameEx(playerid), playerid, number_format(bribe));
		SendClientMessage(copid, LIGHTGREEN, fstr);
		SendClientMessage(copid, YELLOW, "Use /accept bribe to accept, and /decline bribe to decline.");
		SendClientMessage(playerid, YELLOW, "You have offered the bribe, await a response.");
	}
	new astring[100],aName[24];
	GetPlayerName(playerid,(aName),sizeof(aName));
    format(astring,sizeof(astring),"%s (%d) typed: /bribe %d",aName,playerid,copid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:cuff(playerid, params[])
{
	new rangepass = 0;
    if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only law enforcement can cuff players.");
	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant cuff players while You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant cuff players from a vehicle.");
	foreach(Player, i)
	{
	    if(i == playerid) continue;
	    new Float:x, Float:y, Float:z;
    	GetPlayerPos(i, x, y, z);
    	new Float:hp;
    	GetPlayerHealth(i, hp);
    	if(hp > 0.0)
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    	{
    	 	rangepass++;
			if(GetPlayerWantedLevel(i) >= 4 && !IsPlayerInAnyVehicle(i) && IsOnduty{i} == 0 && IsAtEvent{i} == 0 && HasBeenCuffed{i} == false)
			{
				GameTextForPlayer(i, "~r~Cuffed", 3000, 5);
				SendClientMessage(i, RED, "You have been cuffed, use /breakcuffs to try break free.");
				GameTextForPlayer(playerid, "~g~Suspect Cuffed", 3000, 5);
				SetPlayerSpecialAction(i, SPECIAL_ACTION_CUFFED);
				HasBeenCuffed{i} = true;
				break;
			}
		}
	}
	if(rangepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /cuff", GetPlayerNameEx(playerid), playerid);
	Log("logs/commands.log", astring);
	return true;
}

CMD:taze(playerid, params[])
{
	new rangepass = 0, vehiclepass = 0, wantedpass = 0, dutypass = 0, eventpass = 0, tazepass = 0;
    if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only law enforcement can taze players.");
	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant taze players while You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant taze players from a vehicle.");
	foreach(Player, i)
	{
	    if(i == playerid) continue;
	    new Float:x, Float:y, Float:z;
    	GetPlayerPos(i, x, y, z);
    	new Float:hp;
    	GetPlayerHealth(i, hp);
    	if(hp > 0.0)
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    	{
    	 	rangepass++;
			if(GetPlayerWantedLevel(i) >= 4)
			{
				wantedpass++;
				if(!IsPlayerInAnyVehicle(i))
				{
			    	vehiclepass++;
					if(IsOnduty{i} == 0)
					{
					    dutypass++;
						if(IsAtEvent{i} == 0)
						{
                            eventpass++;
							if(HasBeenCuffed{i} == false)
							{
							    tazepass++;
								GameTextForPlayer(i, "~r~Tazered!~n~You're Now Stunned", 3000, 5);
								SetTimerEx("TazerTimer", 3000, false, "d", i);
								SendClientMessage(i, RED, "You have been tazered, You're now stunned.");
								GameTextForPlayer(playerid, "~g~Suspect Tazered", 3000, 5);
								HasBeenCuffed{i} = true;
								TogglePlayerControllable(i, false);
								ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
								break;
							}
						}
					}
				}
			}
		}
	}
	if(rangepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(wantedpass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(vehiclepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(dutypass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(eventpass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(tazepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /taze", GetPlayerNameEx(playerid), playerid);
	Log("logs/commands.log", astring);
	return true;
}

CMD:paytk(playerid, params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if(HasBeenIssuedTicket{playerid} == true)
    {
        new fine = random(1000) + 1000;
        if(GetPlayerCash(playerid) >= fine)
        {
        	KillTimer(TicketTimer{playerid});
        	HasBeenIssuedTicket{playerid} = false;
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has paid the ticket.", GetPlayerNameEx(playerid), playerid);
			CopRadio(BLUE, fstr);
        	format(fstr2, sizeof(fstr2), "You have paid the ticket, it cost you $%s.", number_format(fine));
        	SendClientMessage(playerid, RED, fstr2);
        	format(fstr2, sizeof(fstr2), "The suspect has paid the ticket, you recieved $%s.", number_format(fine));
        	SendClientMessage(TicketIssuer[playerid], YELLOW, fstr2);
        	GivePlayerCash(playerid, -fine);
        	GivePlayerCash(TicketIssuer[playerid], fine);
        	SetPlayerWantedLevel(playerid, 0);
        	SetPlayerScore(TicketIssuer[playerid], GetPlayerScore(TicketIssuer[playerid]) + 1);
        	SetPlayerScore(playerid, GetPlayerScore(playerid) - 1);
        	PlayerInfo[TicketIssuer[playerid]][pTickets] ++;
        	PlayerInfo[playerid][pFined] ++;
        	TicketIssuer[playerid] = -1;
        }
        else
		{
		    SendClientMessage(playerid, RED, "Insuficient funds.");
		}
    }
    else
    {
        SendClientMessage(playerid, RED, "You have not been issued a ticket.");
    }
	return true;
}

CMD:tk(playerid, params[])
{
	new rangepass = 0, vehiclepass = 0, wantedpass = 0, dutypass = 0, eventpass = 0;
    if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only law enforcement can ticket players.");
	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant ticket players while You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant ticket players from a vehicle.");
	foreach(Player, i)
	{
	    if(i == playerid) continue;
	    new Float:x, Float:y, Float:z;
    	GetPlayerPos(i, x, y, z);
    	new Float:hp;
    	GetPlayerHealth(i, hp);
    	if(hp > 0.0)
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    	{
    	 	rangepass++;
			if(GetPlayerWantedLevel(i) >= 1 && GetPlayerWantedLevel(i) <= 3)
			{
				wantedpass++;
				if(!IsPlayerInAnyVehicle(i))
				{
			    	vehiclepass++;
					if(IsOnduty{i} == 0)
					{
					    dutypass++;
						if(IsAtEvent{i} == 0)
						{
							HasBeenIssuedTicket{i} = true;
							TicketIssuer[i] = playerid;
        					TicketTimer{i} = SetTimerEx("FailureToPayTicket", 6000, false, "d", i);
                            eventpass++;
                            new current_zone;
        					current_zone = Player_Zone[i];
  							format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has been issued a ticket at %s", GetName(i), i, ZoneNames[current_zone][zone_name]);
							CopRadio(BLUE, fstr);
							GameTextForPlayer(i,"~r~Fined.~n~~w~Use /paytk to pay the ticket", 5000, 5);
							SendClientMessage(i, RED, "You have been issued a ticket, use /paytk to pay the ticket.");
							GameTextForPlayer(playerid,"~g~Suspect Fined", 5000, 5);
							SendClientMessage(playerid, YELLOW, "You have fined the suspect, stay nearby for payment.");
        					
							break;
						}
					}
				}
			}
		}
	}
	if(rangepass == 0)
	{
		SendClientMessage(playerid, RED, "No suspect players in range.");
	}
	else if(wantedpass == 0)
	{
		SendClientMessage(playerid, RED, "No suspect players in range.");
	}
	else if(vehiclepass == 0)
	{
		SendClientMessage(playerid, RED, "No suspect players in range.");
	}
	else if(dutypass == 0)
	{
		SendClientMessage(playerid, RED, "No suspect players in range.");
	}
	else if(eventpass == 0)
	{
		SendClientMessage(playerid, RED, "No suspect players in range.");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /tk", GetPlayerNameEx(playerid), playerid);
	Log("logs/commands.log", astring);
	return true;
}

CMD:ar(playerid, params[])
{
	new rangepass = 0, vehiclepass = 0, wantedpass = 0, dutypass = 0, eventpass = 0, arrestpass = 0;
    if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only law enforcement can arrest players.");
	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant arrest players while You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant arrest players from a vehicle.");
	foreach(Player, i)
	{
	    if(i == playerid) continue;
	    new Float:x, Float:y, Float:z;
    	GetPlayerPos(i, x, y, z);
    	new Float:hp;
    	GetPlayerHealth(i, hp);
    	if(hp > 0.0)
    	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
    	{
    	 	rangepass++;
			if(GetPlayerWantedLevel(i) >= 4)
			{
				wantedpass++;
				if(!IsPlayerInAnyVehicle(i))
				{
			    	vehiclepass++;
					if(IsOnduty{i} == 0)
					{
					    dutypass++;
						if(IsAtEvent{i} == 0)
						{
                            eventpass++;
							if(HasBeenArrested{i} == false)
							{
							    arrestpass++;
							    if(GetTeam{playerid} == CLASS_COPS)
								{
									PlayerInfo[i][pArrests] ++;
									TogglePlayerControllable(i, false);
									GameTextForPlayer(i, "~r~Arrested!", 3000, 5);
									format(fstr, sizeof(fstr), "Officer %s (%d) has just arrested you.", GetPlayerNameEx(playerid), playerid);
									SendClientMessage(i, RED, fstr);
									GameTextForPlayer(playerid,"~w~Suspect ~g~Arrested.",5000,5);
        							SetPlayerScore(playerid, GetPlayerScore(playerid) + 1);
									new pay = random(10000) + 5000;
        							GivePlayerCash(playerid, pay);
        							PlayerInfo[playerid][pTakedowns] ++;
        							ApplyAnimation(playerid, "ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1);
									format(fstr2, sizeof(fstr2), "Suspect %s (%d) has been arrested by Officer %s (%d)", GetName(i), i, GetPlayerNameEx(playerid), playerid);
									SendClientMessageToAll(LIGHTGREEN, fstr2);
									SetPlayerScore(i, GetPlayerScore(i) - 1);
									SetPlayerSpecialAction(i, SPECIAL_ACTION_HANDSUP);
									SetTimerEx("SendPlayerToJail", 3000, false, "d", i);
									HasBeenArrested{i} = true;

         							break;
								}
								else if(GetTeam{playerid} == CLASS_CIA)
								{
									PlayerInfo[i][pArrests] ++;
									TogglePlayerControllable(i, false);
									GameTextForPlayer(i, "~r~Arrested!", 3000, 5);
									SendClientMessage(i, RED, "You have been arrested by a Undercover CIA Agent.");
									GameTextForPlayer(playerid,"~w~Suspect ~g~Arrested.",5000,5);
        							SetPlayerScore(playerid, GetPlayerScore(playerid) + 1);
        							new pay = random(10000) + 5000;
        							GivePlayerCash(playerid, pay);
        							PlayerInfo[playerid][pTakedowns] ++;
        							ApplyAnimation(playerid, "ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1);
									format(fstr, sizeof(fstr), "Suspect %s (%d) has been arrested by a Undercover CIA Agent.", GetName(i), i);
									SendClientMessageToAll(LIGHTGREEN, fstr);
									SetPlayerScore(i, GetPlayerScore(i) - 1);
									SetPlayerSpecialAction(i, SPECIAL_ACTION_HANDSUP);
									SetTimerEx("SendPlayerToJail", 3000, false, "d", i);
									HasBeenArrested{i} = true;

         							break;
								}
								else if(GetTeam{playerid} == CLASS_FBI)
								{
									PlayerInfo[i][pArrests] ++;
									TogglePlayerControllable(i, false);
									GameTextForPlayer(i, "~r~Arrested!", 3000, 5);
									SendClientMessage(i, RED, "You have been arrested by a Undercover FBI Agent.");
									GameTextForPlayer(playerid,"~w~Suspect ~g~Arrested.",5000,5);
        							SetPlayerScore(playerid, GetPlayerScore(playerid) + 1);
        							new pay = random(10000) + 5000;
        							GivePlayerCash(playerid, pay);
        							PlayerInfo[playerid][pTakedowns] ++;
        							ApplyAnimation(playerid, "ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1);
									format(fstr, sizeof(fstr), "Suspect %s (%d) has been arrested by a Undercover FBI Agent.", GetName(i), i);
									SendClientMessageToAll(LIGHTGREEN, fstr);
									SetPlayerScore(i, GetPlayerScore(i) - 1);
									SetPlayerSpecialAction(i, SPECIAL_ACTION_HANDSUP);
									SetTimerEx("SendPlayerToJail", 3000, false, "d", i);
									HasBeenArrested{i} = true;

         							break;
								}
								else if(GetTeam{playerid} == CLASS_ARMY)
								{
									PlayerInfo[i][pArrests] ++;
									TogglePlayerControllable(i, false);
									GameTextForPlayer(i, "~r~Arrested!", 3000, 5);
									SendClientMessage(i, RED, "You have been arrested by a Las Venturas Army Soldier.");
									GameTextForPlayer(playerid,"~w~Suspect ~g~Arrested.",5000,5);
        							SetPlayerScore(playerid, GetPlayerScore(playerid) + 1);
        							new pay = random(10000) + 5000;
        							GivePlayerCash(playerid, pay);
        							PlayerInfo[playerid][pTakedowns] ++;
        							ApplyAnimation(playerid, "ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1);
									format(fstr, sizeof(fstr), "Suspect %s (%d) has been arrested by a Las Venturas Army Soldier.", GetName(i), i);
									SendClientMessageToAll(LIGHTGREEN, fstr);
									SetPlayerScore(i, GetPlayerScore(i) - 1);
									SetPlayerSpecialAction(i, SPECIAL_ACTION_HANDSUP);
									SetTimerEx("SendPlayerToJail", 3000, false, "d", i);
									HasBeenArrested{i} = true;

         							break;
								}
							}
						}
					}
				}
			}
		}
	}
	if(rangepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(wantedpass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(vehiclepass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(dutypass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(eventpass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	else if(arrestpass == 0)
	{
		SendClientMessage(playerid, RED, "No wanted players in range.");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /ar", GetPlayerNameEx(playerid), playerid);
	Log("logs/commands.log", astring);
	return true;
}

CMD:craftsman(playerid, params[])
{
    HasCraftsCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online craftsmen.");
    format(fstr,sizeof(fstr),"[Craftsman Radio]: {AFAFAF}%s (%d) has called for a craftsman at %s.", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 18);
    return true;
}

CMD:lawyer(playerid, params[])
{
    HasLawyerCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online lawyers.");
    format(fstr,sizeof(fstr),"[Lawyer Radio]: {AFAFAF}%s (%d) has called for a lawyer at %s.", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 14);
    return true;
}

CMD:whore(playerid, params[])
{
    HasWhoreCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online whores.");
    format(fstr,sizeof(fstr),"[Whore Radio]: {AFAFAF}%s (%d) has called for a good time at %s.", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 10);
    return true;
}

CMD:food(playerid, params[])
{
    HasFoodCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online food vendors.");
    format(fstr,sizeof(fstr),"[Vendor Radio]: {AFAFAF}%s (%d) has called for a food vendor at %s.", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 3);
    return true;
}

CMD:street(playerid, params[])
{
    HasStreetCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online street vendors.");
    format(fstr,sizeof(fstr),"[Vendor Radio]: {AFAFAF}%s (%d) has called for a street vendor at %s.", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 4);
    return true;
}

CMD:medic(playerid, params[])
{
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online medics.");
    format(fstr,sizeof(fstr),"[Medic Radio]: {AFAFAF}%s (%d) has called for help at %s", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    MedicRadio(PINK, fstr);
    return true;
}

CMD:mechanic(playerid, params[])
{
    HasMechCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online mechanics.");
    format(fstr,sizeof(fstr),"[Mechanic Radio]: {AFAFAF}%s (%d) has called for a mechanic at %s", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 2);
    return true;
}

CMD:weapons(playerid, params[])
{
    HasWeaponsCall[playerid] = playerid;
    new current_zone;
    current_zone = Player_Zone[playerid];
    SendClientMessage(playerid, YELLOW, "Your call has been dispatched to all online arms dealers.");
    format(fstr,sizeof(fstr),"[Arms Dealer Radio]: {AFAFAF}%s (%d) has called for some weapons at %s", GetPlayerNameEx(playerid), playerid, ZoneNames[current_zone][zone_name]);
    SkillBroadCast(COLOR_WHITE, fstr, 5);
    return true;
}

CMD:call911(playerid, params[])
{
    new report[50];
    new current_zone;
    current_zone = Player_Zone[playerid];
    if(sscanf(params, "s[50]", report)) return SendClientMessage(playerid,RED, "[USAGE]: /call911 [report]");
    if(strlen(report) < 1 || strlen(report) > 24) return SendClientMessage(playerid, RED, "Your report can only contain 1-24 characters.");
    {
        SendClientMessage(playerid, YELLOW, "Your report has been dispatched to online law enforement.");
        format(fstr, sizeof(fstr), "[Dispatch]: %s (%d) has reported %s", GetPlayerNameEx(playerid), playerid);
        CopRadio(BLUE, fstr);
        format(fstr, sizeof(fstr), "Location: %s.", ZoneNames[current_zone][zone_name]);
        CopRadio(BLUE, fstr);
    }
    return true;
}

CMD:escape(playerid, params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if(IsJailed{playerid} == false) return SendClientMessage(playerid, RED, "You're not in jail.");
    if(CanESC{playerid} == false) return SendClientMessage(playerid, RED, "Please wait before trying to escape jail again.");//
	new escrand = random(5);
	switch(escrand)
	{
		case 0:
		{
        	SetPlayerHealth(playerid, 100.0);
    		SetPlayerInterior(playerid, 3);
    		SetPlayerPos(playerid, 200.6972, 168.2653, 1003.0234);
    		SetPlayerFacingAngle(playerid, 89.0391);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 6);
        	PlayerInfo[playerid][pCrimes] ++;
        	format(fstr, sizeof(fstr),"[DISPATCH]: Suspect %s (%d) has just escaped jail at LVPD.", GetPlayerNameEx(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, COLOR_LIGHTBLUE, "You've successfully escaped jail!");
			format(fstr2, sizeof(fstr2), "%s (%d) has just escaped jail at LVPD.", GetPlayerNameEx(playerid), playerid);
       		SendClientMessageToAll(RED, fstr2);
        	SendClientMessage(playerid, RED, "You've commited a crime (Jail Break). Your wanted level has been increased.");
			IsJailed{playerid} = false;
			KillTimer(JailTimer[playerid]);
			JailTime[playerid] = 0;
			PlayerInfo[playerid][jTime] = 0;
			if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
			{
			    SaveUserStats(playerid);
			}
        }
        case 1..4:
		{
	    	CanESC{playerid} = false;
        	SetTimerEx("WaitToTryEscape", 60000, false, "d", playerid);
        	SendClientMessage(playerid, RED, "You have failed to escape.");
		}
	}
    return true;
}

CMD:lotto(playerid, params[])
{
    if(HasLotteryTicket{playerid} == 0) return SendClientMessage(playerid, RED, "You dont have a lottery ticket, buy one at a 24/7 Store.");
	{
		format(fstr, sizeof(fstr), "Your lotto numbers are: %d, %d, %d, %d, %d, %d", PlayersLottoNumbers[0][playerid], PlayersLottoNumbers[1][playerid], PlayersLottoNumbers[2][playerid], PlayersLottoNumbers[3][playerid], PlayersLottoNumbers[4][playerid], PlayersLottoNumbers[5][playerid]);
		SendClientMessage(playerid, YELLOW, fstr);
	}
	return true;
}

CMD:tie(playerid, params[])
{
   	new targetid;
   	new current_zone;
   	current_zone = Player_Zone[targetid];
   	new vehicle;
   	vehicle = GetPlayerVehicleID(playerid);
   	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /tie [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
   	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if(GetPlayerSkill(playerid) != 7) return SendClientMessage(playerid, RED, "You must have the kidnapper skill in order to tie up someone.");
   	if(targetid == playerid) return SendClientMessage(playerid, RED, "You cant kidnap yourself");
   	if(!ProxDetectorS(5.0, playerid, targetid)) return SendClientMessage(playerid, RED, "That player is not close enough.");
   	if(!IsPlayerInAnyVehicle(targetid) && !IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You both have to be in a vehicle.");
   	if(PlayerInfo[playerid][pRope] < 1) return SendClientMessage(playerid, RED, "You need rope to kidnap players.");
   	if(HasBeenTied{targetid} == true) return SendClientMessage(playerid, RED, "That player is already tied up.");
   	if(!IsPlayerInVehicle(targetid, vehicle)) return SendClientMessage(playerid, RED, "You both have to be in the same vehicle.");
   	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "You cant kidnap the driver.");
	if(IsOnduty{targetid} == 1) return SendClientMessage(playerid, RED, "You cant kidnap On-Duty admins.");
	if(IsAtEvent{targetid} == 1) return SendClientMessage(playerid, RED, "You cant kidnap players at events.");
	if(IsAtEvent{targetid} == 0)
	{
		TogglePlayerControllable(targetid, false);
      	HasBeenTied{targetid} = true;
       	PlayerInfo[playerid][pCrimes] ++;
       	PlayerInfo[playerid][pRope] --;
       	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		format(fstr, sizeof(fstr), "%s (%d) has just kidnapped you.", GetName(playerid), playerid);
       	SendClientMessage(targetid, RED, fstr);
       	GameTextForPlayer(targetid, "~r~Kidnapped", 3000, 5);
       	GameTextForPlayer(playerid, "~g~Player Tied Up", 3000, 5);
       	SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have successfully tied the player up.");
       	SendClientMessage(playerid, RED, "You've commited a crime (Kidnapping). Your wanted level has been increased.");
       	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has just kidnapped %s (%d) at %s.", GetName(playerid), playerid, GetName(targetid), targetid, ZoneNames[current_zone][zone_name]);
       	CopRadio(BLUE, fstr);
	}
   	new astring[64];
   	format(astring, sizeof(astring),"%s (%d) typed: /tie %d", GetName(playerid), playerid, targetid);
   	Log("logs/commands.log", astring);
	return true;
}

CMD:untie(playerid, params[])
{
	new targetid;
   	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /untie [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
   	if(targetid == playerid) return SendClientMessage(playerid, RED, "You cant untie yourself.");
   	if (!ProxDetectorS(5.0, playerid, targetid)) return SendClientMessage(playerid, RED, "That player is not close enough.");
   	if(HasBeenTied{targetid} == false) return SendClientMessage(playerid, RED, "That player is not tied up.");
   	{
		SendClientMessage(targetid, COLOR_LIGHTBLUE, "You've been untied!");
       	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Player untied.");
       	HasBeenTied{targetid} = false;
       	TogglePlayerControllable(targetid, true);
	}
   	new astring[100],aName[24];
   	GetPlayerName(playerid,(aName),sizeof(aName));
   	format(astring,sizeof(astring),"%s (%d) typed: /untie %d",aName,playerid,targetid);
    Log("logs/commands.log", astring);
   	return true;
}

CMD:rob(playerid, params[])
{
	new targetid, string[150], string2[150], string3[150];
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /rob [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
	if(playerid == targetid) return SendClientMessage(playerid, RED, "You cant rob yourself.");
	{
		if((gettime() - 60) < TimerInfo[playerid][CMD_timer37]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer37] = gettime();
	    PlayerInfo[playerid][pCrimes] ++;
        new RobbedMoney = GetPlayerCash(targetid)/32;//3%
        GivePlayerCash(playerid, RobbedMoney);
		GivePlayerCash(targetid, -RobbedMoney);
		SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		new current_zone;
        current_zone = Player_Zone[playerid];
        SendClientMessage(playerid, RED, "You've commited a crime (Armed Robbery).");
		format(string, sizeof(string), "You have stolen $%s from %s (%d).", number_format(RobbedMoney), GetName(targetid), targetid);
		SendClientMessage(playerid, LIGHTGREEN, string);
        format(string2, sizeof(string2), "%s (%d) has stolen $%s from you.", GetName(playerid), playerid, number_format(RobbedMoney));
 	    SendClientMessage(targetid, RED, string2);
		format(string3, sizeof(string3), "[DISPATCH]: Suspect %s (%d) has just robbed %s (%d) at %s.", GetName(playerid), playerid, GetName(targetid), targetid, ZoneNames[current_zone][zone_name]);
       	CopRadio(BLUE, string3);
       	new astring[100];
        format(astring, sizeof(astring),"%s (%d) just robbed %s (%d) for $%s", GetName(playerid), playerid, GetName(targetid), targetid, number_format(RobbedMoney));
        Log("logs/commands.log", astring);
	}
	return true;
}

CMD:savestats(playerid, params[])
{
	new file[60];
    format(file, sizeof(file), USER_FILE, GetName(playerid));
    if(HasSpawned{playerid} == true || IsLoggedIn{playerid} == 0)
    {
		if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
		{
			SaveBankStats(playerid);
    		SaveFightStats(playerid);
    		SaveSettings(playerid);
      		SaveSkillLevels(playerid);
    		SaveUserStats(playerid);
    		SaveDegreeStats(playerid);
    		SendClientMessage(playerid, LIGHTGREEN, "[ACCOUNT]: Your personal stats have just been saved.");
    		return true;
    	}
    }
    else
    {
        SendClientMessage(playerid, RED, "You must be logged in and spawned to use this command.");
    }
    return true;
}

CMD:newvegas(playerid, params[])
{
    new cops, cia, civ, fbi, army, medic;
    civ = GetPlayersInTeamFromMaxPlayers(CLASS_CIV);
    cops = GetPlayersInTeamFromMaxPlayers(CLASS_COPS);
    cia = GetPlayersInTeamFromMaxPlayers(CLASS_CIA);
    fbi = GetPlayersInTeamFromMaxPlayers(CLASS_FBI);
    army = GetPlayersInTeamFromMaxPlayers(CLASS_ARMY);
    medic = GetPlayersInTeamFromMaxPlayers(CLASS_MEDIC);
    new totalplayers = civ + cops + cia + fbi + army + medic;
    format(fstr, sizeof(fstr), "{FFFFFF}Civilians: %d\nCops: %d\nCIA Agents: %d\nFBI Agents: %d\nArmy Soldiers: %d\nMedics: %d\nTotal Online Players: %d", civ, cops, cia, fbi, army, medic, totalplayers);
    ShowPlayerDialog(playerid, VEGAS_STATS, DIALOG_STYLE_MSGBOX, "{FFFFFF}Las Venturas Live Stats", fstr, "Ok", "");
    return true;
}

CMD:dinfo(playerid, params[])
{
	new playerid2, real[5], law[5], def[5], heal[5], mec[5], deal[5], weap[5];
	if(!sscanf(params, "u", playerid2))
	{
	    if(IsPlayerConnected(playerid2))
	    {
	    	if(IsLoggedIn{playerid2} == 1)
	    	{
	    	    if(DegreeInfo[playerid2][dReal] == 1)
	    	    {
	    	        format(real, sizeof(real), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dReal] == 0)
	    	    {
	    	        format(real, sizeof(real), "No");
	    	    }
	    	    
	    	    if(DegreeInfo[playerid2][dLaw] == 1)
	    	    {
	    	        format(law, sizeof(law), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dLaw] == 0)
	    	    {
	    	        format(law, sizeof(law), "No");
	    	    }

	    	    if(DegreeInfo[playerid2][dDefense] == 1)
	    	    {
	    	        format(def, sizeof(def), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dDefense] == 0)
	    	    {
	    	        format(def, sizeof(def), "No");
	    	    }

	    	    if(DegreeInfo[playerid2][dHealth] == 1)
	    	    {
	    	        format(heal, sizeof(heal), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dHealth] == 0)
	    	    {
	    	        format(heal, sizeof(heal), "No");
	    	    }

	    	    if(DegreeInfo[playerid2][dMechanic] == 1)
	    	    {
	    	        format(mec, sizeof(mec), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dMechanic] == 0)
	    	    {
	    	        format(mec, sizeof(mec), "No");
	    	    }

	    	    if(DegreeInfo[playerid2][dDealer] == 1)
	    	    {
	    	        format(deal, sizeof(deal), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dDealer] == 0)
	    	    {
	    	        format(deal, sizeof(deal), "No");
	    	    }

	    	    if(DegreeInfo[playerid2][dWeapons] == 1)
	    	    {
	    	        format(weap, sizeof(weap), "Yes");
	    	    }
	    	    else if(DegreeInfo[playerid2][dWeapons] == 0)
	    	    {
	    	        format(weap, sizeof(weap), "No");
	    	    }
	    	
                format(fstr, sizeof(fstr), "{FFFFFF}Real Estate Degree: %s\nLaw Degree: %s\nDefense Degree: %s\nMedical Degree: %s\nMechanical Degree: %s\nDealership Degree: %s\nWeapons Degree: %s", real, law, def, heal, mec, deal, weap);
				ShowPlayerDialog(playerid, DEGREE_INFO_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}Master Degree Info", fstr, "Ok", "");
            }
            else
            {
                SendClientMessage(playerid, RED, "Player not logged in.");
            }
        }
        else
        {
            SendClientMessage(playerid, RED, "Player not found.");
        }
		return true;
	}
	else
	{
		if(DegreeInfo[playerid][dReal] == 1)
		{
			format(real, sizeof(real), "Yes");
		}
		else if(DegreeInfo[playerid][dReal] == 0)
		{
			format(real, sizeof(real), "No");
		}

		if(DegreeInfo[playerid][dLaw] == 1)
		{
			format(law, sizeof(law), "Yes");
		}
		else if(DegreeInfo[playerid][dLaw] == 0)
		{
			format(law, sizeof(law), "No");
		}

		if(DegreeInfo[playerid][dDefense] == 1)
		{
			format(def, sizeof(def), "Yes");
		}
		else if(DegreeInfo[playerid][dDefense] == 0)
		{
			format(def, sizeof(def), "No");
		}

		if(DegreeInfo[playerid][dHealth] == 1)
		{
			format(heal, sizeof(heal), "Yes");
		}
		else if(DegreeInfo[playerid][dHealth] == 0)
		{
			format(heal, sizeof(heal), "No");
		}

		if(DegreeInfo[playerid][dMechanic] == 1)
		{
			format(mec, sizeof(mec), "Yes");
		}
		else if(DegreeInfo[playerid][dMechanic] == 0)
		{
			format(mec, sizeof(mec), "No");
		}

		if(DegreeInfo[playerid][dDealer] == 1)
		{
			format(deal, sizeof(deal), "Yes");
		}
		else if(DegreeInfo[playerid][dDealer] == 0)
		{
			format(deal, sizeof(deal), "No");
		}

		if(DegreeInfo[playerid][dWeapons] == 1)
		{
			format(weap, sizeof(weap), "Yes");
		}
		else if(DegreeInfo[playerid][dWeapons] == 0)
		{
			format(weap, sizeof(weap), "No");
		}
	    	    
	    format(fstr, sizeof(fstr), "{FFFFFF}Real Estate Degree: %s\nLaw Degree: %s\nDefense Degree: %s\nMedical Degree: %s\nMechanical Degree: %s\nDealership Degree: %s\nWeapons Degree: %s", real, law, def, heal, mec, deal, weap);
		ShowPlayerDialog(playerid, DEGREE_INFO_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}Degree Info", fstr, "Ok", "");
	}
	return true;
}

CMD:faqs(playerid, params[])
{
	ShowPlayerDialog(playerid, FAQS_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}ACnR - FAQS - Questions", "{FFFFFF}How do i choose a skill?\nHow do i become cia/fbi/army/medic class/es?\nHow do i make money?\nHow do i buy a vehicle?\nHow do i buy a house/business?\nHow do i become a VIP?\nHow much are guns/mats worth?\nHow to apply for ACnR admin/staff positions?\nHow do i get Materials?", "Select", "Cancel");
	return true;
}

CMD:climbsign(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2304.0759, 2382.6260, 14.9083)) return SendClientMessage(playerid, RED, "You are not at the Las Venturas Bar sign.");
	SetPlayerPos(playerid, 2304.0908, 2381.2251, 45.7953);
	SetPlayerFacingAngle(playerid, 178.3792);
	GivePlayerWeapon(playerid, 46, 1);
	return true;
}

CMD:elevator(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1728.4685,-1671.1666,27.1953) || IsPlayerInRangeOfPoint(playerid, 2.0, 1731.1501,-1668.5820,27.1953) || IsPlayerInRangeOfPoint(playerid, 2.0, 1710.7915,-1643.9325,27.2035) || IsPlayerInRangeOfPoint(playerid, 2.0, 1713.5035,-1641.3409,27.2124) || IsPlayerInRangeOfPoint(playerid, 2.0, 1710.8021,-1643.9214,23.6797) || IsPlayerInRangeOfPoint(playerid, 2.0, 1713.5140,-1641.3318,23.6797))
	{
		ShowPlayerDialog(playerid, APARTMENTS_ELEVATOR, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Apartments - Elevator", "{FFFFFF}Ground Level\nLevel 1\nLevel 2\nLevel 3\nLevel 4\nLevel 5\nLevel 6\nLevel 7\nLevel 8\nLevel 9\nLevel 10\nRoof", "Select", "Cancel");
		return true;
	}
	else
	{
		SendClientMessage(playerid, RED, "You are not at the Las Venturas Appartments level elevators");
	}
	return true;
}

CMD:pickup(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 2293.1216, 2455.5334, 10.8203))//LVPD Weapon Pickup
	{
        if(GetTeam{playerid} == CLASS_CIA)
        {
			ResetPlayerWeapons(playerid);
    		GivePlayerWeapon(playerid, 3, 1);
    		GivePlayerWeapon(playerid, 26, 200);
    		GivePlayerWeapon(playerid, 29, 500);
	    	GivePlayerWeapon(playerid, 31, 400);
	    	PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
	    	SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_COPS)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 27, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_ARMY)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 24, 99999);
		    GivePlayerWeapon(playerid, 26, 99999);
		    GivePlayerWeapon(playerid, 29, 99999);
		    GivePlayerWeapon(playerid, 31, 99999);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_FBI)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 26, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2493.1833, 2394.5808, 10.8203))//FBI Weapon Pickup
	{
        if(GetTeam{playerid} == CLASS_CIA)
        {
			ResetPlayerWeapons(playerid);
    		GivePlayerWeapon(playerid, 3, 1);
    		GivePlayerWeapon(playerid, 26, 200);
    		GivePlayerWeapon(playerid, 29, 500);
	    	GivePlayerWeapon(playerid, 31, 400);
	    	PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
	    	SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_COPS)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 27, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_ARMY)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 24, 99999);
		    GivePlayerWeapon(playerid, 26, 99999);
		    GivePlayerWeapon(playerid, 29, 99999);
		    GivePlayerWeapon(playerid, 31, 99999);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_FBI)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 26, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 946.9702, 1730.2723, 8.8516))//CIA Weapon Pickup
	{
        if(GetTeam{playerid} == CLASS_CIA)
        {
			ResetPlayerWeapons(playerid);
    		GivePlayerWeapon(playerid, 3, 1);
    		GivePlayerWeapon(playerid, 26, 200);
    		GivePlayerWeapon(playerid, 29, 500);
	    	GivePlayerWeapon(playerid, 31, 400);
	    	PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
	    	SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_COPS)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 27, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_ARMY)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 24, 99999);
		    GivePlayerWeapon(playerid, 26, 99999);
		    GivePlayerWeapon(playerid, 29, 99999);
		    GivePlayerWeapon(playerid, 31, 99999);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
		else if(GetTeam{playerid} == CLASS_FBI)
        {
			ResetPlayerWeapons(playerid);
		    GivePlayerWeapon(playerid, 3, 1);
		    GivePlayerWeapon(playerid, 26, 200);
		    GivePlayerWeapon(playerid, 29, 500);
		    GivePlayerWeapon(playerid, 31, 400);
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    SendClientMessage(playerid, YELLOW, "Weapons picked up.");
		    return true;
	    }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2293.1194, 2447.1709, 10.8203))//LVPD Armour Pickup
	{
		if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
        {
			SetPlayerArmour(playerid, 100.0);
		    SendClientMessage(playerid, YELLOW, "Armour picked up.");
		    return true;
        }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2493.1838, 2400.7966, 10.8203))//FBI Armour Pickup
	{
		if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
        {
			SetPlayerArmour(playerid, 100.0);
		    SendClientMessage(playerid, YELLOW, "Armour picked up.");
		    return true;
        }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 1.0, 946.9492, 1736.2869, 8.8516))//CIA Armour Pickup
	{
		if(GetTeam{playerid} == CLASS_COPS || GetTeam{playerid} == CLASS_FBI || GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_ARMY)
        {
			SetPlayerArmour(playerid, 100.0);
		    SendClientMessage(playerid, YELLOW, "Armour picked up.");
		    return true;
        }
	    else
	    {
	        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
	    }
	    return true;
	}
	else
	{
		SendClientMessage(playerid, RED, "You're not at a pickup point.");
	}
	return true;
}

/*CMD:kill(playerid, params[])
{
	if(GetPlayerWantedLevel(playerid) >= 1) return SendClientMessage(playerid, RED, "You cant use this command when you have wanted level.");
	if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command when you are jailed/caged.");
	HasChangedSkin{playerid} = true;
	SetPlayerHealth(playerid, 0.0);
	ForceClassSelection(playerid);
	return true;
}*/

CMD:settings(playerid, params[])
{
	new string[40];
	switch(PMs{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "1. Personal Messages: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "1. Personal Messages: {0F9900}ON"); }
	}
	switch(JoinMsg{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "2. Join Messages: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "2. Join Messages: {0F9900}ON"); }
	}
	switch(QuitMsg{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "4. Quit Messages: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "4. Quit Messages: {0F9900}ON"); }
	}
	switch(KickMsg{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "4. Kick Messages: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "4. Kick Messages: {0F9900}ON"); }
	}
	switch(TimeoutMsg{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "5. Timeout Messages: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "5. Timeout Messages: {0F9900}ON"); }
	}
	switch(TDMenu{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "6. Textdraw Menus: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "6. Textdraw Menus: {0F9900}ON"); }
	}
	switch(NameTags{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "7. Player Name Tags: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "7. Player Name Tags: {0F9900}ON"); }
	}
	format(string, sizeof(string), "8. Name Tag Draw Distance: ~g~%d", NTDD{playerid});
	SendClientMessage(playerid, -1, string);
	switch(TogFPS{playerid}) {
		case 0: { SendClientMessage(playerid, -1, "9. FPS Counter: {DE0000}OFF"); }
		case 1: { SendClientMessage(playerid, -1, "9. FPS Counter: {0F9900}ON"); }
	}
	return 1;
}

CMD:cmds(playerid, params[])
{
	if(TDMenu{playerid} == 0)
	{
		return cmd_commands(playerid, params);
	}
    else if(TDMenu{playerid} == 1)
	{
		InsideCmdMenu[0][playerid] = 1;
		for(new i = 0; i < 28; i++)
		{
			PlayerTextDrawShow(playerid, CmdMenuTD[i]);
		}
		ClearMenu(playerid);
		PlayerTextDrawSetString(playerid, CmdMenuTD[6], "1. /genhelp - General Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[7], "2. /infohelp - Informational Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[8], "3. /msghelp - Messaging Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[9], "4. /vehhelp - Vehicle Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[10], "5. /grouphelp - Group Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[11], "6. /jailhelp - Jail Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[12], "7. /classhelp - Class Specific Commands");
		PlayerTextDrawSetString(playerid, CmdMenuTD[13], "8. /animhelp - Player Animations");
		PlayerTextDrawSetString(playerid, CmdMenuTD[14], "9. /actions - Player Actions");
		PlayerTextDrawSetString(playerid, CmdMenuTD[15], "10. /settings - Settings & Options");
		PlayerTextDrawSetString(playerid, CmdMenuTD[16], "11. /services - Service commands");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD1, "Commands List");
		SendClientMessage(playerid, COLOR_GRAD3, "[Help]: /genhelp /infohelp /msghelp /vehhelp /grouphelp /jailhelp /classhelp /animhelp");
		SendClientMessage(playerid, COLOR_GRAD3, "[Other]: /actions /settings /services");
	}
	return 1;
}

CMD:classhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Class Help");
	return 1;
}

CMD:jailhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Jail/Prison Help");
	return 1;
}

CMD:grouphelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Group Help");
	return 1;
}

CMD:genhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "General Help");
	return 1;
}

CMD:infohelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Informational Help");
	return 1;
}

CMD:msghelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Messaging Help");
	return 1;
}

CMD:vehhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD1, "Vehicle Help");
	SendClientMessage(playerid, -1, "/myvehs /service /setplate /boot /bonnet /deleteveh");
	SendClientMessage(playerid, -1, "/alarm /lights /lock(/lk) /park /(decline/accept)veh /sellvehto");
	return 1;
}

CMD:commands(playerid, params[])
{
    if(GetTeam{playerid} == CLASS_COPS)
   	{
        ShowPlayerDialog(playerid, CMDS_LIST1, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}Cop Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    }
    else if(GetTeam{playerid} == CLASS_CIA)
   	{
  		ShowPlayerDialog(playerid, CMDS_LIST2, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}CIA Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    }
    else if(GetTeam{playerid} == CLASS_ARMY)
   	{
  		ShowPlayerDialog(playerid, CMDS_LIST3, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}Army Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    }
    else if(GetTeam{playerid} == CLASS_FBI)
   	{
  		ShowPlayerDialog(playerid, CMDS_LIST6, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}FBI Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/ar /tk /cuff(/cf) /uncuff /c /taze(/tz) /(acc/dec)bribe /bail /shield /raid /pickup", "Ok", "");
    }
    else if(GetTeam{playerid} == CLASS_CIV)
   	{
    	ShowPlayerDialog(playerid, CMDS_LIST4, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}Civilian Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n\n/(rob)list /esc /(un)tie /(cancel)hit /hits /(break)out/cuffs /bribe /mask /blowbomb /breakin", "Ok", "");
   	}
    else if(GetTeam{playerid} == CLASS_MEDIC)
   	{
    	ShowPlayerDialog(playerid, CMDS_LIST5, DIALOG_STYLE_MSGBOX ,
"{FFFFFF}Medic Commands", "{FFFFFF}/rules /help /faqs /pc /n /cp /pm /ad /gcmds /loc /(biz/house)menu /join /vcmds /me /do\n/healme /cutrope /call911 /medic /mechanic /dealer /anims /(save)stats /report /fail /paint /lotto\n/vlock(/lk) /pay /lotto /viplist /newvegas /debit /credit /askadmin /dinfo /wealth /kill\n\nClass commands:\n/medic /m", "Ok", "");
   	}
    return true;
}

CMD:housemenu(playerid, params[])
{
	//if(GetPVarInt(playerid, "IsInHouse") == 0) return SendClientMessage(playerid, RED, "You need to be in a house to use this command.");
	if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), GetPlayerNameEx(playerid), false))
		return SendClientMessage(playerid, RED, "You're either not in a house or dont own this house.");
	else
	{
		ShowPlayerDialog(playerid, HOUSE_MENU, DIALOG_STYLE_LIST, "{FFFFFF}House Menu - Main Menu", "{FFFFFF}Set House Name\nGive/Take House Keys\nSell House", "Select", "Cancel");
	}
	return true;
}

CMD:createhouse(playerid, params[])
{
	new intid, file[40], h = GetFreeHouseID(), labeltext[150];
	if(IsPlayerSetBuilder{playerid} == true || PlayerInfo[playerid][aLevel] == 4)
	{
		if(sscanf(params, "d", intid)) {
			SendClientMessage(playerid, RED, "[USAGE]: /createhouse [type]");
			SendClientMessage(playerid, WHITE, "Types: 1. One Story House | 2. Two Story House | 3. Small Mansion | 4. Large Mansion");
			return 1;
		}
		if(h < 0) {
			new str[150];
			format(str,sizeof(str), "The server has reached a maximum of %d houses.", MAX_HOUSES);
			SendClientMessage(playerid,RED,str);
			return 1;
		}
		if(intid == 0 || intid >= 6) { //Wrong type ID..
	        SendClientMessage(playerid, RED, "Wrong type id.");
			SendClientMessage(playerid, WHITE, "Types: 1. One Story House | 2. Two Story House | 3. Small Mansion | 4. Large Mansion");
			return 1;
		}
		else if(intid == 1) { //1 Story
		    format(file, sizeof(file), HOUSE_FILE, h);

		    new File:startfile = fopen(file, io_write);
	    	fclose(startfile);

			GetPlayerPos(playerid, hX, hY, hZ);
			GetPlayerFacingAngle(playerid, hAngle);

			new gowner[24], gname[40];
			format(gowner, sizeof(gowner), "Nobody");
			format(gname, sizeof(gname), "For-Sale");

			new val = random(1000000) + 1000000;//Random 1M-2M

			HouseInfo[h][hCPOutX] = hX;
			HouseInfo[h][hCPOutY] = hY;
			HouseInfo[h][hCPOutZ] = hZ;
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			HouseInfo[h][hValue] = val;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;

			HouseInfo[h][hWorld] = GetPlayerVirtualWorld(playerid);
			HouseInfo[h][hSpawnInterior] = GetPlayerInterior(playerid);
			HouseInfo[h][hHouseInterior] = 6;//

			format(labeltext, sizeof(labeltext), "This house is for sale!\n House Type: 1 Story House\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", number_format(HouseInfo[h][hValue]), h);
			HouseCPOut[h] = CreateDynamicCP(hX, hY, hZ, 1.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 4.0);
			HouseCPInt[h] = CreateDynamicCP(2196.84, -1204.36, 1049.02, 1.0, (h + 1000), 6, -1, 4.0);//
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, hX, hY, hZ+0.5, 30.0, GetPlayerVirtualWorld(playerid), 1);

			format(fstr, sizeof(fstr),"House id %d created.", h);
			SendClientMessage(playerid, WHITE, fstr);

			GetPosBehindOfPlayer(playerid, hX, hY, -2.0);

			HouseInfo[h][hSPOutX] = hX;
			HouseInfo[h][hSPOutY] = hY;
			HouseInfo[h][hSPOutZ] = hZ;
			HouseInfo[h][hSPOutA] = hAngle + 180;

			SaveHouseStats(h);
			return 1;
		}
		else if(intid == 2)//2 Story
		{
		    format(file, sizeof(file), HOUSE_FILE, h);

		    new File:startfile = fopen(file, io_write);
	    	fclose(startfile);

			GetPlayerPos(playerid, hX, hY, hZ);
			GetPlayerFacingAngle(playerid, hAngle);

			new gowner[24], gname[40];
			format(gowner, sizeof(gowner), "Nobody");
			format(gname, sizeof(gname), "For-Sale");

			new val = random(1000000) + 2000000;//Random 2M-3M

			HouseInfo[h][hCPOutX] = hX;
			HouseInfo[h][hCPOutY] = hY;
			HouseInfo[h][hCPOutZ] = hZ;
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			HouseInfo[h][hValue] = val;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;

			HouseInfo[h][hWorld] = GetPlayerVirtualWorld(playerid);
			HouseInfo[h][hSpawnInterior] = GetPlayerInterior(playerid);
			HouseInfo[h][hHouseInterior] = 9;//

			format(labeltext, sizeof(labeltext), "This house is for sale!\n House Type: 2 Story House\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", number_format(HouseInfo[h][hValue]), h);
			HouseCPOut[h] = CreateDynamicCP(hX, hY, hZ, 1.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 4.0);
			HouseCPInt[h] = CreateDynamicCP(2317.77, -1026.76, 1050.21, 1.0, (h + 1000), 9, -1, 4.0);//
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, hX, hY, hZ+0.5, 30.0, GetPlayerVirtualWorld(playerid), 1);

			format(fstr, sizeof(fstr),"House id %d created.", h);
			SendClientMessage(playerid, WHITE, fstr);

			GetPosBehindOfPlayer(playerid, hX, hY, -2.0);

			HouseInfo[h][hSPOutX] = hX;
			HouseInfo[h][hSPOutY] = hY;
			HouseInfo[h][hSPOutZ] = hZ;
			HouseInfo[h][hSPOutA] = hAngle + 180;

			SaveHouseStats(h);
			return true;
		}
		else if(intid == 3)//Small Mansion
		{
		    format(file, sizeof(file), HOUSE_FILE, h);

		    new File:startfile = fopen(file, io_write);
	    	fclose(startfile);

			GetPlayerPos(playerid, hX, hY, hZ);
			GetPlayerFacingAngle(playerid, hAngle);

			new gowner[24], gname[40];
			format(gowner, sizeof(gowner), "Nobody");
			format(gname, sizeof(gname), "For-Sale");

			new val = random(4000000) + 3000000;//Random 3M-5M

			HouseInfo[h][hCPOutX] = hX;
			HouseInfo[h][hCPOutY] = hY;
			HouseInfo[h][hCPOutZ] = hZ;
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			HouseInfo[h][hValue] = val;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;

			HouseInfo[h][hWorld] = GetPlayerVirtualWorld(playerid);
			HouseInfo[h][hSpawnInterior] = GetPlayerInterior(playerid);
			HouseInfo[h][hHouseInterior] = 12;//

			format(labeltext, sizeof(labeltext), "This house is for sale!\n House Type: Small Mansion\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", number_format(HouseInfo[h][hValue]), h);
			HouseCPOut[h] = CreateDynamicCP(hX, hY, hZ, 1.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 4.0);
			HouseCPInt[h] = CreateDynamicCP(2324.41, -1149.54, 1050.71, 1.0, (h + 1000), 12, -1, 4.0);//
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, hX, hY, hZ+0.5, 30.0, GetPlayerVirtualWorld(playerid), 1);

			format(fstr, sizeof(fstr),"Mansion id %d created.", h);
			SendClientMessage(playerid, WHITE, fstr);

			GetPosBehindOfPlayer(playerid, hX, hY, -2.0);

			HouseInfo[h][hSPOutX] = hX;
			HouseInfo[h][hSPOutY] = hY;
			HouseInfo[h][hSPOutZ] = hZ;
			HouseInfo[h][hSPOutA] = hAngle + 180;

			SaveHouseStats(h);
			return true;
		}
		else if(intid == 4)//Large Mansion
		{
		    format(file, sizeof(file), HOUSE_FILE, h);

		    new File:startfile = fopen(file, io_write);
	    	fclose(startfile);

			GetPlayerPos(playerid, hX, hY, hZ);
			GetPlayerFacingAngle(playerid, hAngle);

			new gowner[24], gname[40];
			format(gowner, sizeof(gowner), "Nobody");
			format(gname, sizeof(gname), "For-Sale");

			new val = random(5000000) + 5000000;//Random 5M-10M

			HouseInfo[h][hCPOutX] = hX;
			HouseInfo[h][hCPOutY] = hY;
			HouseInfo[h][hCPOutZ] = hZ;
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			HouseInfo[h][hValue] = val;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;

			HouseInfo[h][hWorld] = GetPlayerVirtualWorld(playerid);
			HouseInfo[h][hSpawnInterior] = GetPlayerInterior(playerid);
			HouseInfo[h][hHouseInterior] = 5;//

			format(labeltext, sizeof(labeltext), "This house is for sale!\n House Type: Large Mansion\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", number_format(HouseInfo[h][hValue]), h);
			HouseCPOut[h] = CreateDynamicCP(hX, hY, hZ, 1.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 4.0);
			HouseCPInt[h] = CreateDynamicCP(140.28, 1365.92, 1083.85, 1.0, (h + 1000), 5, -1, 4.0);//
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, hX, hY, hZ+0.5, 30.0, GetPlayerVirtualWorld(playerid), 1);

			format(fstr, sizeof(fstr),"Mansion id %d created.", h);
			SendClientMessage(playerid, WHITE, fstr);

			GetPosBehindOfPlayer(playerid, hX, hY, -2.0);

			HouseInfo[h][hSPOutX] = hX;
			HouseInfo[h][hSPOutY] = hY;
			HouseInfo[h][hSPOutZ] = hZ;
			HouseInfo[h][hSPOutA] = hAngle + 180;

			SaveHouseStats(h);
			return true;
		}
		else if(intid == 5)//Apartment
		{
		    format(file, sizeof(file), HOUSE_FILE, h);

		    new File:startfile = fopen(file, io_write);
	    	fclose(startfile);

			GetPlayerPos(playerid, hX, hY, hZ);
			GetPlayerFacingAngle(playerid, hAngle);

			new gowner[24], gname[40];
			format(gowner, sizeof(gowner), "Nobody");
			format(gname, sizeof(gname), "For-Sale");

			new val = random(4000000) + 3000000;//Random 3M-5M

			HouseInfo[h][hCPOutX] = hX;
			HouseInfo[h][hCPOutY] = hY;
			HouseInfo[h][hCPOutZ] = hZ;
			HouseInfo[h][hOwner] = gowner;
			HouseInfo[h][hName] = gname;
			HouseInfo[h][hValue] = val;
			new stringg[24];
			format(stringg, sizeof(stringg), "Empty");
			HouseInfo[h][hKeyOwner1] = stringg;
			HouseInfo[h][hKeyOwner2] = stringg;
			HouseInfo[h][hKeyOwner3] = stringg;
			HouseInfo[h][hKeyOwner4] = stringg;
			HouseInfo[h][hKeyOwner5] = stringg;
			HouseInfo[h][hKeyOwner6] = stringg;
			HouseInfo[h][hKeyOwner7] = stringg;
			HouseInfo[h][hKeyOwner8] = stringg;
			HouseInfo[h][hKeyOwner9] = stringg;
			HouseInfo[h][hKeyOwner10] = stringg;

			HouseInfo[h][hWorld] = GetPlayerVirtualWorld(playerid);
			HouseInfo[h][hSpawnInterior] = GetPlayerInterior(playerid);
			HouseInfo[h][hHouseInterior] = 7;//

			format(labeltext, sizeof(labeltext), "This house is for sale!\n House Type: Apartment\nCost: $%s\nID: %d\nTo buy this house enter the checkpoint", number_format(HouseInfo[h][hValue]), h);
			HouseCPOut[h] = CreateDynamicCP(hX, hY, hZ, 1.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 4.0);
			HouseCPInt[h] = CreateDynamicCP(225.7121, 1021.4438, 1084.0177, 1.0, (h + 1000), 7, -1, 4.0);//
			HouseLabel[h] = Create3DTextLabel(labeltext, YELLOW, hX, hY, hZ+0.5, 30.0, GetPlayerVirtualWorld(playerid), 1);

			format(fstr, sizeof(fstr),"Apartment id %d created.", h);
			SendClientMessage(playerid, WHITE, fstr);

			GetPosBehindOfPlayer(playerid, hX, hY, -2.0);

			HouseInfo[h][hSPOutX] = hX;
			HouseInfo[h][hSPOutY] = hY;
			HouseInfo[h][hSPOutZ] = hZ;
			HouseInfo[h][hSPOutA] = hAngle + 180;

			SaveHouseStats(h);
			return true;
		}
		else if(intid >= 6)//Wrong type ID..
		{
	        SendClientMessage(playerid, RED, "Wrong type id.");
			SendClientMessage(playerid, WHITE, "Types: 1. One Story House | 2. Two Story House | 3. Small Mansion | 4. Large Mansion");
			return 1;
		}
	}
	else
	{
    	return 0;
	}
    return 1;
}

CMD:removehouse(playerid, params[])
{
	new h, file[40];
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "d", h)) return SendClientMessage(playerid, RED, "[USAGE]: /removehouse [house id]");
    format(file, sizeof(file), HOUSE_FILE, h);
	if(!fexist(file)) return SendClientMessage(playerid, RED, "Invalid house id.");
	{
     	DestroyHouseEntrance(h, TYPE_OUT);
	    DestroyHouseEntrance(h, TYPE_INT);
	    Delete3DTextLabel(HouseLabel[h]);
	    new str[150];
		format(str, sizeof(str), "House id %d removed.", h);
		SendClientMessage(playerid,RED,str);
		fremove(file);
	}
    return true;
}

CMD:removeallhouses(playerid, params[])
{
	new hcount, file[40];
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	else
	{
	    Loop(h, MAX_HOUSES)
	    {
	        format(file, sizeof(file), HOUSE_FILE, h);
	        if(fexist(file))
	        {
		     	DestroyHouseEntrance(h, TYPE_OUT);
			    DestroyHouseEntrance(h, TYPE_INT);
			    Delete3DTextLabel(HouseLabel[h]);
				fremove(file);
				hcount++;
			}
		}
		new str[150];
		format(str, sizeof(str), "%d house/s have been removed.", hcount);
		SendClientMessage(playerid,RED,str);
	}
    return true;
}

CMD:resethouseprices(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	for(new h = 0; h < MAX_HOUSES; h++)
	{
	    new file[40];
	    format(file, sizeof(file), HOUSE_FILE, h);
		if(fexist(file))
		{
		    if(HouseInfo[h][hHouseInterior] == 6)
			{
                new price = random(600000) + 200000;
		    	HouseInfo[h][hValue] = price;
			}
			else if(HouseInfo[h][hHouseInterior] == 9)
			{
                new price = random(800000) + 200000;
		    	HouseInfo[h][hValue] = price;
			}
			else if(HouseInfo[h][hHouseInterior] == 12)
			{
                new price = random(1800000) + 200000;
		    	HouseInfo[h][hValue] = price;
			}
			else if(HouseInfo[h][hHouseInterior] == 5)
			{
                new price = random(4800000) + 200000;
		    	HouseInfo[h][hValue] = price;
			}
			SaveHouseStats(h);
		}
	}
	SendClientMessage(playerid, WHITE, "All server houses prices have been reset.");
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new file[40], h;//file2[40];
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "d", h)) return SendClientMessage(playerid, RED, "[USAGE]: /sellhouse [house id]");
    format(file, sizeof(file), HOUSE_FILE, h);
	if(!fexist(file)) return SendClientMessage(playerid, RED, "Invalid house id.");
	if(!strcmp(GetHouseOwner(h), "Nobody", false)) return SendClientMessage(playerid, RED, "This house has no owner, you cant sell it.");
	{
		GivePlayerCash(playerid, ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN));
		//HouseInfo[h][hValue] = HouseInfo[h][hValue] - ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN);
		SellHouse(h);
		Loop(i, GetMaxPlayers())
		{
		    if(GetPVarInt(i, "LastHouseCP") == h && GetPVarInt(i, "IsInHouse") == 1)
		    {
		    	SetPVarInt(i, "IsInHouse", 0);
       			SetPlayerPosEx(i, HouseInfo[h][hSPOutX], HouseInfo[h][hSPOutY], HouseInfo[h][hSPOutZ], HouseInfo[h][hSpawnInterior], HouseInfo[h][hWorld]);
		        SetPlayerFacingAngle(i, HouseInfo[h][hSPOutA]);
		        SetPlayerInterior(i, HouseInfo[h][hSpawnInterior]);
		        SetPlayerVirtualWorld(i, HouseInfo[h][hWorld]);
			}
		}
		SendClientMessage(playerid, WHITE, "House sold.");
	}
    return true;
}

CMD:sellallhouses(playerid, params[])
{
	new file[40], hcount;
	if(PlayerInfo[playerid][aLevel] < 4) return SendClientMessage(playerid,RED,"Only admin level 4 can use this command.");
	{
	    Loop(h, MAX_HOUSES)
	    {
	        format(file, sizeof(file), HOUSE_FILE, h);
	        if(fexist(file) && strcmp(GetHouseOwner(h), "Nobody", false))
	        {
				GivePlayerCash(playerid, ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN));
				//HouseInfo[h][hValue] = HouseInfo[h][hValue] - ReturnPercent(GetHouseValue(h), HOUSE_SELLING_PERCENT_RETURN);
				new gname[40], gowner[24];
				format(gowner,sizeof(gowner), "Nobody");
				format(gname,sizeof(gname), "For-Sale");
				HouseInfo[h][hOwner] = gowner;
				HouseInfo[h][hName] = gname;
				new stringg[24];
				format(stringg, sizeof(stringg), "Empty");
				HouseInfo[h][hKeyOwner1] = stringg;
				HouseInfo[h][hKeyOwner2] = stringg;
				HouseInfo[h][hKeyOwner3] = stringg;
				HouseInfo[h][hKeyOwner4] = stringg;
				HouseInfo[h][hKeyOwner5] = stringg;
				HouseInfo[h][hKeyOwner6] = stringg;
				HouseInfo[h][hKeyOwner7] = stringg;
				HouseInfo[h][hKeyOwner8] = stringg;
				HouseInfo[h][hKeyOwner9] = stringg;
				HouseInfo[h][hKeyOwner10] = stringg;
				UpdateHouseText(h);
				SaveHouseStats(h);
				hcount++;
			}
		}
		SendClientMessage(playerid, WHITE, "All house/s on the server have been sold.");
	}
    return true;
}

CMD:roblist(playerid, params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
   	{
		ShowPlayerDialog(playerid, ROB_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR Robbery Commands", "{FFFFFF}/robbank\n/robcluck\n/robshot\n/robbiz\n/robammu\n/robstore\n/robpizza", "Ok", "");
    }
    return true;
}

CMD:robbery(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
	if(IsPlayerUndergoingHoldup(playerid)) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	new chance = random(8);
	if(IsPlayerInRangeOfPoint(playerid, 2.0, -2032.79, -117.39, 1034.80))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer11]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    	TimerInfo[playerid][CMD_timer11] = gettime();
		if((gettime() - 120) < unirobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
    	if(chance == 0)
		{
	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas University, Description: Attempted Robbery.");
	        SendClientMessage(playerid, RED, "You have failed to rob the Las Venturas University.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
		}
		else
		{
	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas University, Description: Robbery in Progress.");
		    GameTextForPlayer(playerid, "~r~Robbery In Progress~n~~r~Don't leave the Checkpoint.", 25000, 5);
	        IsRobbingUNI{playerid} = true;
	        unitimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        unirobbed = gettime();
        }
		SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,766.7718,-59.7159,1000.6563))
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer13]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer13] = gettime();
		if((gettime() - 120) < gymrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
		if(chance == 0)
		{
	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Gym, Description: Attempted Robbery");
	        SendClientMessage(playerid, RED, "You have failed to rob the Las Venturas Gym.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
		}
		else
		{
	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Gym, Description: Robbery in Progress.");
		    GameTextForPlayer(playerid, "~r~Robbery In Progress~n~~r~Don't leave the Checkpoint.", 25000, 5);
	        IsRobbingGym{playerid} = true;
	        gymtimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        gymrobbed = gettime();
        }
		SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,499.9675,-20.6944,1000.6797))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer14]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    	TimerInfo[playerid][CMD_timer14] = gettime();
	    if((gettime() - 120) < clubrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
    	if(chance == 0)
		{

	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Night Club, Description: Attempted Robbery.");

	        SendClientMessage(playerid, RED, "You have failed to rob the Las Venturas Night Club.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
		}
		else
		{
	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Night Club, Description: Robbery in Progress.");

		    GameTextForPlayer(playerid, "~r~Robbery In Progress~n~~r~Don't leave the Checkpoint.", 25000, 5);
	        IsRobbingClub{playerid} = true;
	        clubtimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        clubrobbed = gettime();
        }
		SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,496.4771,-76.0378,998.7578))
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer35]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer35] = gettime();
	    if((gettime() - 120) < barrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
		if(chance == 0)
		{

	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Bar, Description: Attempted Robbery.");
	        SendClientMessage(playerid, RED, "You have failed to rob the Las Venturas Bar.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
		}
		else
		{

	        format(fstr, sizeof(fstr), "[Dispatch]: All Units APB: Suspect: %s", GetPlayerNameEx(playerid));
			CopRadio(BLUE, fstr);
			CopRadio(BLUE, "[Dispatch]: Location: Las Venturas Bar, Description: Robbery in Progress.");
		    GameTextForPlayer(playerid, "~r~Robbery In Progress~n~~r~Don't leave the Checkpoint.", 25000, 5);
		    IsRobbingBar{playerid} = true;
	        bartimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        barrobbed = gettime();
        }
		SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at a robbery checkpoint!");
	}
	return 1;
}

CMD:holdup(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
	if(IsPlayerUndergoingHoldup(playerid)) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	new chance = random(3);
	if(IsPlayerInRangeOfPoint(playerid,1.0,374.7570,-118.8264,1001.4995))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer15]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    	TimerInfo[playerid][CMD_timer15] = gettime();
	    if((gettime() - 120) < pizzarobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
		if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Well Stacked Pizzas at Las Venturas Square.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob the Well Stacked Pizzas.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Well Stacked Pizzas at Las Venturas Square.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Well Stacked Pizzas, DON'T LEAVE THE CHECKPOINT!");
		    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
	        IsRobbingPizza{playerid} = true;
	        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
	        pizzatimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        pizzarobbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at a robbery checkpoint!");
	}
	return 1;
}

CMD:robcasino(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
	if(IsPlayerUndergoingHoldup(playerid)) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	new chance = random(8);
	if(GetPlayerVirtualWorld(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,1.0,1139.7198,-4.0644,1000.6719))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer16]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer16] = gettime();
		if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob The Emerald Isle Casino at The Las Venturas Strip[North]", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob The Emerald Isle Casino.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
	    if((gettime() - 120) < islerobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing The Emerald Isle Casino at The Las Venturas Strip[North]", GetName(playerid), playerid);
        CopRadio(BLUE, fstr);
        SendClientMessage(playerid, LIGHTGREEN, "You're robbing The Emerald Isle Casino, DON'T LEAVE THE CHECKPOINT!");
	    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        IsRobbingIsle{playerid} = true;
        isletimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        islerobbed = gettime();
	}
	else if(GetPlayerVirtualWorld(playerid) == 2 && IsPlayerInRangeOfPoint(playerid,1.0,1139.7198,-4.0644,1000.6719))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer17]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer17] = gettime();
		if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Las Venturas Casino at The Las Venturas Strip.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob the Las Venturas Casino.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
	    if((gettime() - 120) < vegasrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Las Venturas Casino at The Las Venturas Strip.", GetName(playerid), playerid);
        CopRadio(BLUE, fstr);
        SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Las Venturas Casino, DON'T LEAVE THE CHECKPOINT!");
	    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        IsRobbingVegas{playerid} = true;
        vegastimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        vegasrobbed = gettime();
	}
	else if(GetPlayerVirtualWorld(playerid) == 3 && IsPlayerInRangeOfPoint(playerid,1.0,1139.7198,-4.0644,1000.6719))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer18]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer18] = gettime();
		if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Redsands Casino at Redsands West.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob the Redsands Casino.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
	    if((gettime() - 120) < redrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Redsands Casino at Redsands West.", GetName(playerid), playerid);
        CopRadio(BLUE, fstr);
        SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Redsands Casino, DON'T LEAVE THE CHECKPOINT!");
	    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        IsRobbingRedsands{playerid} = true;
        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        redsandstimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        redrobbed = gettime();
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2156.6917,1599.5377,1006.1797))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer19]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    	TimerInfo[playerid][CMD_timer19] = gettime();
		if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Caligulas Casino at The Las Venturas Strip.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob the Caligulas Casino.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
		    if((gettime() - 120) < calgrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
	        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing Caligulas Casino at The Las Venturas Strip.", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, LIGHTGREEN, "You're robbing Caligulas Casino, DON'T LEAVE THE CHECKPOINT!");
		    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
	        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
	        IsRobbingCalg{playerid} = true;
	        calgtimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
	        calgrobbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,1955.3691,1018.0455,992.4688))
    {
        if((gettime() - 120) < TimerInfo[playerid][CMD_timer20]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    	TimerInfo[playerid][CMD_timer20] = gettime();
    	if(chance == 0)
		{
		    format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the 4 Dragons Casino at The Las Venturas Strip[South]", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, RED, "You have failed to rob the 4 Dragons Casino.");
		    GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
	        SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
		    if((gettime() - 120) < dragrobbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
	        format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing 4 Dragons Casino at The Las Venturas Strip[South]", GetName(playerid), playerid);
	        CopRadio(BLUE, fstr);
	        SendClientMessage(playerid, LIGHTGREEN, "You're robbing 4 Dragons Casino, DON'T LEAVE THE CHECKPOINT!");
		    GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
	        SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
	        IsRobbingDrag{playerid} = true;
	        dragtimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
	        ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
	        dragrobbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at a casino robbery checkpoint!");
	}
	return 1;
}

CMD:robbank(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsRobbingBank1{playerid} == true || IsRobbingBank2{playerid} == true || IsRobbingBank3{playerid} == true || IsRobbingBank4{playerid} == true)
		return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
	if(IsPlayerInRangeOfPoint(playerid,1.0,2316.6169,-7.3947,26.7422) && GetPlayerVirtualWorld(playerid) == 1)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer23]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer23] = gettime();
        new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Bank at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Bank.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < bank1robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Bank at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Bank, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingBank1{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        	banktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	bank1robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2316.6169,-7.3947,26.7422) && GetPlayerVirtualWorld(playerid) == 2)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer23]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer23] = gettime();
        new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Bank at El Quebrados.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Bank.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < bank2robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Bank at El Quebrados.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Bank, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingBank2{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        	banktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	bank2robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2316.6169,-7.3947,26.7422) && GetPlayerVirtualWorld(playerid) == 3)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer23]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer23] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Bank at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Bank.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < bank3robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Bank at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Bank, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingBank3{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        	banktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	bank3robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,2316.6169,-7.3947,26.7422) && GetPlayerVirtualWorld(playerid) == 4)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer23]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer23] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Bank at Tierra Robada.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Bank.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < bank4robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Bank at Tierra Robada.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Bank, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingBank4{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+6);
        	banktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	bank4robbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at the robbery checkpoint.");
	}
    new astring[100],pName[24];
    GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /robbank",pName,playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:robstore(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsRobbingStore1{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingStore2{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingStore3{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingStore4{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
	if(IsPlayerInRangeOfPoint(playerid,1.0,-10.6035,-178.2635,1003.5469) && GetPlayerVirtualWorld(playerid) == 1)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer24]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer24] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the 24/7 Store at The Old Vegas Strip[North]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the 24/7 Store.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < store1robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the 24/7 Store at The Old Vegas Strip[North]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the 24/7 Store, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingStore1{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	storetimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	store1robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,-10.6035,-178.2635,1003.5469) && GetPlayerVirtualWorld(playerid) == 2)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer24]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer24] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the 24/7 Store at The Old Vegas Strip[SE]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the 24/7 Store.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < store2robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the 24/7 Store at The Old Vegas Strip[SE]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the 24/7 Store, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingStore2{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	storetimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	store2robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,-10.6035,-178.2635,1003.5469) && GetPlayerVirtualWorld(playerid) == 3)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer24]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer24] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the 24/7 Store at The Las Venturas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the 24/7 Store.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < store3robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the 24/7 Store at The Las Venturas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the 24/7 Store, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingStore3{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	storetimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	store3robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,-10.6035,-178.2635,1003.5469) && GetPlayerVirtualWorld(playerid) == 4)
    {
	    if((gettime() - 120) < TimerInfo[playerid][CMD_timer24]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer24] = gettime();
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the 24/7 Store at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the 24/7 Store.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < store4robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the 24/7 Store at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the 24/7 Store, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingStore4{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	storetimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	store4robbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at the robbery checkpoint.");
	}
	new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /robstore",pName,playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:robcluck(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsRobbingCluck1{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingCluck2{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingCluck3{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
    if((gettime() - 120) < TimerInfo[playerid][CMD_timer25]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer25] = gettime();
	if(IsPlayerInRangeOfPoint(playerid,1.0,371.5888,-6.0188,1001.8589) && GetPlayerVirtualWorld(playerid) == 1)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Cluck'n Bell at The Old Vegas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Cluck'n Bell.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < cluck1robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Cluck'n Bell at The Old Vegas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Cluck'n Bell, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingCluck1{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	clucktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	cluck1robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,371.5888,-6.0188,1001.8589) && GetPlayerVirtualWorld(playerid) == 2)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Cluck'n Bell at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Cluck'n Bell.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < cluck2robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Cluck'n Bell at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Cluck'n Bell, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingCluck2{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	clucktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	cluck2robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,371.5888,-6.0188,1001.8589) && GetPlayerVirtualWorld(playerid) == 3)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Cluck'n Bell at Tierra Robada.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Cluck'n Bell.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < cluck3robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Cluck'n Bell at Tierra Robada.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Cluck'n Bell, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingCluck3{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	clucktimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	cluck3robbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at the robbery checkpoint.");
	}
	new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /robcluck",pName,playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:robshot(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsRobbingShot1{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingShot2{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingShot3{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingShot4{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsRobbingShot5{playerid} == true) return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
    if((gettime() - 120) < TimerInfo[playerid][CMD_timer26]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer26] = gettime();
	if(IsPlayerInRangeOfPoint(playerid,1.0,376.5498,-67.4389,1001.5078) && GetPlayerVirtualWorld(playerid) == 1)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Burger Shot at The Old Vegas Strip[West]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Burger Shot.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < shot1robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Burger Shot at The Old Vegas Strip[West]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Burger Shot, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingShot1{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	shottimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	shot1robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,376.5498,-67.4389,1001.5078) && GetPlayerVirtualWorld(playerid) == 2)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Burger Shot at The Old Vegas Strip[SE]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Burger Shot.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < shot2robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Burger Shot at The Old Vegas Strip[SE]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Burger Shot, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingShot2{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	shottimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	shot2robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,376.5498,-67.4389,1001.5078) && GetPlayerVirtualWorld(playerid) == 3)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Burger Shot at Redsands West.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Burger Shot.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < shot3robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Burger Shot at Redsands West.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Burger Shot, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingShot3{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	shottimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	shot3robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,376.5498,-67.4389,1001.5078) && GetPlayerVirtualWorld(playerid) == 4)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Burger Shot at Spinybed.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Burger Shot.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < shot4robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Burger Shot at Spinybed.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Burger Shot, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingShot4{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	shottimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	shot4robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,376.5498,-67.4389,1001.5078) && GetPlayerVirtualWorld(playerid) == 5)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Burger Shot at Redsands East.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Burger Shot.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < shot5robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Burger Shot at Redsands East.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, LIGHTGREEN, "You're robbing the Burger Shot, DON'T LEAVE THE CHECKPOINT!");
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingShot5{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	shottimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
        	shot5robbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at the robbery checkpoint.");
	}
	new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /robshot",pName,playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:robammu(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can rob places.");
	if(IsRobbingAmmu1{playerid} == true || IsRobbingAmmu2{playerid} == true || IsRobbingAmmu3{playerid} == true
	|| IsRobbingAmmu4{playerid} == true || IsRobbingAmmu5{playerid} == true || IsRobbingAmmu6{playerid} == true)
		return SendClientMessage(playerid, RED, "You're already robbing the joint.");
	if(IsPlayerHoldingAGun(playerid) == 0 || HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You must be holding a gun to rob places.");
    if((gettime() - 120) < TimerInfo[playerid][CMD_timer27]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer27] = gettime();
	if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 1)
    {
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at The Las Venturas Strip[South]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu1robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at The Las Venturas Strip[South]", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu1{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu1robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 2)
	{
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at Bone County.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu2robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at Bone County.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu2{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu2robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 3)
	{
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu3robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at Fort Carson.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu3{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu3robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 4)
	{
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at El Quebrados.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu4robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at El Quebrados.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu4{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu4robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 5)
	{
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at The Old Vegas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu5robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at The Old Vegas Strip.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu5{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu5robbed = gettime();
        }
	}
	else if(IsPlayerInRangeOfPoint(playerid,1.0,295.5833,-80.8050,1001.5156) && GetPlayerVirtualWorld(playerid) == 6)
	{
		new chance = random(3);
		if(chance == 0)
		{
	    	format(fstr, sizeof(fstr),  "[DISPATCH]: Suspect %s (%d) has attempted to rob the Ammunation at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
        	SendClientMessage(playerid, RED, "You have failed to rob the Ammunation.");
	    	GameTextForPlayer(playerid, "~w~Robbery ~r~Failed", 5000, 5);
        	SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
		}
		else
		{
	    	if((gettime() - 120) < ammu6robbed) return SendClientMessage(playerid, RED, "This place has been robbed recently, try again later.");
        	format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) is now robbing the Ammunation at Las Venturas Square.", GetName(playerid), playerid);
        	CopRadio(BLUE, fstr);
	    	GameTextForPlayer(playerid, "~r~Holdup ~w~In ~g~Progress...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
        	IsRobbingAmmu6{playerid} = true;
        	SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+4);
        	ammutimer{playerid} = SetTimerEx("RobberyTimer", 25000, false, "d", playerid);
        	ammu6robbed = gettime();
        }
	}
	else
	{
        SendClientMessage(playerid, RED, "You're not at the robbery checkpoint.");
	}
	new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /robammu",pName,playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:help(playerid, params[])
{
    if(GetTeam{playerid} == CLASS_COPS)
	{
	    ShowPlayerDialog(playerid, COP_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Police",
	"{FFFFFF}You're a police officer, your job is to arrest(/ar) and takedown\nwanted criminals(/pc) and ticket(/tk) suspect civilians(/pc).\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
	else if(GetTeam{playerid} == CLASS_CIA)
	{
        ShowPlayerDialog(playerid, CIA_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas CIA",
	"{FFFFFF}You're a undercover cia agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
	else if(GetTeam{playerid} == CLASS_FBI)
	{
        ShowPlayerDialog(playerid, FBI_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas FBI",
	"{FFFFFF}You're a undercover fbi agent, your job is to focus on and takedown\nmost wanted criminals(/pc) undetected using your stealth tactics.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    else if(GetTeam{playerid} == CLASS_CIV)
	{
        ShowPlayerDialog(playerid, CIV_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Civilian",
	"{FFFFFF}You're a civilian(robber), your job is to rob players, casinos,\nbanks, stores and businesses while trying to avoid arrest from\nlaw enforcement. If you get arrested or taken down you are then\nsent to jail for 3-4 mins, which you can either /escape or get a\nfriend to /break or /bail you out.\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    else if(GetTeam{playerid} == CLASS_MEDIC)
	{
        ShowPlayerDialog(playerid, MEDIC_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Medic",
	"{FFFFFF}You're a medic, your job is to assist members of Las Venturas with\ninjuries using /medic, they can also /callmedic to call for help.\nUse /m [msg] for [Medic Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    else if(GetTeam{playerid} == CLASS_ARMY)
	{
        ShowPlayerDialog(playerid, ARMY_MSG, DIALOG_STYLE_MSGBOX , "{FFFFFF}Las Venturas Army",
	"{FFFFFF}You're a army soldier, your job is to focus on and takedown most\nwanted criminals(/pc) at all costs using army supplied vehicles.\nYou can also /taze(/tz) and /cuff(/cf) wanted criminals and you\ncan /bail out prisoners or take a /bribe from wanted criminals.\nUse /c [msg] for [Cop Radio]\n\nUse /faqs for the list of frequently asked questions and /cmds\nfor a list of available commands. Use /askadmin for admin help\nor use /n for helper assistance.", "Ok", "");
	}
    return true;
}

CMD:service(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "You need to be in a vehicle as the driver to use this command.");
	if(IsPlayerInRangeOfPoint(playerid,20.0,2114.8848,920.2251,10.8203) || IsPlayerInRangeOfPoint(playerid,20.0,2639.7700,1106.1627,10.8203)
	|| IsPlayerInRangeOfPoint(playerid,20.0,2202.4160,2474.7686,10.8203) || IsPlayerInRangeOfPoint(playerid,20.0,2147.2354,2747.9351,10.8203)
	|| IsPlayerInRangeOfPoint(playerid,20.0,1596.1118,2198.9944,10.8203) || IsPlayerInRangeOfPoint(playerid,20.0,612.0298,1695.0731,6.9922)
	|| IsPlayerInRangeOfPoint(playerid,20.0,-1328.3317,2677.4412,50.0625) || IsPlayerInRangeOfPoint(playerid,20.0,-1471.3004,1864.1031,32.6328)
	|| IsPlayerInRangeOfPoint(playerid,20.0,1602.5015,1615.4475,10.8203) || IsPlayerInRangeOfPoint(playerid,20.0,-2322.4451,2298.0378,-0.5677))
	{
	    ShowPlayerDialog(playerid, SERVICE_STATION_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Las Venturas Service Station - Menu", "{FFFFFF}Service: Repair - Price: $500\nService: Refuel - Price: $500\nService: Vehicle Bomb - Price: $100K\nClick here for Tune Menu", "Buy", "Cancel");
	}
	else
	{
		SendClientMessage(playerid, RED, "You're not at a service station.");
	}
	return true;
}

CMD:pay(playerid, params[])
{
    new targetid, cash;
    if(sscanf(params, "ud", targetid, cash)) return SendClientMessage(playerid, RED, "[USAGE]: /pay [playerid] [amount]");
    if((gettime() - 30) < TimerInfo[playerid][CMD_timer4]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//30 secs
    TimerInfo[playerid][CMD_timer4] = gettime();
    if(GetPlayerCash(playerid) < cash) return SendClientMessage(playerid, RED, "Insufficient funds.");
  	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
 	if(!ProxDetectorS(5.0, playerid, targetid)) return SendClientMessage(playerid, RED, "That player is not close enough.");
 	if(targetid == playerid) return SendClientMessage(playerid, RED, "You cant pay yourself.");
	if(cash <= 0) return SendClientMessage(playerid, RED, "Payments must be greater then $0.");
	{
		GivePlayerCash(playerid, -cash);
		GivePlayerCash(targetid, cash);
		format(fstr, sizeof(fstr),"You have just paid %s (%d) $%s.", GetName(targetid), targetid, number_format(cash));
		SendClientMessage(playerid, YELLOW, fstr);
		format(fstr, sizeof(fstr),"%s (%d) has just paid you $%s.", GetName(playerid), playerid, number_format(cash));
		SendClientMessage(targetid, LIGHTGREEN, fstr);
		new astring[100];
		format(astring, sizeof(astring),"%s (%d) just paid %s (%d) - $%s", GetName(playerid), playerid, GetName(targetid), targetid, number_format(cash));
		Log("logs/commands.log", astring);
    }
    return true;
}

CMD:loc(playerid, params[])
{
    new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid,RED, "[USAGE]: /loc [playerid]");
	if(!IsPlayerConnected(targetid)) SendClientMessage(playerid, RED, "Player not found.");
	{
        new current_zone;
        current_zone = Player_Zone[targetid];
	    format(fstr, sizeof(fstr), "%s (%d) is currently located at %s", GetName(targetid), targetid, ZoneNames[current_zone][zone_name]);
	    SendClientMessage(playerid, YELLOW, fstr);
	}
	return true;
}

CMD:rules(playerid, params[])
{
    ShowPlayerDialog(playerid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
	"{FF0000}ACnR Server Rules",
	"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
	"Accept", "Decline");
	new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /rules",pName,playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:me(playerid, params[])
{
	new action[50];
    if((gettime() - 2) < TimerInfo[playerid][CMD_timer31]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer31] = gettime();
    if(sscanf(params, "s[50]", action)) return SendClientMessage(playerid, RED, "[USAGE]: /me [action]");
    if(IsMuted{playerid} == 1) return SendClientMessage(playerid, RED, "You cant use this command while You're muted.");
    if(strlen(action) < 1 || strlen(action) > 64) return SendClientMessage(playerid, RED, "Your action can only contain 1-64 characters.");
    format(fstr, sizeof(fstr), "%s %s...", GetName(playerid), action);
    SendClientMessageToAll(WHITE, fstr);
    return true;
}

CMD:do(playerid, params[])
{
	new action[50], string[150];
    if((gettime() - 2) < TimerInfo[playerid][CMD_timer31]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer31] = gettime();
    if(sscanf(params, "s[50]", action)) return SendClientMessage(playerid, RED, "[USAGE]: /do [local chat]");
    if(IsMuted{playerid} == 1) return SendClientMessage(playerid, RED, "You cant use this command while You're muted.");
    if(strlen(action) < 1 || strlen(action) > 64) return SendClientMessage(playerid, RED, "Your action can only contain 1-64 characters.");
    format(string, sizeof(string), "* %s (( %s ))", GetName(playerid), action);
    ProxDetector(20.0, playerid, string, GREY, GREY, GREY, GREY, GREY);
    return true;
}

CMD:a(playerid, params[])
{
	if(IsPlayerAdmin(playerid))
	{
        format(fstr, sizeof(fstr), "[ADMIN-CHAT]: %s: %s", GetName(playerid), params);
        foreach(Player, i)
		{
            if(PlayerInfo[i][aLevel] >= 1 || IsPlayerAdmin(i))
			{
                SendClientMessage(i, ORANGE, fstr);
            }
        }
    }
    else if(PlayerInfo[playerid][aLevel] >= 1)
	{
        format(fstr, sizeof(fstr), "[ADMIN-CHAT]: %s: %s", GetName(playerid), params);
        foreach(Player, i)
		{
            if(PlayerInfo[i][aLevel] >= 1)
			{
                SendClientMessage(i, ORANGE, fstr);
            }
        }
    }
    else
    {
        return 0;
    }
    return true;
}

CMD:c(playerid, params[])
{
    if(IsACop(playerid))
	{
        format(fstr, sizeof(fstr), "%s (%d) @ [Cop Radio]: %s", GetName(playerid), playerid, params);
        CopRadio(BLUE, fstr);
    }
    else
    {
        SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
    }
    return true;
}

CMD:m(playerid, params[])
{
    if(GetTeam{playerid} == CLASS_MEDIC)
	{
        format(fstr, sizeof(fstr), "%s (%d) @ [Medic Radio]: %s", GetName(playerid), playerid, params);
        MedicRadio(PINK, fstr);
    }
    else
    {
        SendClientMessage(playerid, RED, "Only medics can use this command.");
    }
    return true;
}

CMD:pc(playerid, params[])
{
    ShowPlayerDialog(playerid, PC_MENU, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR Player Colors", "{FFFFFF}White Player Color: Innocent Civ/CIA/FBI\n{FFFF33}Yellow Player Color: Suspect Civilian\n{FF0000}Red Player Color: Wanted Criminal\n{3300FF}Blue Player Color: Cop\n{006600}Green Player Color: Army\n{FF0033}Pink Player Color: Medic\n{FF6600}Orange Player Color: Hiding VIP\n{660066}Purple Player Color: On-Duty Admin\n{999999}Grey Player Color: Dead/Joining Player", "Ok", "");
    new astring[100],pName[24];
	GetPlayerName(playerid,(pName),sizeof(pName));
    format(astring,sizeof(astring),"%s (%d) typed: /pc",pName,playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:anims(playerid, params[])
{
    ShowPlayerDialog(playerid, ANIM_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}Animations List", "{FFFFFF}/dance /laugh /piss /chat /fucku /vomit /slapass /wave\n/drunk /handsup /deal /crack /gsit /sit /taichi /lay /cry /smoke", "Ok", "");
    return true;
}

CMD:cry(playerid, params[])
{
    new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
    ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 0, 0, 0, 0, 0);
   	format(string, sizeof(string), "%s cries...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
    return true;
}

CMD:dance(playerid, params[])
{
	new string[50], style;
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	if(sscanf(params, "d", style)) return SendClientMessage(playerid, RED, "[USAGE]: /dance [1-4]");
	if(style < 1 || style > 4) return SendClientMessage(playerid, RED, "Invalid style. Styles: 1-4");
	IsPlayerUsingAnim{playerid} = true;
	if(style == 1)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		format(string, sizeof(string), "%s dances...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		return true;
	}
	else if(style == 2)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		format(string, sizeof(string), "%s dances...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		return true;
	}
	else if(style == 3)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		format(string, sizeof(string), "%s dances...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		return true;
	}
	else if(style == 4)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
		format(string, sizeof(string), "%s dances...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:laugh(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s laughs at %s...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s laughs...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s laughs...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:piss(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	SetPlayerSpecialAction(playerid, 68);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s pisses on %s...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s takes a piss...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s takes a piss...", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:chat(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 1.800001, 1, 1, 1, 1, 13000);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s chats with %s...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s chats with himself...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s chats with himself....", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:fucku(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 1, 1, 1, 1);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s tells %s to get fucked...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s says fuck u...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s says fuck you....", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:vomit(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s vomits all over %s...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s vomits...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s vomits....", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:slapass(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s slaps %s ass...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s slaps their own ass...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s slaps their own ass....", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:wave(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	IsPlayerUsingAnim{playerid} = true;
	if(GetClosestPlayerID(playerid) != INVALID_PLAYER_ID)
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(GetClosestPlayerID(playerid), posx, posy, posz);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, posx, posy, posz))
		{
			format(string, sizeof(string), "%s waves at %s...", GetName(playerid), GetName(GetClosestPlayerID(playerid)));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
			return true;
		}
		else
		{
			format(string, sizeof(string), "%s waves at nobody...", GetName(playerid));
			SendClientMessageToAll(WHITE, string);
			SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
		}
		return true;
	}
	else
	{
		format(string, sizeof(string), "%s waves at nobody....", GetName(playerid));
		SendClientMessageToAll(WHITE, string);
		SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	}
	return true;
}

CMD:drunk(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 0, 0, 0);
	format(string, sizeof(string), "%s has too much to drink...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:handsup(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	format(string, sizeof(string), "%s puts their hands up...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:deal(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
	format(string, sizeof(string), "%s makes a deal...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:crack(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s overdoses on crack...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:smoke(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
    ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s puffs on a cigarette...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:gsit(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s sits on the ground...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:sit(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	ApplyAnimation(playerid, "PED", "SEAT_idle", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s sits down...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:taichi(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s performs taichi...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:lay(playerid, params[])
{
	new string[50];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer29]) return SendClientMessage(playerid, RED, "Please wait before using an animation again.");
    TimerInfo[playerid][CMD_timer29] = gettime();
    if(HasBeenCuffed{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when you have been cuffed/tazered.");
   	if(HasBeenTied{playerid} == true) return SendClientMessage(playerid, RED, "You cant use animations when You're tied up.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use animations in vehicles.");
	if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return SendClientMessage(playerid, RED, "You must be spawned to use this command.");
	ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	format(string, sizeof(string), "%s lays down...", GetName(playerid));
	SendClientMessageToAll(WHITE, string);
	SetPlayerChatBubble(playerid, string, WHITE, 50, 5000);
	IsPlayerUsingAnim{playerid} = true;
	return true;
}

CMD:healme(playerid, params[])
{
	if(GetTeam{playerid} == CLASS_MEDIC || GetPlayerSkill(playerid) == 6)
	{
	    if((gettime() - 1) < TimerInfo[playerid][CMD_timer3]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
	    TimerInfo[playerid][CMD_timer3] = gettime();
	    new rand = random(5), Float:health;
	    GetPlayerHealth(playerid, health);
	    switch(rand)
	    {
	        case 0,1,2:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have healed yourself by 25 percent.");
	            if(health == 25) { SetPlayerHealth(playerid,  50); }
	            else if(health == 50) { SetPlayerHealth(playerid,  75); }
	            else if(health == 75) { SetPlayerHealth(playerid,  100); }
	            else { SetPlayerHealth(playerid,  health + 100/3); }
	        }
	        case 3:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have healed yourself by 50 percent.");
	            SetPlayerHealth(playerid,  health + 100/2);
	            if(health == 25) { SetPlayerHealth(playerid,  50); }
	            else if(health == 50) { SetPlayerHealth(playerid,  100); }
	            else { SetPlayerHealth(playerid,  health + 100/3); }
	        }
	        case 4:
	        {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have healed yourself to 100 percent.");
	            SetPlayerHealth(playerid, 100);
	        }
		}
	}
	else {
	    SendClientMessage(playerid, RED, "Only medics can heal themselves.");
	}
    return true;
}

CMD:makeadmin(playerid, params[])  {
	if(PlayerInfo[playerid][aLevel] >= 3) {

		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue)) {
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /makeadmin [playerid] [level]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][Helper] == 1 || PlayerInfo[iTargetID][hHelper] == 1) {
				SendClientMessage(playerid, COLOR_GRAD1, "You cannot make helpers admins!");
			}
			if(PlayerInfo[iTargetID][aLevel] == iAdminValue) return SendClientMessage(playerid, COLOR_GREY, "This person already has this administrator level.");
			else {

				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];

				new szRank[128];
				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "AdmCmd: %s has removed %s's administrator rank.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), ARank1);
					case 2: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), ARank2);
					case 3: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), ARank3);
					case 4: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), ARank4);
					default: format(szRank, sizeof(szRank), "AdmCmd: %s has made %s an undefined level administrator.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				}

				PlayerInfo[iTargetID][aLevel] = iAdminValue;
				ABroadCast(COLOR_LIGHTRED, szRank, 2);
				Log("logs/admin.log", szMessage);

				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "Your administrator rank has been removed by %s.", GetPlayerNameEx(playerid));
					case 1: format(szRank, sizeof(szRank), "You have been made a %s by %s.", ARank1, GetPlayerNameEx(playerid));
					case 2: format(szRank, sizeof(szRank), "You have been made a %s by %s.", ARank2, GetPlayerNameEx(playerid));
					case 3: format(szRank, sizeof(szRank), "You have been made a %s by %s.", ARank3, GetPlayerNameEx(playerid));
					case 4: format(szRank, sizeof(szRank), "You have been made a %s by %s.", ARank4, GetPlayerNameEx(playerid));
					default: format(szRank, sizeof(szRank), "You have been made an undefined level administrator by %s.", GetPlayerNameEx(playerid));
				}
				SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szRank);

				switch(iAdminValue) {
					case 0: format(szRank, sizeof(szRank), "You have removed %s's administrator rank.", GetPlayerNameEx(iTargetID));
					case 1: format(szRank, sizeof(szRank), "You have made %s a %s.", GetPlayerNameEx(iTargetID), ARank1);
					case 2: format(szRank, sizeof(szRank), "You have made %s a %s.", GetPlayerNameEx(iTargetID), ARank2);
					case 3: format(szRank, sizeof(szRank), "You have made %s a %s.", GetPlayerNameEx(iTargetID), ARank3);
					case 4: format(szRank, sizeof(szRank), "You have made %s a %s.", GetPlayerNameEx(iTargetID), ARank4);
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szRank);
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:setskill(playerid, params[])
{
	new skill, id;
	if(sscanf(params, "ud", id, skill)) return SendClientMessage(playerid,RED,"[USAGE]: /setskill [playerid] [skill (1-19)]");
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, RED, "Player not found.");
    if(IsLoggedIn{id} == 0) return SendClientMessage(playerid, RED, "Player not logged in.");
	{
	    PlayerInfo[id][pSkill] = skill;
	    PlayerPlaySound(id,1085,0.0,0.0,0.0);
	    format(fstr, sizeof(fstr), "You have set %s (%d) skill to %s.", GetName(id), id, GetPlayerSkillName(skill));
	    SendClientMessage(playerid, LIGHTGREEN, fstr);
	    format(fstr, sizeof(fstr), "Admin %s (%d) has set your skill to %s.", GetName(playerid), playerid, GetPlayerSkillName(skill));
	    SendClientMessage(id, LIGHTGREEN, fstr);
	    SaveUserStats(id);
	}
	return true;
}

CMD:setvip(playerid, params[])
{
	new vip, id;
	if(sscanf(params, "ud", id, vip)) return SendClientMessage(playerid,RED,"[USAGE]: /setvip [playerid] [level]");
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, RED, "Player not found.");
    if(IsLoggedIn{id} == 0) return SendClientMessage(playerid, RED, "Player not logged in.");
	{
	    PlayerInfo[id][vLevel] = vip;
	    PlayerPlaySound(id,1085,0.0,0.0,0.0);
	    format(fstr, sizeof(fstr), "You have set %s (%d) vip level to %d.", GetName(id), id, vip);
	    SendClientMessage(playerid, LIGHTGREEN, fstr);
	    format(fstr, sizeof(fstr), "Admin %s (%d) has set your vip level to %d.", GetName(playerid), playerid, vip);
	    SendClientMessage(id, LIGHTGREEN, fstr);
	    SaveUserStats(id);
	}
	return true;
}

CMD:sethelper(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /sethelper [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(IsLoggedIn{targetid} == 0) return SendClientMessage(playerid, RED, "Player not logged in.");
	{
	    if(PlayerInfo[targetid][Helper] == 0)
	    {
	    	PlayerInfo[targetid][Helper] = 1;
	    	PlayerPlaySound(targetid,1085,0.0,0.0,0.0);
	    	format(fstr, sizeof(fstr), "You have set %s (%d) as an Official ACnR Helper.", GetName(targetid), targetid);
	    	SendClientMessage(playerid, YELLOW, fstr);
	    	format(fstr, sizeof(fstr),"Admin %s (%d) has set you as an Official ACnR Helper.", GetName(playerid), playerid);
	    	SendClientMessage(targetid, LIGHTGREEN, fstr);
	    	SaveUserStats(targetid);
	    }
	    else
	    {
	    	PlayerInfo[targetid][Helper] = 0;
	    	PlayerPlaySound(targetid,1085,0.0,0.0,0.0);
	    	format(fstr, sizeof(fstr), "You have demoted %s (%d) as an Official ACnR Helper.", GetName(targetid), targetid);
	    	SendClientMessage(playerid, YELLOW, fstr);
	    	format(fstr, sizeof(fstr),"Admin %s (%d) has demoted you as an Official ACnR Helper.", GetName(playerid), playerid);
	    	SendClientMessage(targetid, RED, fstr);
	    	SaveUserStats(targetid);
	    }
	}
	return true;
}

CMD:sethhelper(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /sethelper [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(IsLoggedIn{targetid} == 0) return SendClientMessage(playerid, RED, "Player not logged in.");
	{
	    if(PlayerInfo[targetid][hHelper] == 0)
	    {
	    	PlayerInfo[targetid][hHelper] = 1;
	    	PlayerPlaySound(targetid,1085,0.0,0.0,0.0);
	    	format(fstr, sizeof(fstr), "You have set %s (%d) as an Official ACnR Head Helper.", GetName(targetid), targetid);
	    	SendClientMessage(playerid, YELLOW, fstr);
	    	format(fstr, sizeof(fstr),"Admin %s (%d) has set you as an Official ACnR Head Helper.", GetName(playerid), playerid);
	    	SendClientMessage(targetid, LIGHTGREEN, fstr);
	    	SaveUserStats(targetid);
	    }
	    else
	    {
	    	PlayerInfo[targetid][hHelper] = 0;
	    	PlayerPlaySound(targetid,1085,0.0,0.0,0.0);
	    	format(fstr, sizeof(fstr), "You have demoted %s (%d) as an Official ACnR Head Helper.", GetName(targetid), targetid);
	    	SendClientMessage(playerid, YELLOW, fstr);
	    	format(fstr, sizeof(fstr),"Admin %s (%d) has demoted you as an Official ACnR Head Helper.", GetName(playerid), playerid);
	    	SendClientMessage(targetid, RED, fstr);
	    	SaveUserStats(targetid);
	    }
	}
	return true;
}

CMD:n(playerid, params[])
{
	if(IsNewbieMuted{playerid} == true) return  SendClientMessage(playerid, WHITE, "[BOT]Elvis: You are muted from newbie chat, you cant use it!");
    if(PlayerInfo[playerid][aLevel] == 1)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Trial Admin %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    else if(PlayerInfo[playerid][aLevel] == 2)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Server Admin %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    else if(PlayerInfo[playerid][aLevel] == 3)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Head Admin %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    else if(PlayerInfo[playerid][aLevel] == 4)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Owner %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    else if(PlayerInfo[playerid][hHelper] >= 1)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Head Helper %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
	else if(PlayerInfo[playerid][Helper] >= 1)
	{
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Helper %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    else
    {
        new msg[64];
        if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /(n)ew [msg]");
        if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
        format(fstr, sizeof(fstr), "Newbie %s (%d): %s", GetName(playerid), playerid, msg);
        SendClientMessageToAll(LIGHTBLUE, fstr);
    }
    return true;
}

CMD:banip(playerid, params[])
{
    new targetid, ip[50], reason[24];
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(sscanf(params, "us[24]", targetid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /banip [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[targetid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant range ban admins.");
    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, RED, "You cant range ban bots.");
    {
        PlayerInfo[targetid][Banned] = 1;
        format(fstr, sizeof(fstr), "AdmCmd: %s (%d) has been range banned | Reason: %s", GetName(playerid), playerid, GetName(targetid), targetid, reason);
        SendClientMessageToAll(RED, fstr);
        GetPlayerIp(targetid, ip, sizeof(ip));
        format(fstr2, sizeof(fstr2), "banip %s",ip);
        GameTextForPlayer(targetid, "~r~Banned", 5000, 5);
        format(fstr3, sizeof(fstr3), "You have been range banned from ACnR. You were range banned by admin %s.", GetName(playerid));
        SendClientMessage(targetid, RED, fstr3);
        SendClientMessage(targetid, ORANGE, "If you think this range ban is unfair post an appeal at acnr.hostoi.com");

        for(new h = 0; h < MAX_HOUSES; h++)
        {
            if(!strcmp(GetHouseOwner(h), GetName(targetid), false))
            {
                SellHouse(h);
            }
        }
        for(new b = 0; b < MAX_BUSINESSES; b++)
        {
            if(!strcmp(BizInfo[b][bOwner], GetName(targetid), false))
            {
                SellBiz(b);
            }
        }

        UnloadPlayerVehicles(targetid);
        RemoveOwnedVehs(targetid);

        SendRconCommand(fstr2);
        BanEx(targetid, fstr);
    }
    return true;
}

CMD:ip(playerid, params[])
{
    new targetid, ip[50];
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /ip [playerid]");
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        GetPlayerIp(targetid, (ip),sizeof(ip));
        format(fstr, sizeof(fstr), "[IP]: %s (%d) - %s",  GetName(targetid), targetid, ip);
        SendClientMessage(playerid, GREY, fstr);
    }
    return true;
}

CMD:ban(playerid, params[])
{
    new targetid, reason[24];
    if(sscanf(params, "us[24]", targetid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /ban [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[targetid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant ban admins.");
    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, RED, "You cant ban bots.");
    {
        PlayerInfo[targetid][Banned] = 1;
        format(fstr, sizeof(fstr), "AdmiCmd: %s (%d) has been banned | Reason: %s", GetName(playerid), playerid, GetName(targetid), targetid, reason);
        SendClientMessageToAll(RED, fstr);
        GameTextForPlayer(targetid, "~r~Banned", 5000, 5);
        format(fstr2, sizeof(fstr2), "You have been banned from ACnR. You were banned by admin %s.", GetName(playerid));
        SendClientMessage(targetid, RED, fstr2);
        SendClientMessage(targetid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");

        for(new h = 0; h < MAX_HOUSES; h++)
        {
            if(!strcmp(GetHouseOwner(h), GetName(targetid), false))
            {
                SellHouse(h);
            }
        }
        for(new b = 0; b < MAX_BUSINESSES; b++)
        {
            if(!strcmp(BizInfo[b][bOwner], GetName(targetid), false))
            {
                SellBiz(b);
            }
        }

        UnloadPlayerVehicles(targetid);
        RemoveOwnedVehs(targetid);

        BanEx(targetid, fstr);
    }
    return true;
}

CMD:kick(playerid, params[])
{
    new targetid, reason[24];
    if(sscanf(params, "us[24]", targetid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /kick [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[targetid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant kick admins.");
    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, RED, "You cant kick bots.");
    {
        format(fstr, sizeof(fstr), "AdmCmd %s (%d) has been kicked | Reason: %s", GetName(targetid), targetid, reason);
        SendClientMessageToAll(RED, fstr);
        PlayerInfo[targetid][pKicks] ++;
        GameTextForPlayer(targetid, "~r~Kicked", 5000, 5);
        format(fstr2, sizeof(fstr2), "You've been kicked. You were kicked by admin %s.", GetName(playerid));
        SendClientMessage(targetid, RED, fstr2);
        SendClientMessage(targetid, ORANGE, "If you think this kick is unfair post a complaint on our forums");
        KickEx(targetid);
    }
    return true;
}

CMD:akill(playerid, params[])
{
    new targetid;
    if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /akill [playerid] [reason]");
    if(PlayerInfo[playerid][aLevel] < 2) return SendClientMessage(playerid, RED, "Only admin level 2+ can use the command.");
    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
	if(targetid == playerid) return SendClientMessage(playerid, RED, "You cant kill yourself.");
	if(PlayerInfo[targetid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant kill admins.");
	{
	    SetPlayerHealth(targetid, 0.0);
	    GameTextForPlayer(targetid,"~r~Wasted", 5000, 5);
	    format(fstr, sizeof(fstr), "Admin %s (%d) has owned you.", GetName(playerid), playerid);
        SendClientMessage(targetid, RED, fstr);
        new astring[100];
	    format(astring, sizeof(astring), "Admin %s (%d) has just killed %s (%d) with their admin powers.", GetName(playerid), playerid, GetName(targetid), targetid);
        Log("logs/commands.log", astring);
	}
    return true;
}

CMD:report(playerid, params[])
{
    new id, reason[150];
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer33]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer33] = gettime();
    if(sscanf(params, "us[150]", id, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /report [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 64) return SendClientMessage(playerid, RED, "Your reason can only contain 1-64 characters.");
    if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        format(fstr, sizeof(fstr), "You have just reported %s (%d) to online admins, dont DOUBLE REPORT.", GetName(id), id);
        SendClientMessage(playerid, ORANGE, fstr);
        format(fstr2, sizeof(fstr2), "[REPORT]: %s (%d) reported %s (%d) for: %s", GetName(playerid), playerid, GetName(id), id, reason);
        SendAdminMessage(ORANGE, fstr2);
    }
    return true;
}

CMD:sethealth(playerid, params[])
{
	new targetid, Float:Health;
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(sscanf(params, "uf", targetid, Health)) return SendClientMessage(playerid, RED, "[USAGE]: /sethealth [playerid] [amount]");
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        SetPlayerHealth(targetid, Health);
        format(fstr, sizeof(fstr), "Admin %s (%d) has set your health to %f%.", GetName(playerid), playerid, Health);
        SendClientMessage(targetid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have set %s (%d) health to %f%.", GetName(targetid), targetid, Health);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) health to %f%.", GetName(playerid), playerid, GetName(targetid), targetid, Health);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:setarmour(playerid, params[])
{
	new targetid, Float:Armour;
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(sscanf(params, "uf", targetid, Armour)) return SendClientMessage(playerid, RED, "[USAGE]: /setarmour [playerid] [amount]");
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        SetPlayerArmour(targetid, Armour);
        format(fstr, sizeof(fstr), "Admin %s (%d) has set your armour to %f%.", GetName(playerid), playerid, Armour);
        SendClientMessage(targetid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have set %s (%d) armour to %f%.", GetName(targetid), targetid, Armour);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) armour to %f%.", GetName(playerid), playerid, GetName(targetid), targetid, Armour);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:setcash(playerid, params[])
{
	new targetid, amount;
    if(sscanf(params, "ud", targetid, amount)) return SendClientMessage(playerid, RED, "[USAGE]: /setcash [playerid] [amount]");
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        format(fstr, sizeof(fstr), "Admin %s (%d) has set your money to $%s.", GetName(playerid), playerid, number_format(amount));
        SendClientMessage(targetid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have set %s (%d) money to $%s.", GetName(targetid), targetid, number_format(amount));
        SendClientMessage(playerid, YELLOW, fstr);
        SetPlayerCash(targetid, amount);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) money to $%s.", GetName(playerid), playerid, GetName(targetid), targetid, number_format(amount));
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:setwanted(playerid, params[])
{
	new targetid, level;
    if(sscanf(params, "ud", targetid, level)) return SendClientMessage(playerid, RED, "[USAGE]: /setwanted [playerid] [level]");
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        format(fstr, sizeof(fstr), "Admin %s (%d) has set your wanted level to %d.", GetName(playerid), playerid, level);
        SendClientMessage(targetid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have set %s (%d) wanted level to %d.", GetName(targetid), targetid, level);
        SendClientMessage(playerid, YELLOW, fstr);
        SetPlayerWantedLevel(targetid, level);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) wanted level to %d.", GetName(playerid), playerid, GetName(targetid), targetid, level);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:rwarn(playerid, params[])
{
    new warnid, rulenumber;
    if(PlayerInfo[playerid][aLevel] < 1) return SendClientMessage(playerid ,RED, "Only admin level 1+ can use this command.");
    if(sscanf(params, "ud", warnid, rulenumber)) return SendClientMessage(playerid, RED, "[USAGE]: /rwarn [playerid] [rule number]");
    if(warnid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[warnid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant warn admins.");
    if(IsPlayerNPC(warnid)) return SendClientMessage(playerid, RED, "You cant warn bots.");
    {
        format(fstr, sizeof(fstr), "AdmCmd: %s (%d) has been given a warning for breaking rule %d. Read /rules", GetName(warnid), warnid, rulenumber);
        SendClientMessageToAll(RED, fstr);
        ShowPlayerDialog(warnid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
	"{FF0000}ACnR Server Rules",
	"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
	"Accept", "Decline");
        PlayerInfo[warnid][pWarns] ++;
    }
    return true;
}

CMD:warn(playerid, params[])
{
    new warnid, reason[24];
    if(PlayerInfo[playerid][aLevel] >= 1)
    {
        if(sscanf(params, "us[24]", warnid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /warn [playerid] [reason]");
  		if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    	if(warnid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    	if(PlayerInfo[warnid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant warn admins.");
    	if(IsPlayerNPC(warnid)) return SendClientMessage(playerid, RED, "You cant warn bots.");
        format(fstr, sizeof(fstr), "Admin %s (%d) has given %s (%d) a warning for %s (/rules)", GetName(playerid), playerid, GetName(warnid), warnid, reason);
        SendClientMessageToAll(RED, fstr);
        ShowPlayerDialog(warnid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
	"{FF0000}ACnR Server Rules",
	"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
	"Accept", "Decline");
		PlayerInfo[warnid][pWarns] ++;
    }
    else if(PlayerInfo[playerid][hHelper] >= 1)
    {
        if(sscanf(params, "us[24]", warnid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /warn [playerid] [reason]");
  		if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    	if(warnid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    	if(PlayerInfo[warnid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant warn admins.");
        format(fstr, sizeof(fstr), "Head Helper %s (%d) has given %s (%d) a warning for %s (/rules)", GetName(playerid), playerid, GetName(warnid), warnid, reason);
        SendClientMessageToAll(RED, fstr);
        ShowPlayerDialog(warnid, RULES_LIST, DIALOG_STYLE_MSGBOX ,
	"{FF0000}ACnR Server Rules",
	"{FF0000}1: DONT use hacks/mods or bug abuse = ban + NO appeal!\n2: DONT DM, HK, PARK, CAMP or place RANDOM hits!\n3: DONT flame, insult, scam or troll!\n4: DONT spam, flood or advertise!\n5: DONT /q or pause to avoid anything!\n6: DONT team up with WANTED players as LAW ENFORCEMENT class!\n7: DONT complain about the server or ask for ANYTHING ingame!",
	"Accept", "Decline");
		PlayerInfo[warnid][pWarns] ++;
    }
    else
    {
        return 0;
    }
    return true;
}

CMD:gotoid(playerid, params[])
{
    if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][aLevel] >= 1)
    {
        new gotoplayerid;
        new Float:gX, Float:gY, Float:gZ;
        if(sscanf(params, "u", gotoplayerid)) return SendClientMessage(playerid, RED, "[USAGE]: /gotoid [playerid]");
        if(!IsPlayerConnected(gotoplayerid)) return SendClientMessage(playerid, RED, "Player not found.");
		if(GetPlayerVehicleID(playerid))
        {
            new vID, pID, Int;
            Int = GetPlayerInterior(gotoplayerid);
            pID = GetPlayerVirtualWorld(gotoplayerid);
            vID = GetVehicleVirtualWorld(GetPlayerVehicleID(playerid));
            GetPlayerPos(gotoplayerid, gX, gY, gZ);
            SetPlayerVirtualWorld(playerid, pID);
		    SetVehiclePos(GetPlayerVehicleID(playerid), gX+2, gY+2, gZ);
		    SetVehicleVirtualWorld(vID, pID);
		    SetPlayerInterior(playerid, Int);
			IsPlayerInArena{playerid} = false;
        }
	    else
	    {
            new pID, Int;
            Int = GetPlayerInterior(gotoplayerid);
			pID = GetPlayerVirtualWorld(gotoplayerid);
			GetPlayerPos(gotoplayerid, gX, gY, gZ);
			SetPlayerVirtualWorld(playerid, pID);
		    SetPlayerPos(playerid, gX+2, gY+2, gZ);
		    SetPlayerInterior(playerid, Int);
			IsPlayerInArena{playerid} = false;
        }
    }
    else
    {
        return 0;
    }
    return true;
}

CMD:get(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    {
        new getplayerid;
        new Float:gX, Float:gY, Float:gZ;
        if(sscanf(params, "u", getplayerid)) return SendClientMessage(playerid, RED, "[USAGE]: /get [playerid]");
        if(getplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
		if(GetPlayerVehicleID(getplayerid))
	    {
            new vID, pID, Int;
            Int = GetPlayerInterior(playerid);
            pID = GetPlayerVirtualWorld(playerid);
            vID = GetVehicleVirtualWorld(GetPlayerVehicleID(getplayerid));
            GetPlayerPos(playerid, gX, gY, gZ);
            SetPlayerVirtualWorld(getplayerid, pID);
		    SetVehiclePos(GetPlayerVehicleID(getplayerid), gX+2, gY+2, gZ);
		    SetVehicleVirtualWorld(vID, pID);
		    SetPlayerInterior(getplayerid, Int);
	    }
		else
		{
		    new pID, Int;
            Int = GetPlayerInterior(playerid);
			pID = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, gX, gY, gZ);
			SetPlayerVirtualWorld(getplayerid, pID);
		    SetPlayerPos(getplayerid, gX+2, gY+2, gZ);
		    SetPlayerInterior(getplayerid, Int);
        }
    }
    return true;
}

CMD:goto(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] >= 2)
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /goto [location]");
			SendClientMessage(playerid, COLOR_GRAD1, "Locations 1: LS,SF,LV,RC,ElQue,Bayside,stadium1,stadium2,stadium3,stadium4,int1,mark,mark2");
			SendClientMessage(playerid, COLOR_GRAD2, "Locations 2: sfairport,dillimore,bank,mall,allsaints,countygen,gym,rodeo,flint,idlewood");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You can not do this while spectating.");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"sfairport",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1412.5375,-301.8998,14.1411);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1412.5375,-301.8998,14.1411);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"sf",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1605.0,720.0,12.0);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1605.0,720.0,12.0);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

   		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

   		}
		else if(strcmp(params,"stadium1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,4);
			PlayerInfo[playerid][pInterior] = 4;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"stadium2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,7);
			PlayerInfo[playerid][pInterior] = 7;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"stadium3",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,14);
			PlayerInfo[playerid][pInterior] = 14;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"stadium4",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,15);
			PlayerInfo[playerid][pInterior] = 15;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"int1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInterior] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"mark",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt1"));
			}
			else
			{
				SetPlayerPos(playerid, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt1"));
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mark2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt2"));
			}
			else
			{
				SetPlayerPos(playerid, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt2"));
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"elque",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1446.5997,2608.4478,55.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1446.5997,2608.4478,55.8359);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"bayside",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2465.1348,2333.6572,4.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -2465.1348,2333.6572,4.8359);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;

		}
		else if(strcmp(params,"dillimore",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 634.9734, -594.6402, 16.3359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 634.9734, -594.6402, 16.3359);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"rodeo",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 587.0106,-1238.3374,17.8049);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 587.0106,-1238.3374,17.8049);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"flint",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -108.1058,-1172.5293,2.8906);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -108.1058,-1172.5293,2.8906);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
		else if(strcmp(params,"idlewood",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1955.1357,-1796.8896,13.5469);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1955.1357,-1796.8896,13.5469);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInterior] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVirtualWorld] = 0;
		}
	}
	else
	{
		return 0;
	}
	return 1;
}

CMD:sendto(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] >= 2)
	{
		new string[128], location[32], giveplayerid;
		if(sscanf(params, "s[32]u", location, giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /sendto [location] [player]");
			SendClientMessage(playerid, COLOR_GRAD1, "Locations 1: LS,SF,LV,RC,ElQue,Bayside,stadium1,stadium2,stadium3,stadium4,int1,mark,mark2");
			SendClientMessage(playerid, COLOR_GRAD2, "Locations 2: sfairport,dillimore,bank,mall,allsaints,countygen,gym,rodeo,flint,idlewood");
			return 1;
		}
		if(PlayerInfo[giveplayerid][aLevel] >= PlayerInfo[playerid][aLevel])
		{
			SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			return 1;
		}
		if (!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
			return 1;
		}
		if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "This person is currently in spectate mode.");
			return 1;
		}
		if(strcmp(location,"ls",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			}
			format(string, sizeof(string), " You have sent %s to Los Santos.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
  		else if(strcmp(location, "sfairport", true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1412.5375, -301.8998, 14.1411);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1412.5375,-301.8998,14.1411);
			}
			format(string, sizeof(string), " You have sent %s to SF Airport.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"sf",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1605.0,720.0,12.0);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1605.0,720.0,12.0);
			}
			format(string, sizeof(string), " You have sent %s to San Fierro.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"dillimore",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 634.9734, -594.6402, 16.3359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 634.9734, -594.6402, 16.3359);
			}
			format(string, sizeof(string), " You have sent %s to Dillimore.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"lv",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1699.2,1435.1, 10.7);
			}
			format(string, sizeof(string), " You have sent %s to Las Venturas.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"bank",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1487.91, -1030.60, 23.66);
			}
			format(string, sizeof(string), " You have sent %s to the bank.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"allsaints",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1192.78, -1292.68, 13.38);
			}
			format(string, sizeof(string), " You have sent %s to All Saints.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"countygen",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2000.05, -1409.36, 16.99);
			}
			format(string, sizeof(string), " You have sent %s to County General.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"gym",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 2227.60, -1674.89, 14.62);
			}
			format(string, sizeof(string), " You have sent %s to Ganton Gym.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

   		}
  		else if(strcmp(location,"rc",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1253.70, 343.73, 19.41);
			}
			format(string, sizeof(string), " You have sent %s to Red County.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

   		}
		else if(strcmp(location,"stadium1",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1424.93, -664.59, 1059.86);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 1.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,4);
			PlayerInfo[giveplayerid][pInterior] = 4;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"stadium2",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1395.96, -208.20, 1051.28);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 2.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,7);
			PlayerInfo[giveplayerid][pInterior] = 7;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"stadium3",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1410.72, 1591.16, 1052.53);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 3.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,14);
			PlayerInfo[giveplayerid][pInterior] = 14;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"stadium4",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(giveplayerid, -1394.20, 987.62, 1023.96);
			}
			format(string, sizeof(string), " You have sent %s to Stadium 4.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,15);
			PlayerInfo[giveplayerid][pInterior] = 15;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"int1",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1416.107000,0.268620,1000.926000);
			}
			format(string, sizeof(string), " You have sent %s to Int 1.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,1);
			PlayerInfo[giveplayerid][pInterior] = 1;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"mark",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt1"));
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
			}
			format(string, sizeof(string), " You have sent %s to your first marked position.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt1"));
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(location,"mark2",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt2"));
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
			}
			format(string, sizeof(string), " You have sent %s to your second marked position.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt2"));
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(location,"mall",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1133.71,-1464.52,15.77);
			}
			format(string, sizeof(string), " You have sent %s to the mall.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"elque",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -1446.5997,2608.4478,55.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -1446.5997,2608.4478,55.8359);
			}
			format(string, sizeof(string), " You have sent %s to El Quebrados.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;

		}
		else if(strcmp(location,"bayside",true) == 0)
		{
		 	if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -2465.1348,2333.6572,4.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -2465.1348,2333.6572,4.8359);
			}
			format(string, sizeof(string), " You have sent %s to Bayside.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"rodeo",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 587.0106,-1238.3374,17.8049);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 587.0106,-1238.3374,17.8049);
			}
			format(string, sizeof(string), " You have sent %s to Rodeo.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"flint",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, -108.1058,-1172.5293,2.8906);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, -108.1058,-1172.5293,2.8906);
			}
			format(string, sizeof(string), " You have sent %s to Flint County Gas Station.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
		else if(strcmp(location,"idlewood",true) == 0)
		{
			if (GetPlayerState(giveplayerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, 1955.1357,-1796.8896,13.5469);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[giveplayerid] = 0.0;
			}
			else
			{
				SetPlayerPos(giveplayerid, 1955.1357,-1796.8896,13.5469);
			}
			format(string, sizeof(string), " You have sent %s to Idlewood Gas Station.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInterior] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVirtualWorld] = 0;
		}
	}
	else
	{
		return 0;
	}
	return 1;
}

CMD:explode(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	{
		new bombid;
        if(sscanf(params, "u", bombid)) return SendClientMessage(playerid, RED, "[USAGE]: /explode [playerid]");
        if(!IsPlayerConnected(bombid)) return SendClientMessage(playerid, RED, "Player not found.");
        if(PlayerInfo[bombid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant explode admins.");
        {
            new Float:x,Float:y,Float:z;
            GetPlayerPos(bombid,x,y,z);
            CreateExplosion(x,y,z,6,5);
            CreateExplosion(x+2.5,y,z,6,2.5);
            CreateExplosion(x,y+2.5,z,6,2.5);
            CreateExplosion(x,y,z+2.5,6,2.5);
            SetPlayerHealth(bombid, 0.0);
            format(fstr, sizeof(fstr), "%s (%d) has died in an unspecified explosion...", GetName(bombid), bombid);
            SendClientMessageToAll(PINK, fstr);
			new astring[64];
    		format(astring,sizeof(astring),"%s (%d) typed: /explode %d", GetName(playerid), playerid, bombid);
    		Log("logs/commands.log", astring);
        }
	}
    return true;
}

CMD:vheal(playerid, params[])
{
    if((gettime() - 180) < TimerInfo[playerid][CMD_timer2]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");//5 mins
    TimerInfo[playerid][CMD_timer2] = gettime();
    if(PlayerInfo[playerid][vLevel] < 4) return SendClientMessage(playerid, RED, "Only vip level 4 can use this command.");
    {
        SetPlayerHealth(playerid, 100.0);
        SendClientMessage(playerid, YELLOW, "You have set your health to 100%.");
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just healed themself using /vheal...", GetName(playerid));
        ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
        //
        new astring[64];
    	format(astring, sizeof(astring),"%s (%d) typed: /vheal", GetName(playerid), playerid);
    	Log("logs/commands.log", astring);
    }
    return true;
}

CMD:ann(playerid, params[])
{
    new msg[30];
    if(sscanf(params, "s[30]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /ann [msg]]");
    if(strlen(msg) < 1 || strlen(msg) > 30) return SendClientMessage(playerid, RED, "Your message can only contain 1-30 characters.");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	{
        format(fstr, sizeof(fstr), "~w~%s", msg);
        GameTextForAll(fstr, 5000, 5);
        new astring[64];
    	format(astring, sizeof(astring),"%s (%d) typed: /ann", GetName(playerid), playerid);
    	Log("logs/commands.log", astring);
    }
	return true;
}

CMD:asay(playerid, params[])
{
    new msg[64];
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /asay [msg]]");
    if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
    else if(PlayerInfo[playerid][aLevel] == 1)
    {
        format(fstr, sizeof(fstr), "Trial Admin %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(PURPLE, fstr);
        return true;
    }
	else if(PlayerInfo[playerid][aLevel] == 2)
    {
        format(fstr, sizeof(fstr), "Server Admin %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(PURPLE, fstr);
        return true;
    }
    else if(PlayerInfo[playerid][aLevel] == 3)
    {
        format(fstr, sizeof(fstr), "Head Admin %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(PURPLE, fstr);
        return true;
    }
    else if(PlayerInfo[playerid][aLevel] == 4)
    {
        format(fstr, sizeof(fstr), "Owner %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(PURPLE, fstr);
    }
    return true;
}

CMD:vsay(playerid, params[])
{
    new msg[64];
    if(PlayerInfo[playerid][vLevel] < 1) return SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
    if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid,RED,"[USAGE]: /vsay [msg]]");
    if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
    if(PlayerInfo[playerid][vLevel] == 1)
    {
        format(fstr, sizeof(fstr), "Bronze VIP %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(ORANGE, fstr);
        return true;
    }
    else if(PlayerInfo[playerid][vLevel] == 2)
    {
        format(fstr, sizeof(fstr), "Silver VIP %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(ORANGE, fstr);
        return true;
    }
    else if(PlayerInfo[playerid][vLevel] == 3)
    {
        format(fstr, sizeof(fstr), "Gold VIP %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(ORANGE, fstr);
        return true;
    }
    else if(PlayerInfo[playerid][vLevel] == 4)
    {
        format(fstr, sizeof(fstr), "Platinum VIP %s says: %s", GetName(playerid), msg);
        SendClientMessageToAll(ORANGE, fstr);
    }
    return true;
}

CMD:god(playerid, params[])
{
	if(IsPlayerAdmin(playerid))
    {
		if(IsInGod{playerid} == 0)
    	{
			IsInGod{playerid} = 1;
			SetPlayerHealth(playerid, 99999);
			SendClientMessage(playerid, LIGHTGREEN, "Godmode ON.");
			new astring[100];
			format(astring, sizeof(astring), "Admin %s (%d) has switched godmode ON.", GetName(playerid), playerid);
			Log("logs/commands.log", astring);
		}
    	else
		{
			IsInGod{playerid} = 0;
			SetPlayerHealth(playerid, 100.00);
			SendClientMessage(playerid, RED, "Godmode OFF.");
			new astring[100];
			format(astring, sizeof(astring), "Admin %s (%d) has switched godmode OFF.", GetName(playerid), playerid);
			Log("logs/commands.log", astring);
    	}
	}
    else if(PlayerInfo[playerid][aLevel] >= 2)
    {
		if(IsInGod{playerid} == 0)
    	{
			IsInGod{playerid} = 1;
			SetPlayerHealth(playerid, 99999);
			SendClientMessage(playerid, LIGHTGREEN, "Godmode ON.");
			new astring[100];
			format(astring, sizeof(astring), "Admin %s (%d) has switched godmode ON.", GetName(playerid), playerid);
			Log("logs/commands.log", astring);
		}
    	else
		{
			IsInGod{playerid} = 0;
			SetPlayerHealth(playerid, 100.00);
			SendClientMessage(playerid, RED, "Godmode OFF.");
			new astring[100];
			format(astring, sizeof(astring), "Admin %s (%d) has switched godmode OFF.", GetName(playerid), playerid);
			Log("logs/commands.log", astring);
    	}
	}
	else
 	{
  return 0;
    }
    return true;
}

CMD:godcar(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehice to use this command.");
	if(IsInGodCar{playerid} == 0)
	{
        IsInGodCar{playerid} = 1;
       	new vID = GetPlayerVehicleID(playerid);
        SetVehicleHealth(vID, 999999);
        SendClientMessage(playerid, LIGHTGREEN, "Godcar ON.");
    	new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has switched godcar ON.", GetName(playerid), playerid);
        Log("logs/commands.log", astring);
	}
	else
	{
        IsInGodCar{playerid} = 0;
        new vID = GetPlayerVehicleID(playerid);
	    SetVehicleHealth(vID, 1000.0);
    	SendClientMessage(playerid, RED, "Godcar OFF.");
    	new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has switched godcar OFF.", GetName(playerid), playerid);
        Log("logs/commands.log", astring);
	}
    return true;
}

CMD:dcar(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehice to use this command.");
	DestroyVehicle(GetPlayerVehicleID(playerid));
	return true;
}

CMD:flip(playerid, params[])
{
	if(PlayerInfo[playerid][vLevel] >= 1)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehice to use this command.");
	    new VehicleID, Float:flX, Float:flY, Float:flZ, Float:Angle;
	    GetPlayerPos(playerid, flX, flY, flZ);
		VehicleID = GetPlayerVehicleID(playerid);
		GetVehicleZAngle(VehicleID, Angle);
		SetVehiclePos(VehicleID, flX, flY, flZ);
		SetVehicleZAngle(VehicleID, Angle);
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just flipped there vehicle using /flip...", GetName(playerid));
		ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
		//
	}
	else if(PlayerInfo[playerid][aLevel] >= 2)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehice to use this command.");
	    new VehicleID, Float:flX, Float:flY, Float:flZ, Float:Angle;
	    GetPlayerPos(playerid, flX, flY, flZ);
		VehicleID = GetPlayerVehicleID(playerid);
		GetVehicleZAngle(VehicleID, Angle);
		SetVehiclePos(VehicleID, flX, flY, flZ);
		SetVehicleZAngle(VehicleID, Angle);
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
	}
    return true;
}

CMD:clearchat(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	SendClientMessageToAll(0x0," ");
	new astring[100], aName[24];
	GetPlayerName(playerid, (aName), sizeof(aName));
	format(astring, sizeof(astring), "Admin %s (%d) has cleared main chat.", aName, playerid);
	Log("logs/commands.log", astring);
	return true;
}

CMD:givegun(playerid, params[])
{
    new giveplayerid, wepID, ammo, weapon[50];
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(sscanf(params, "udd", giveplayerid, wepID, ammo)) SendClientMessage(playerid, RED, "[USAGE]: /givegun [playerid] [weapon id] [ammo]");
    if(wepID < 1 || wepID > 46) SendClientMessage(playerid, RED, "Invalid weapon id.");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(giveplayerid == playerid)
    {
        GetWeaponName(wepID, (weapon), sizeof(weapon));
        GivePlayerWeapon(playerid, wepID, ammo);
        format(fstr, sizeof(fstr), "You have given yourself a %s with %d ammo.", weapon, ammo);
        SendClientMessage(playerid, YELLOW, fstr);
    }
    else
    {
        GetWeaponName(wepID, (weapon), sizeof(weapon));
        format(fstr, sizeof(fstr), "You have given %s (%d) a %s with %d ammo.", GetName(giveplayerid), giveplayerid, weapon, ammo);
        SendClientMessage(playerid, YELLOW, fstr);
        format(fstr, sizeof(fstr), "Admin %s (%d) has given you a %s with %d ammo.", GetName(playerid), playerid, weapon, ammo);
        SendClientMessage(giveplayerid, LIGHTGREEN, fstr);
        GivePlayerWeapon(giveplayerid, wepID, ammo);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has given %s (%d) a %s with %d ammo.", GetName(playerid), playerid, GetName(giveplayerid), giveplayerid, weapon, ammo);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:givecash(playerid, params[])
{
    new giveplayerid, amount;
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessage(playerid, RED, "[USAGE]: /givecash [playerid] [amount]");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, RED, "Player not found.");
    {
        GivePlayerCash(giveplayerid, amount);
        format(fstr, sizeof(fstr), "Admin %s (%d) has given you $%s.", GetPlayerNameEx(playerid), playerid, number_format(amount));
        SendClientMessage(giveplayerid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have given %s (%d) $%s.", GetPlayerNameEx(giveplayerid), giveplayerid, number_format(amount));
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has given %s (%d) $%s via admin powers.", GetName(playerid), playerid, GetName(giveplayerid), giveplayerid, number_format(amount));
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:freeze(playerid, params[])
{
    new target, reason[24];
    if(sscanf(params, "us[24]", target, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /freeze [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(!IsPlayerConnected(target)) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[target][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant freeze admins.");
    {
        TogglePlayerControllable(target,false);
        GameTextForPlayer(target,"~r~Frozen", 3000, 5);
        format(fstr, sizeof(fstr), "Admin %s (%d) has frozen you - Reason: %s", GetName(playerid), playerid, reason);
        SendClientMessage(target, RED, fstr);
        format(fstr, sizeof(fstr), "You have frozen %s (%d) - Reason: %s", GetName(target), target, reason);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[24];
        format(astring, sizeof(astring), "Admin %s (%d) has frozen %s (%d) - Reason: %s", GetName(playerid), playerid, GetName(target), target, reason);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:unfreeze(playerid, params[])
{
    new target;
    if(sscanf(params, "u", target)) return SendClientMessage(playerid, RED, "[USAGE]: /unfreeze [playerid]");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(!IsPlayerConnected(target)) return SendClientMessage(playerid, RED, "Player not found.");
    {
        TogglePlayerControllable(target,true);
        GameTextForPlayer(target,"~g~Unfrozen", 3000, 5);
        format(fstr, sizeof(fstr), "Admin %s (%d) has unfrozen you.", GetName(playerid), playerid);
        SendClientMessage(target, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have unfrozen %s (%d)", GetName(target), target);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has unfrozen %s (%d)", GetName(playerid), playerid, GetName(target), target);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:nmute(playerid, params[])
{
    new muteid, reason[24];
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(sscanf(params, "us[24]", muteid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /nmute [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(muteid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    if(muteid == playerid) return SendClientMessage(playerid,RED, "You cant mute yourself.");
    if(PlayerInfo[muteid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant mute admins.");
    if(IsNewbieMuted{muteid} == false)
    {
        IsNewbieMuted{muteid} = true;
        format(fstr, sizeof(fstr), "Admin %s (%d) has muted you from newbie chat - Reason: %s", GetName(playerid), playerid, reason);
        SendClientMessage(muteid, RED, fstr);
        format(fstr, sizeof(fstr), "You have muted %s (%d) from newbie chat - Reason %s", GetName(muteid), muteid, reason);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) muted %s (%d) from newbie chat for %s", GetName(playerid), playerid, GetName(muteid), muteid, reason);
        Log("logs/commands.log", astring);
    }
    else
    {
        IsNewbieMuted{muteid} = false;
        format(fstr, sizeof(fstr), "Admin %s (%d) has unmuted you from newbie chat - Reason: %s", GetName(playerid), playerid, reason);
        SendClientMessage(muteid, RED, fstr);
        format(fstr, sizeof(fstr), "You have unmuted %s (%d) from newbie chat - Reason %s", GetName(muteid), muteid, reason);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) unmuted %s (%d) from newbie chat for %s", GetName(playerid), playerid, GetName(muteid), muteid, reason);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:mutelist(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    new mutedplayers = 0;
    foreach(Player, i)
    {
        if(IsPlayerConnected(i))
        {
		    if(IsMuted{i} == 1 || IsNewbieMuted{i} == true)
            {
                if(IsMuted{i} == 1 && IsNewbieMuted{i} == false)
                {
					format(fstr, sizeof(fstr),"{FFFFFF}[Name]: %s (%d) - Normal Mute", GetName(i), i);
                	SendClientMessage(playerid, RED, fstr);
					mutedplayers++;
    			}
    			else if(IsMuted{i} == 0 && IsNewbieMuted{i} == true)
                {
					format(fstr, sizeof(fstr),"{FFFFFF}[Name]: %s (%d) - Newbie Chat Mute", GetName(i), i);
                	SendClientMessage(playerid, RED, fstr);
					mutedplayers++;
    			}
    			else if(IsMuted{i} == 1 && IsNewbieMuted{i} == true)
                {
					format(fstr, sizeof(fstr),"{FFFFFF}[Name]: %s (%d) - Normal + Newbie Chat Mute", GetName(i), i);
                	SendClientMessage(playerid, RED, fstr);
					mutedplayers++;
    			}
	      	}
		}
    }
    if(mutedplayers == 0)
    {
        SendClientMessage(playerid, RED, "There are no muted players online.");
	}
    return true;
}

CMD:mute(playerid, params[])
{
    new muteid, reason[24];
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(sscanf(params, "us[24]", muteid, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /mute [playerid] [reason]");
    if(strlen(reason) < 1 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    if(muteid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    if(muteid == playerid) return SendClientMessage(playerid, RED, "You cant mute yourself.");
    if(PlayerInfo[muteid][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant mute admins.");
    {
        IsMuted{muteid} = 1;
        IsNewbieMuted{muteid} = true;
        GameTextForPlayer(muteid,"~r~Muted", 3000, 5);
        format(fstr, sizeof(fstr), "Admin %s (%d) has muted you - Reason: %s", GetName(playerid), playerid, reason);
        SendClientMessage(muteid, RED, fstr);
        format(fstr, sizeof(fstr), "You have muted %s (%d) - Reason: %s", GetName(muteid), muteid, reason);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has muted %s (%d) - Reason: %s", GetName(playerid), playerid, GetName(muteid), muteid, reason);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:unmute(playerid, params[])
{
    new muteid;
    if(sscanf(params, "u", muteid)) return SendClientMessage(playerid, RED, "[USAGE]: /unmute [playerid]");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(muteid == INVALID_PLAYER_ID) return SendClientMessage(playerid, RED, "Player not found.");
    {
        IsMuted{muteid} = 0;
        IsNewbieMuted{muteid} = false;
        GameTextForPlayer(muteid,"~g~Unmuted", 3000, 5);
        format(fstr, sizeof(fstr), "Admin %s (%d) has unmuted you.", GetName(playerid), playerid);
        SendClientMessage(muteid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr), "You have unmuted %s (%d)", GetName(muteid), muteid);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has unmuted %s (%d)", GetName(playerid), playerid, GetName(muteid), muteid);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:setscore(playerid, params[])
{
    new giveplayerid, score;
    if(sscanf(params, "ud", giveplayerid, score)) return SendClientMessage(playerid, RED, "[USAGE]: /setscore [playerid] [score]");
    if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(score < 0) return SendClientMessage(playerid, RED, "You cant set a players score below 0.");
    {
        SetPlayerScore(giveplayerid, score);
        format(fstr, sizeof(fstr),"Admin %s (%d) has set your score to %d.", GetName(playerid), playerid, score);
        SendClientMessage(giveplayerid, LIGHTGREEN, fstr);
        format(fstr, sizeof(fstr),"You have set %s (%d) score to %d", GetName(giveplayerid), giveplayerid, score);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) score to %d.", GetName(playerid), playerid, GetName(giveplayerid), giveplayerid, score);
        Log("logs/commands.log", astring);
    }
    return true;
}

CMD:abike(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You are already in a vehicle.");
	{
	    new Float:x, Float:y, Float:z, Float:ang;
    	GetPlayerPos(playerid, x, y, z);
     	GetPlayerFacingAngle(playerid, ang);
      	new veh = CreateVehicle(522, x, y, z, ang, -1, -1, -1);
      	RemovePlayerFromVehicle(playerid);
       	PutPlayerInVehicle(playerid, veh, 0);
       	SetVehicleVirtualWorld(veh, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
		ChangeVehicleColor(veh, 0, 0);
	}
    return true;
}

CMD:disarm(playerid, params[])
{
    new id;
    if(sscanf(params, "u", id)) return SendClientMessage(playerid, RED, "[USAGE]: /disarm [playerid]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, RED, "Player not found.");
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(PlayerInfo[id][aLevel] >= 1) return SendClientMessage(playerid, RED, "You cant disarm admins.");
    {
        ResetPlayerWeapons(id);
        format(fstr, sizeof(fstr), "Admin %s (%d) has disarmed you.", GetName(playerid), playerid);
        SendClientMessage(id, RED, fstr);
        SendClientMessage(playerid, YELLOW, "Player disarmed.");
        new fstring[150];
        format(fstring, sizeof(fstring), "Admin %s (%d) has disarmed %s (%d)", GetName(playerid), playerid, GetName(id), id);
        SendAdminMessage(GREY,fstring);
    }
    return true;
}

CMD:aduty(playerid, params[])
{
    SetPlayerWantedLevel(playerid,0);
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(PlayerInfo[playerid][aLevel] >= 1 && IsOnduty{playerid} == 0)
	{
        IsOnduty{playerid} = 1;
        SetPVarInt(playerid, "pColor", GetPlayerColor(playerid));
        SetPVarInt(playerid, "pSkin", GetPlayerSkin(playerid));
        SetPlayerSkin(playerid, 294);
        SetPlayerColor(playerid,PURPLE);
        SetPlayerHealth(playerid, 99999);
        switch(PlayerInfo[playerid][aLevel])
        {
            case 1:{format(fstr, sizeof(fstr), "%s %s (%d) is now On Duty.", ARank1, GetPlayerNameEx(playerid), playerid);}
            case 2:{format(fstr, sizeof(fstr), "%s %s (%d) is now On Duty.", ARank2, GetPlayerNameEx(playerid), playerid);}
            case 3:{format(fstr, sizeof(fstr), "%s %s (%d) is now On Duty.", ARank3, GetPlayerNameEx(playerid), playerid);}
            case 4:{format(fstr, sizeof(fstr), "%s %s (%d) is now On Duty.", ARank4, GetPlayerNameEx(playerid), playerid);}
        }
        ABroadCast(COLOR_YELLOW, fstr, 3);
	}
	else if(PlayerInfo[playerid][aLevel] >= 1 && IsOnduty{playerid} == 1)
	{
        IsOnduty{playerid} = 0;
        SetPlayerSkin(playerid, GetPVarInt(playerid, "pSkin"));
		SetPlayerColor(playerid, GetPVarInt(playerid, "pColor"));
		SetPlayerHealth(playerid, 100.0);
        switch(PlayerInfo[playerid][aLevel])
        {
            case 1:{format(fstr, sizeof(fstr), "%s %s (%d) is now Off Duty.", ARank1, GetPlayerNameEx(playerid), playerid);}
            case 2:{format(fstr, sizeof(fstr), "%s %s (%d) is now Off Duty.", ARank2, GetPlayerNameEx(playerid), playerid);}
            case 3:{format(fstr, sizeof(fstr), "%s %s (%d) is now Off Duty.", ARank3, GetPlayerNameEx(playerid), playerid);}
            case 4:{format(fstr, sizeof(fstr), "%s %s (%d) is now Off Duty.", ARank4, GetPlayerNameEx(playerid), playerid);}
        }
        ABroadCast(COLOR_YELLOW, fstr, 3);
	}
	return true;
}

CMD:admins(playerid, params[])
{
    new OnlineAdmins = 0;
    new Rank[24];
    foreach(Player, i)
    {
        if(IsPlayerConnected(i))
        {
		    if(PlayerInfo[i][aLevel] >= 1)
            {
                if(IsAdminUnderCover{i} == true)
			  	{
		  		    continue;
			  	}
		        else
		        {
	 		    	switch(PlayerInfo[i][aLevel])
		        	{
				    	case 1:
				    	{
				        	Rank = "Trial Admin";
				    	}
                    	case 2:
                    	{
                        	Rank = "Server Admin";
                    	}
                    	case 3:
                    	{
                        	Rank = "Head Admin";
                    	}
				    	case 4:
				    	{
				        	Rank = "Owner";
				    	}
					}
					format(fstr, sizeof(fstr),"%s %s (%d) - Level: %d", Rank, GetPlayerNameEx(i), i, PlayerInfo[i][aLevel]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					OnlineAdmins++;
				}
			}
        }
    }
    if(OnlineAdmins == 0)
    {
        SendClientMessage(playerid, LIGHTBLUE, "You can view the full ACnR STAFF List at acnr.hostoi.com");
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /admins", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:celllist(playerid, params[])
{
    new Inmates = 0;
    if(IsInCellCP{playerid} == false) return SendClientMessage(playerid, RED, "You must be at a jail cell to use this command.");
    if(IsInCellCP1{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 1)
            	{
					format(fstr, sizeof(fstr),"Cell: 1 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
	else if(IsInCellCP2{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 2)
            	{
					format(fstr, sizeof(fstr),"Cell: 2 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
	else if(IsInCellCP3{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 3)
            	{
					format(fstr, sizeof(fstr),"Cell: 3 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
	else if(IsInCellCP4{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 4)
            	{
					format(fstr, sizeof(fstr),"Cell: 4 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
	else if(IsInCellCP5{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 5)
            	{
					format(fstr, sizeof(fstr),"Cell: 5 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
	else if(IsInCellCP6{playerid} == true)
    {
    	foreach(Player, i)
    	{
        	if(IsPlayerConnected(i))
        	{
		    	if(IsJailed{i} == true && IsInCell{i} == 6)
            	{
					format(fstr, sizeof(fstr),"Cell: 6 - Prisioner: %s (%d) - Inmate ID: %d", GetName(i), i, InMateID[i]);
                	SendClientMessage(playerid, LIGHTBLUE, fstr);
					Inmates++;
            	}
	    	}
    	}
    	if(Inmates == 0)
    	{
        	SendClientMessage(playerid, RED , "There are no prisioners in this cell.");
		}
	}
    return true;
}

CMD:viplist(playerid, params[])
{
    new OnlineVIPs = 0;
    new Rank[24];
    foreach(Player, i)
    {
        if(IsPlayerConnected(i))
        {
		    if(PlayerInfo[i][vLevel] >= 1)
            {
	 		    switch(PlayerInfo[i][vLevel])
		        {
				    case 1:
				    {
				        Rank = "Bronze VIP";
				    }
                    case 2:
                    {
                        Rank = "Silver VIP";
                    }
                    case 3:
                    {
                        Rank = "Gold VIP";
                    }
				    case 4:
				    {
				        Rank = "Platinum VIP";
				    }
				}
				format(fstr, sizeof(fstr), "%s %s (%d) - Level: %d", Rank, GetName(i), i, PlayerInfo[i][vLevel]);
                SendClientMessage(playerid, LIGHTBLUE, fstr);
				OnlineVIPs++;
			}
		}
    }
    if(OnlineVIPs == 0)
    {
        SendClientMessage(playerid, RED, "You can view the full ACnR VIP/Donator List at acnr.hostoi.com");
	}
	new astring[100];
    format(astring,sizeof(astring), "%s (%d) typed: /viplist", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:stats(playerid, params[])
{
    new getstatsid;
    if(!sscanf(params, "u", getstatsid))
	{
	    if(IsPlayerConnected(getstatsid))
	    {
	    	if(IsLoggedIn{getstatsid} == 1)
	    	{
				GetStats(playerid, getstatsid);
            }
            else
            {
                SendClientMessage(playerid, RED, "Player not logged in.");
            }
        }
        else
        {
            SendClientMessage(playerid, RED, "Player not found.");
        }
        return true;
	}
	else
	{
		GetStats(playerid, playerid);
	}
	return true;
}

CMD:setskin(playerid, params[])
{
	new setid, skinid;
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
	if(sscanf(params, "ud", setid, skinid)) return SendClientMessage(playerid, RED, "[USAGE]: /setskin [playerid] [skinid]");
	if(!IsPlayerConnected(setid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(skinid < 0 || skinid > 299) return SendClientMessage(playerid, RED, "Invalid skin id.");
    {
		SetPlayerSkin(setid, skinid);
		format(fstr, sizeof(fstr), "Admin %s (%d) has set your skin to id %d.", GetName(playerid), playerid, skinid);
        SendClientMessage(setid, LIGHTGREEN, fstr);
		format(fstr, sizeof(fstr), "You have set %s (%d) skin to id %d.", GetName(setid), setid, skinid);
        SendClientMessage(playerid, YELLOW, fstr);
        new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) has set %s (%d) skin to id %d.", GetName(playerid), playerid, GetName(setid), setid, skinid);
        Log("logs/commands.log", astring);
    }
	return true;
}

CMD:vskin(playerid, params[])
{
	new skinid;
    if(PlayerInfo[playerid][vLevel] < 3) return SendClientMessage(playerid, RED, "Only vip level 3+ can use this command.");
	if(sscanf(params, "d", skinid)) return SendClientMessage(playerid, RED, "[USAGE]: /vskin [skinid]");
    if(skinid < 0 || skinid > 299) return SendClientMessage(playerid ,RED, "Invalid skin id.");
    {
		SetPlayerSkin(playerid, skinid);
		format(fstr, sizeof(fstr), "You have set your skin to id %d.", skinid);
        SendClientMessage(playerid, LIGHTGREEN, fstr);
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just set there skin using /vskin...", GetName(playerid));
        ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
        //
		new astring[100];
        format(astring, sizeof(astring), "%s (%d) typed: /vskin %d", GetName(playerid), playerid, skinid);
        Log("logs/commands.log", astring);
    }
	return true;
}

CMD:force(playerid, params[])
{
	new forceid;
    if(PlayerInfo[playerid][aLevel] < 3){ return 0; }
	if(sscanf(params, "d", forceid)) return SendClientMessage(playerid, RED, "[USAGE]: /force [playerid]");
	if(!IsPlayerConnected(forceid)) return SendClientMessage(playerid, RED, "Player not found.");
    {
		SetPlayerHealth(forceid,0);
		ForceClassSelection(forceid);
		format(fstr, sizeof(fstr), "Admin %s (%d) has forced you to class selection.", GetName(playerid), playerid);
        SendClientMessage(forceid, RED, fstr);
		SendClientMessage(playerid, YELLOW, "Player forced.");
		new astring[100];
        format(astring, sizeof(astring), "Admin %s (%d) forced %s (%d) to class selection.", GetName(playerid), playerid, GetName(forceid), forceid);
        Log("logs/commands.log", astring);
    }
	return true;
}

CMD:exitat(playerid, params[])
{
    if(hasenteredtower{playerid} == 0) return SendClientMessage(playerid, RED, "You not in the admin tower.");
    if(PlayerInfo[playerid][aLevel] >= 1)
    {
        SetPlayerPos(playerid,2143.2566,2425.5498,65.2773);
        SetPlayerFacingAngle(playerid,89.2129);
        hasenteredtower{playerid} = 0;
        KillTimer(attimer{playerid});
	}
	else if(PlayerInfo[playerid][vLevel] >= 1)
    {
        SetPlayerPos(playerid,2143.2566,2425.5498,65.2773);
        SetPlayerFacingAngle(playerid,89.2129);
        hasenteredtower{playerid} = 0;
        KillTimer(attimer{playerid});
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only admin/vip level 1+ can use this command.");
	}
	return true;
}

CMD:gotoat(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    {
        SetPlayerPos(playerid,2150.0178,2425.3809,65.2773);
        SetPlayerFacingAngle(playerid,265.2805);
        hasenteredtower{playerid} = 1;
        SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		IsPlayerInArena{playerid} = false;
		attimer{playerid} = SetTimerEx("DetectATDeparture", 5000, true, "d", playerid);
		SendClientMessage(playerid, LIGHTGREEN, "Welcome to the Admin Tower, use /(open/close)hanger to toggle the hanger. Use /exitat at anytime.");
	}
	return true;
}

CMD:gotocells(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    {
        SetPlayerInterior(playerid, 3);
    	SetPlayerPos(playerid, 200.6972, 168.2653, 1003.0234);
    	SetPlayerFacingAngle(playerid, 89.0391);
		SetPlayerVirtualWorld(playerid, 0);
		IsPlayerInArena{playerid} = false;
	}
	return true;
}

CMD:cage(playerid, params[])
{
	new cageid, reason[24], secs;
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
	if(sscanf(params, "uds[24]", cageid, secs, reason)) return SendClientMessage(playerid, RED, "[USAGE]: /cage [playerid] [seconds] [reason]");
	if(!IsPlayerConnected(cageid)) return SendClientMessage(playerid, RED, "Player not found.");
	if(strlen(reason) < 0 || strlen(reason) > 24) return SendClientMessage(playerid, RED, "Your reason can only contain 1-24 characters.");
    {
		SendPlayerToCage(cageid, secs);
		format(fstr, sizeof(fstr), "Admin %s (%d) has caged %s (%d) for %d secs - Reason: %s", GetName(playerid), playerid, GetName(cageid), cageid, secs, reason);
		SendClientMessageToAll(RED, fstr);
    }
	return true;
}


CMD:car(playerid, params[])
{
	new veh, Float:x, Float:y, Float:z, Float:ang;
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, ang);
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(sscanf(params, "d", veh)) return SendClientMessage(playerid,RED, "[USAGE]: /car [vehicle id]");
    if(veh < 400 || veh > 611) return SendClientMessage(playerid, RED, "Invalid vehicle id.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You're already in a vehicle.");
    {
		CreateVehicle(veh, x, y, z, ang, -1, -1, -1);
        PutPlayerInVehicle(playerid, veh, 0);
        SetVehicleVirtualWorld(veh, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(veh, GetPlayerInterior(playerid));
		ChangeVehicleColor(veh,0,3);
		new astring[100];
		format(astring, sizeof(astring), "Admin %s (%d) has spawned vehicle id %d.", GetName(playerid), playerid, veh);
        Log("logs/commands.log", astring);
	}
	return true;
}

CMD:jetpack(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	    SendClientMessage(playerid, RED, "IMPORTANT: Use /removejetpack when your done, DONT LET A PLAYER ACCESS THIS JETPACK!");
		format(fstr, sizeof(fstr), "Admin %s (%d) has spawned a jetpack.", GetName(playerid), playerid);
        SendAdminMessage(GREY, fstr);
	}
	return true;
}

CMD:removejetpack(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	{
        new Float:x, Float:y, Float:z, Float:ang;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, ang);
        new VehicleID = CreateVehicle(522, x, y, z, ang, -1, -1, -1);
        PutPlayerInVehicle(playerid, VehicleID, 0);
        SetVehicleVirtualWorld(VehicleID, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(VehicleID, GetPlayerInterior(playerid));
		ChangeVehicleColor(VehicleID,0,3);
		DestroyVehicle(GetPlayerVehicleID(playerid));
	}
	else
	{
	    SendClientMessage(playerid, RED, "You do not have a jetpack.");
	}
    return true;
}

CMD:v(playerid, params[])
{
    new msg[64];
    if(PlayerInfo[playerid][vLevel] < 1) return SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
    if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /v [msg]");
    if(strlen(msg) < 0 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Your message can only contain 1-64 characters.");
    if(PlayerInfo[playerid][vLevel] == 1)
    {
        format(fstr, sizeof(fstr), "Bronze VIP %s: %s", GetName(playerid), msg);
        SendVIPMessage(ORANGE, fstr);
    }
    else if(PlayerInfo[playerid][vLevel] == 2)
    {
        format(fstr, sizeof(fstr), "Silver VIP %s: %s", GetName(playerid), msg);
        SendVIPMessage(ORANGE, fstr);
    }
    else if(PlayerInfo[playerid][vLevel] == 3)
    {
        format(fstr, sizeof(fstr), "Gold VIP %s: %s", GetName(playerid), msg);
        SendVIPMessage(ORANGE, fstr);
    }
    else if(PlayerInfo[playerid][vLevel] == 4)
    {
        format(fstr, sizeof(fstr), "Platinum VIP %s: %s", GetName(playerid), msg);
        SendVIPMessage(ORANGE, fstr);
    }
    new astring[100];
    format(astring, sizeof(astring), "[VIP Radio]: %s (%d): %s", GetName(playerid), playerid, msg);
	Log("logs/commands.log", astring);
    return true;
}

CMD:vweaps(playerid, params[])
{
    if(PlayerInfo[playerid][vLevel] < 2) return SendClientMessage(playerid, RED, "Only vip level 2+ can use this command.");
    if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this comand while you are jailed.");
    {
        GivePlayerWeapon(playerid, 31, 99999);
        GivePlayerWeapon(playerid, 28, 99999);
        GivePlayerWeapon(playerid, 26, 99999);
        GivePlayerWeapon(playerid, 24, 99999);
        SendClientMessage(playerid, LIGHTGREEN, "Deagle/UZI/M4/Sawn-Off + infinate ammo received.");
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just spawned a infinate weapon set using /vweaps...", GetName(playerid));
        ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
        //
        new astring[100];
        format(astring, sizeof(astring), "%s (%d) typed: /vweaps", GetName(playerid), playerid);
        Log("logs/commands.log", astring);
	}
	return true;
}

CMD:aweaps(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2) return SendClientMessage(playerid, RED, "Only vip level 2+ can use this command.");
    if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this comand while you are jailed.");
    {
        GivePlayerWeapon(playerid, 31, 99999);
        GivePlayerWeapon(playerid, 28, 99999);
        GivePlayerWeapon(playerid, 26, 99999);
        GivePlayerWeapon(playerid, 24, 99999);
        SendClientMessage(playerid, LIGHTGREEN, "Deagle/UZI/M4/Sawn-Off + infinate ammo received.");
        new astring[100];
        format(astring, sizeof(astring), "%s (%d) typed: /aweaps", GetName(playerid), playerid);
        Log("logs/commands.log", astring);
	}
	return true;
}

CMD:beginevent(playerid, params[])
{
    new event[24];
	GetPlayerPos(playerid, aPos[evX], aPos[evY], aPos[evZ]);
    GetPlayerFacingAngle(playerid, aPos[evA]);
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(sscanf(params, "s[150]", event)) return SendClientMessage(playerid, RED, "[USAGE]: /beginevent [event name]");
    if(strlen(event) < 0 || strlen(event) > 24) return SendClientMessage(playerid, RED, "The event name can only contain 1-24 characters.");
    if(HasEventStarted == 1) return format(fstr, sizeof(fstr), "Event '%s' is currently active, you cant begin an event now.", event) && SendClientMessage(playerid, RED, fstr);
    {
        format(fstr, sizeof(fstr), "[BOT]Elvis: '%s' has just started! Type /join to join the event.", event);
        SendClientMessageToAll(WHITE, fstr);
        GameTextForAll("~w~Type /join To Join The Event", 5000, 5);
		HasEventStarted = 1;
		HasMadeEvent{playerid} = 1;
	}
	return true;
}

CMD:eventvehs(playerid, params[])
{
	new vehid;
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(sscanf(params, "d", vehid)) return SendClientMessage(playerid, RED, "[USAGE]: /eventvehs [vehicleid]");
    if(vehid < 400 || vehid > 611) return SendClientMessage(playerid, RED, "Invalid vehicle id.");
	if(HasEventStarted == 0 || HasMadeEvent{playerid} == 0) return SendClientMessage(playerid,RED, "You're not holding any events to control.");
	if(CantJoinEvent == 0) return SendClientMessage(playerid,RED, "You need to stop joins before you can use this command.");
	foreach(Player, i)
	{
	    if(IsAtEvent{i} == 1)
	    {
	        new Float:posX, Float:posY, Float:posZ, Float:posAng;
	        GetPlayerPos(i, posX, posY, posZ);
	        GetPlayerFacingAngle(i, posAng);
	        eventvehs[i] = CreateVehicle(vehid, posX, posY, posZ, posAng, -1, -1, -1);
        	PutPlayerInVehicle(i, vehid, 0);
        	SetVehicleVirtualWorld(vehid, GetPlayerVirtualWorld(playerid));
			LinkVehicleToInterior(vehid, GetPlayerInterior(playerid));
			ChangeVehicleColor(vehid,0,3);
			SendClientMessage(i, LIGHTGREEN, "Event vehicle received.");
	    }
	}
	return true;
}

CMD:stopjoins(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(HasEventStarted == 0 || HasMadeEvent{playerid} == 0) return SendClientMessage(playerid,RED, "You're not holding any events to control.");
	if(CantJoinEvent == 1) return SendClientMessage(playerid, RED, "You have already stopped joins for this event.");
    {
		SendClientMessageToAll(WHITE, "[BOT]Elvis: The event is now NOT accepting anymore players.");
		CantJoinEvent = 1;
	}
	return true;
}

CMD:join(playerid, params[])
{
    if(HasEventStarted == 0) return SendClientMessage(playerid, RED, "There are currently no events on.");
    if(HasAdminStoppedJoins == 1 || CantJoinEvent == 1) return SendClientMessage(playerid, RED, "The event is now not accepting anymore players.");
	if(IsAtEvent{playerid} == 1) return SendClientMessage(playerid, RED, "You're already at the event.");
	{
	    GetPlayerPos(playerid, pPos[evX], pPos[evY], pPos[evZ]);
	    GetPlayerFacingAngle(playerid, pPos[evA]);
	    SetPlayerPos(playerid, aPos[evX], aPos[evY], aPos[evZ]);
        SetPlayerFacingAngle(playerid, aPos[evA]);
	    ResetPlayerWeapons(playerid);
	    SetPlayerHealth(playerid, 100);
	    SetPlayerArmour(playerid, 100);
		IsAtEvent{playerid} = 1;
	}
	new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /join", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:finishevent(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    if(HasEventStarted == 0) return SendClientMessage(playerid, RED, "You're not holding any events to control.");
    if(HasMadeEvent{playerid} == 0) return SendClientMessage(playerid, RED, "You cant control this event.");
    {
        foreach(Player, i)
	    {
            if(IsAtEvent{i} == 1)
	        {
                IsAtEvent{i} = 0;
	            SetPlayerPos(i, pPos[evX], pPos[evY], pPos[evZ]);
	            SetPlayerFacingAngle(i, pPos[evA]);
				DestroyVehicle(eventvehs[i]);
			}
		}
		SendClientMessageToAll(WHITE, "[BOT]Elvis: The event is now over.");
		GameTextForAll("~r~Event Over", 5000, 5);
		HasEventStarted = 0;
		CantJoinEvent = 0;
		HasAdminStoppedJoins = 0;
	    HasMadeEvent{playerid} = 0;
    }
    return true;
}

CMD:armevent(playerid, params[])
{
	new weap;
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(sscanf(params, "d", weap)) return SendClientMessage(playerid, RED, "[USAGE]: /armevent [weapon id]");
    if(HasEventStarted == 0) return SendClientMessage(playerid, RED, "You're not holding any events to control.");
    if(HasMadeEvent{playerid} == 0) return SendClientMessage(playerid, RED, "You cant control this event.");
    {
        foreach(Player, i)
	    {
            if(IsAtEvent{i} == 1)
	        {
                GivePlayerWeapon(i, weap, 99999);
			}
		}
		SendClientMessage(playerid, YELLOW, "All event members have been armed.");
    }
    return true;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(HasEventStarted == 0) return SendClientMessage(playerid, RED, "You can only use the countdown at events");
	if(HasMadeEvent{playerid} == 0) return SendClientMessage(playerid, RED, "You cant control this event.");
	if(CountStatus == 1) return SendClientMessage(playerid, RED, "A countdown is in progress, please wait.");
	SetTimer("StartCountDown", 1000, false);
	IsAtEvent[playerid] = 1;
	foreach(Player, i)
	{
	    if(IsAtEvent[i] == 1)
	    {
			TogglePlayerControllable(i, false);
		}
	}
	return true;
}

CMD:disarmevent(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2) return SendClientMessage(playerid, RED,"Only admin level 2+ can use this command.");
    if(HasEventStarted == 0) return SendClientMessage(playerid, RED, "You're not holding any events to control.");
    if(HasMadeEvent{playerid} == 0) return SendClientMessage(playerid, RED, "You cant control this event.");
    {
        foreach(Player, i)
	    {
            if(IsAtEvent{i} == 1)
	        {
                ResetPlayerWeapons(i);
			}
		}
		SendClientMessage(playerid, YELLOW, "All event members have been disarmed.");
    }
    return true;
}

CMD:savepos(playerid, params[])
{
    new Float:x,Float:y,Float:z;
    if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command while you are jailed.");
	if(PlayerInfo[playerid][aLevel] >= 1)
    {
        GetPlayerPos(playerid, x, y, z);
        SetPVarFloat(playerid, "PosX", x);
        SetPVarFloat(playerid, "PosY", y);
        SetPVarFloat(playerid, "PosZ", z);
        SetPVarInt(playerid, "IntID", GetPlayerInterior(playerid));
        SetPVarInt(playerid, "wID", GetPlayerVirtualWorld(playerid));
        SendClientMessage(playerid, YELLOW, "Position saved, use /loadpos to load this position at anytime.");
        HasSavedPos{playerid} = true;
	}
	else if(PlayerInfo[playerid][vLevel] >= 3)
	{
    	if(GetPlayerWantedLevel(playerid) >= 4) return SendClientMessage(playerid, RED, "You cant use this command while you're wanted.");
        GetPlayerPos(playerid, x, y, z);
        SetPVarFloat(playerid, "PosX", x);
        SetPVarFloat(playerid, "PosY", y);
        SetPVarFloat(playerid, "PosZ", z);
        SetPVarInt(playerid, "IntID", GetPlayerInterior(playerid));
        SetPVarInt(playerid, "wID", GetPlayerVirtualWorld(playerid));
        SendClientMessage(playerid, YELLOW, "Position saved, use /loadpos to load this position at anytime.");
        HasSavedPos{playerid} = true;
	}
	else
	{
		SendClientMessage(playerid, RED, "Only admin level 1+ and vip level 3+ can use this command.");
	}
	new astring[100];
    format(astring,sizeof(astring),"%s (%d) typed: /savepos", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:loadpos(playerid, params[])
{
    if(HasSavedPos{playerid} == false) return SendClientMessage(playerid, RED, "You have not saved a position since your last join, use /savepos");
    if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this command while you are jailed.");
	if(PlayerInfo[playerid][aLevel] >= 1)
    {
		SetPlayerInterior(playerid,GetPVarInt(playerid, "IntID"));
		SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "wID"));
		SetPlayerPos(playerid, GetPVarFloat(playerid,"PosX"), GetPVarFloat(playerid,"PosY"), GetPVarFloat(playerid,"PosZ"));
        SendClientMessage(playerid, LIGHTGREEN, "Position loaded.");
	}
	else if(PlayerInfo[playerid][vLevel] >= 3)
	{
    	if(GetPlayerWantedLevel(playerid) >= 4) return SendClientMessage(playerid, RED, "You cant use this command while you're wanted.");
		SetPlayerInterior(playerid,GetPVarInt(playerid, "IntID"));
		SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "wID"));
		SetPlayerPos(playerid, GetPVarFloat(playerid,"PosX"), GetPVarFloat(playerid,"PosY"), GetPVarFloat(playerid,"PosZ"));
        SendClientMessage(playerid, LIGHTGREEN, "Position loaded.");
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just loaded there saved position using /loadpos...", GetName(playerid));
        ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
        //
	}
	else
	{
		SendClientMessage(playerid, RED, "Only admin level 1+ and vip level 3+ can use this command.");
	}
	new astring[100];
    format(astring,sizeof(astring),"%s (%d) typed: /loadpos", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:paint(playerid, params[])
{
	new color1, color2;
    if(sscanf(params, "ii", color1, color1)) return SendClientMessage(playerid, RED, "[USAGE]: /paint [color id 1] [color id 2]") && SendClientMessage(playerid, YELLOW, "Valid color ids: 0-252");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
    if(color1 < 0 || color1 > 252 || color2 < 0 || color2 > 252) return SendClientMessage(playerid, RED, "Invalid color id.");
    if(PlayerInfo[playerid][pPaintCan] >= 1)
    {
        ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
        SendClientMessage(playerid, YELLOW, "Vehicle resprayed, 1 spray can was used.");
        PlayerInfo[playerid][pPaintCan] --;
    }
    else
    {
        SendClientMessage(playerid, RED, "You need a spray can to paint your vehicle, buy one at the 24/7 store.");
    }
    new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /paint", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:vfuel(playerid, params[])
{
    if(PlayerInfo[playerid][vLevel] < 1) return SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
	{
	    new veh = GetPlayerVehicleID(playerid);
		GetVehicleFuel[veh] = 100;
	    GameTextForPlayer(playerid,"~w~Vehicle ~g~Refuelled!", 5000, 5);
	}
	//
	new mstring[150];
	format(mstring, sizeof(mstring), "VIP %s has just refuelled there vehicle using /vfuel...", GetName(playerid));
	ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
	//
	new astring[64];
    format(astring, sizeof(astring), "%s (%d) typed: /vfuel", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:vfix(playerid, params[])
{
    if(PlayerInfo[playerid][vLevel] < 1) return SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
	{
	    RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~w~Vehicle ~g~Repaired", 5000, 5);
	}
	//
	new mstring[150];
	format(mstring, sizeof(mstring), "VIP %s has just repaired there vehicle using /vfix...", GetName(playerid));
	ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
	//
	new astring[64];
    format(astring, sizeof(astring), "%s (%d) typed: /vfix", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:afix(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
	{
	    RepairVehicle(GetPlayerVehicleID(playerid));
	    GameTextForPlayer(playerid,"~w~Vehicle ~g~Repaired", 5000, 5);
	}
	new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /afix", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:togglecolor(playerid, params[])
{
    if(PlayerInfo[playerid][vLevel] < 1) return SendClientMessage(playerid, RED, "Only vip level 1+ can use this command.");
    if(IsVIPInColorMode{playerid} == false)
    {
        IsVIPInColorMode{playerid} = true;
        SetPlayerColor(playerid, ORANGE);
        GameTextForPlayer(playerid,"~g~Now Hiding", 5000, 5);
        SendClientMessage(playerid, ORANGE, "You will now be shown as an orange marker at all times.");
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just changed there marker color using /togglecolor...", GetName(playerid));
		ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
		//
        return true;
    }
    else if(GetTeam{playerid} == CLASS_CIV && GetPlayerWantedLevel(playerid) == 0 && IsVIPInColorMode{playerid} == true)
	{
		IsVIPInColorMode{playerid} = false;
		SetPlayerColor(playerid, WHITE);
		GameTextForPlayer(playerid,"~r~Stopped Hiding", 5000, 5);
		SendClientMessage(playerid, YELLOW, "You will now be shown as a normal marker at all times.");
		return true;
	}
	else if(GetTeam{playerid} == CLASS_CIV && GetPlayerWantedLevel(playerid) >= 1 && GetPlayerWantedLevel(playerid) <= 3 && IsVIPInColorMode{playerid} == true)
	{
		IsVIPInColorMode{playerid} = false;
     	SetPlayerColor(playerid, YELLOW);
  		GameTextForPlayer(playerid,"~r~Stopped Hiding", 5000, 5);
  		SendClientMessage(playerid, YELLOW, "You will now be shown as a normal marker at all times.");
   		return true;
	}
	else if(GetTeam{playerid} == CLASS_CIV && GetPlayerWantedLevel(playerid) >= 4)
	{
   		IsVIPInColorMode{playerid} = false;
      	SetPlayerColor(playerid, RED);
      	GameTextForPlayer(playerid,"~r~Stopped Hiding", 5000, 5);
      	SendClientMessage(playerid, YELLOW, "You will now be shown as a normal marker at all times.");
      	return true;
	}
	else if(IsACop(playerid) && IsVIPInColorMode{playerid} == true)
	{
      	IsVIPInColorMode{playerid} = false;
      	SetPlayerColor(playerid, BLUE);
      	GameTextForPlayer(playerid,"~r~Stopped Hiding", 5000, 5);
    	SendClientMessage(playerid, YELLOW, "You will now be shown as a normal marker at all times.");
     	return true;
	}
	else if(GetTeam{playerid} == CLASS_MEDIC && IsVIPInColorMode{playerid} == true)
	{
      	IsVIPInColorMode{playerid} = false;
      	SetPlayerColor(playerid, PINK);
      	GameTextForPlayer(playerid,"~r~Stopped Hiding", 5000, 5);
      	SendClientMessage(playerid, YELLOW, "You will now be shown as a normal marker at all times.");
	}
    return true;
}

CMD:vcmds(playerid, params[])
{
    ShowPlayerDialog(playerid, VCMDS_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR VIP/Donator Commands", "{FFFFFF}Platinum VIP Lvl 4: /vheal (+ levels 1-3 commands)\nGold VIP Lvl 3: /vskin /(save/load)pos (+ levels 1-2 commands)\nSilver VIP Lvl 2: /vweaps (+ level 1 commands)\nBronze VIP Lvl 1: /v /vsay /vfix /vfuel /flip /addnos /(open/close)hanger /exitat /togglecolor\n\nVisit acnr.hostoi.com/donate for vip level feature details.", "Ok", "");
    return true;
}

CMD:addnos(playerid, params[])
{
	if(PlayerInfo[playerid][vLevel] >= 1)
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
        AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
        SendClientMessage(playerid, YELLOW, "NOS x10 added.");
		//
		new mstring[150];
		format(mstring, sizeof(mstring), "VIP %s has just added nos there vehicle using /addnos...", GetName(playerid));
		ProxDetector(20.0, playerid, mstring, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN, LIGHTGREEN);
		//
	}
	else if(PlayerInfo[playerid][aLevel] >= 1)
	{
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in a vehicle to use this command.");
        AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
        PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
        SendClientMessage(playerid, YELLOW, "NOS x10 added.");
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only vip/admin level 1+ can use this command.");
	}
	new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /addnos", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:events(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
    {
        ShowPlayerDialog(playerid, EVENTS_HOWTO, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR Events",
		"{FFFFFF}Commands: /(begin/finish)event /(dis)armevent /eventvehs /stopjoins /countdown\n\nOfficial ACnR Events:\n\n- 'Hide'Or'Die' - Players given some time to hide in a open area/building,\nThen admins find/kill them all,Last one standing wins 500k.\n\n- 'Kill'That'Admin' - Admins arm up with bodyguards and announce random amounts on their heads,\nEach admin kill rises the win amount (ACnR Signature event)", "Ok", "");
    }
	return true;
}

CMD:hcmds(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] == 4)
    {
        ShowPlayerDialog(playerid, ADMIN_HCMDS, DIALOG_STYLE_MSGBOX ,"{FFFFFF}Admin House Commands","{FFFFFF}Commands:\n- /createhouse [type] *\n- /removehouse [house id]\n- /removeallhouses\n- /resethouseprices\n- /sellhouse [house id]\n- /sellallhouses\n\nTypes: 1. One Story House | 2. Two Story House | 3. Small Mansion | 4. Large Mansion", "Ok", "");
    }
    else if(IsPlayerSetBuilder{playerid} == true)
    {
        ShowPlayerDialog(playerid, ADMIN_HCMDS, DIALOG_STYLE_MSGBOX ,"{FFFFFF}Admin House Commands","{FFFFFF}Commands:\n- /createhouse [type]\n\nTypes: 1. One Story House | 2. Two Story House | 3. Small Mansion | 4. Large Mansion", "Ok", "");
    }
    else
	{
     return 0;
	}
	return true;
}

CMD:bcmds(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] == 4)
    {
        ShowPlayerDialog(playerid, ADMIN_BCMDS, DIALOG_STYLE_MSGBOX ,"{FFFFFF}Admin Business Commands","{FFFFFF}Commands:\n/createbiz /delete(all)biz /sell(all)biz", "Ok", "");
    }
	else if(IsPlayerSetBuilder{playerid} == true)
    {
        ShowPlayerDialog(playerid, ADMIN_BCMDS, DIALOG_STYLE_MSGBOX ,"{FFFFFF}Admin Business Commands","{FFFFFF}Commands:\n/createbiz", "Ok", "");
    }
    else
	{
     return 0;
	}
	return true;
}

CMD:aranks(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    ShowPlayerDialog(playerid, ARANKS_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}ACnR Admin Ranks", "{FFFFFF}Level 4: Owner\nLevel 3: Head Admin\nLevel 2: Server Admin\nLevel 1: Trial Admin\nNON ADMIN: Head Helper/Helper", "Ok", "");
	return true;
}

CMD:askadmin(playerid, params[])
{
    if((gettime() - 5) < TimerInfo[playerid][CMD_timer34]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer34] = gettime();
    ShowPlayerDialog(playerid, ASK_DIALOG, DIALOG_STYLE_INPUT, "{FFFFFF}Ask An Admin", "{FFFFFF}Please enter your message below, it will be sent to all online admins:", "Submit", "Cancel");
	return true;
}

CMD:restart(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] == 4 || IsPlayerAdmin(playerid))
    {
    	GameTextForAll("~w~Server ~r~Restarting ~w~In ~r~10 Secs...", 5000, 5);
    	SendClientMessageToAll(WHITE, "[BOT]Elvis: The server will automatically restart in 10 secs.");
    	SendClientMessageToAll(YELLOW, "NOTE: Your stats have just been saved.");
		foreach(Player, i)
		{
			if(IsPlayerConnected(i) && IsLoggedIn{i} == 1)
			{
	    		SaveBankStats(i);
    			SaveFightStats(i);
    			SaveSettings(i);
    			SaveSkillLevels(i);
    			SaveUserStats(i);
    			SaveDegreeStats(i);
    		}
		}
    	SetTimer("RestartServer", 10000, false);
	}
	else
	{
	    return 0;
	}
	return 1;
}

CMD:undercover(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    {
        if(IsAdminUnderCover{playerid} == true)
        {
			IsAdminUnderCover{playerid} = false;
			SendClientMessage(playerid, ORANGE, "[ADMIN]: Undercover mode OFF");
			SendClientMessage(playerid, WHITE, "[NOTE]: You now will be SHOWN in /admins");
    		return true;
		}
		else
		{
			IsAdminUnderCover{playerid} = true;
			SendClientMessage(playerid, ORANGE, "[ADMIN]: Undercover mode ON");
			SendClientMessage(playerid, WHITE, "[NOTE]: You now will be HIDDEN in /admins");
		}
    }
    return true;
}

CMD:acmds(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    {
        ShowPlayerDialog(playerid, ACMDS_LIST, DIALOG_STYLE_MSGBOX , "{FFFFFF}ACnR Admin Commands",
"{FFFFFF}Lvl4: /(h/b)cmds /set(score/level/vip/helper/hhelper/builder)\nLvl3: /restart /(ban)ip /set(wanted/health/armour/cash/skin) /get\nLvl2: /aweaps /car /force /jetpack /ban /afix /events /god(car) /goto /explode /ip /flip /akill /give(gun/cash)\nLvl1: /goto(at/cells) /(un)mute /nmute /(r)warn /kick /ann /asay /dcar /clearchat /addnos /disarm\nLvl1: /duty /a /(spec)off /cage /(un)freeze /ap /aranks /mutelist /(save/load)pos /exitat /plus /minus /undercover",
 "Ok", "");
    }
	return true;
}

CMD:wealth(playerid, params[])
{
	new targetid;
    if(!sscanf(params, "u", targetid))
    {
    	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    	if(IsLoggedIn{targetid} == 0) return SendClientMessage(playerid, RED, "Player not logged in.");
        format(fstr, sizeof(fstr), "{FFFFFF}%s (%d) Total Wealth", GetName(targetid), targetid);
        format(fstr2, sizeof(fstr2), "{FFFFFF}Holding: $%s\nBank: $%s\nCredit: $%s\nEarnings: $%s", number_format(GetPlayerCash(targetid)) , number_format(BankInfo[targetid][Balance]) , number_format(BankInfo[targetid][Credit]), number_format(GetPlayersBizEarnings(targetid)));
    	ShowPlayerDialog(playerid, WEALTH_DIALOG, DIALOG_STYLE_MSGBOX, fstr, fstr2, "Ok", "");
    	return true;
    }
    else
    {
        format(fstr, sizeof(fstr), "{FFFFFF}Holding: $%s\nBank: $%s\nCredit: $%s\nEarnings: $%s", number_format(GetPlayerCash(playerid)) , number_format(BankInfo[playerid][Balance]), number_format(BankInfo[playerid][Credit]), number_format(GetPlayersBizEarnings(playerid)));
    	ShowPlayerDialog(playerid, WEALTH_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Your Total Wealth", fstr, "Ok", "");
    }
    return true;
}

CMD:eject(playerid, params[])
{
    new VehID, ejectid;
    VehID = GetPlayerVehicleID(playerid);
    if(sscanf(params, "u", ejectid)) return SendClientMessage(playerid, RED, "[USAGE]: /(ej)ect [playerid]");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, RED, "Only the driver can eject passengers.");
    if(!IsPlayerConnected(ejectid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(!IsPlayerInVehicle(ejectid, VehID)) return SendClientMessage(playerid, RED, "The player must be in your vehicle, to eject them.");
	{
        RemovePlayerFromVehicle(ejectid);
        format(fstr, sizeof(fstr), "You have ejected %s (%d) from your vehicle.", GetName(ejectid), ejectid);
        SendClientMessage(playerid, YELLOW, fstr);
        format(fstr, sizeof(fstr), "%s (%d) has ejected you from their vehicle.", GetName(playerid), playerid);
        SendClientMessage(ejectid, RED, fstr);
    }
    return true;
}

CMD:ap(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 2){ return 0; }
	{
        ShowPlayerDialog(playerid, PANEL_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Admin Panel", "{FFFFFF}Weapons\nVehicles\nTeleports\nSkins\nTune Menu\nEvents\nObjects\nAdmin Commands", "Select", "Cancel");
		IsPlayerUsingTuneMenu{playerid} = true;
	}
	return true;
}

CMD:cp(playerid, params[])
{
	ShowPlayerDialog(playerid, CONTROL_PANEL, DIALOG_STYLE_LIST, "{FFFFFF}Player Control Panel", "{FFFFFF}Change Password\nMy Stats\nPlayer Stats\nReport Someone\nHelp\nCommands\nRules\nFAQ", "Select", "Cancel");
	return true;
}

CMD:sellvehto(playerid, params[])
{
    new playerid2, price, string[150], string2[150], Float:posX, Float:posY, Float:posZ;
    if(DegreeInfo[playerid][dDealer] < 1) return SendClientMessage(playerid, RED, "You need a Dealership Degree to use this command.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You must be in a owned vehicle to use this command.");
	if(strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[GetPlayerVehicleID(playerid)]][vOwner], false) != 0) return SendClientMessage(playerid, RED, "You do not own this vehicle.");
	if(sscanf(params, "ud", playerid2, price)) return SendClientMessage(playerid, RED, "[USAGE]: /sellvehto [playerid] [price]");
	GetPlayerPos(playerid2, posX, posY, posZ);
	if(!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, RED, "Player not found.");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ)) return SendClientMessage(playerid, RED, "You need to be near the player to offer your vehicle to them.");
	{
		offer_price[playerid2] = price;
		offerer_id[playerid2] = playerid;
		offeredveh[playerid2] = IsShopVehicle[GetPlayerVehicleID(playerid)];
		format(string, sizeof(string), "Vehicle offered to %s for $%s, please await response.", GetName(playerid2), number_format(price));
		SendClientMessage(playerid, WHITE, string);
		format(string2, sizeof(string2), "%s (%d) has offered their vehicle to you for $%s, use /(accept/decline)veh", GetName(playerid), playerid, number_format(price));
		SendClientMessage(playerid2, WHITE, string2);
		SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid2);
		new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /sellvehto %d %d", GetName(playerid), playerid, playerid2, price);
    	Log("logs/commands.log", astring);
	}
	return true;
}

CMD:deleteveh(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in an owned vehicle to use this command.");
	new v = GetPlayerVehicleID(playerid);
	if(IsPlayerInOwnedVehicle(playerid, v) == 0) return SendClientMessage(playerid, RED, "You dont own this vehicle.");
	{
		if(verifydestroycar{playerid} == 0)
		{
			SendClientMessage(playerid, RED, "WARNING: Are you sure you would like to completely delete this vehicle? (NO REFUND)");
			SendClientMessage(playerid, WHITE, "Type /deleteveh again to confirm, otherwise type /canceldeletion");
			verifydestroycar{playerid} = 1;
			return true;
		}
		else if(verifydestroycar{playerid} == 1)
		{
		    new file[40];
			format(file, sizeof(file), VEH_FILE, IsShopVehicle[v]);
			RemovePlayerFromVehicle(playerid);
			DestroyNeons(GetPlayerVehicleID(playerid));
			DestroyVehicle(GetPlayerVehicleID(playerid));
			fremove(file);
			GetPlayerVehicles{playerid}--;
	 		GetServerVehicles--;
		    verifydestroycar{playerid} = 0;
		    SendClientMessage(playerid, WHITE, "You have deleted this vehicle, you now have (1) extra empty vehicle slot.");
		}
	}
	new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /deleteveh", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:canceldeletion(playerid, params[])
{
	if(verifydestroycar{playerid} == 0) return SendClientMessage(playerid, RED, "You have not tried to delete any vehicles yet, use /deleteveh");
	verifydestroycar{playerid} = 0;
	SendClientMessage(playerid, WHITE, "Vehicle deletion cancelled.");
	new astring[100];
    format(astring, sizeof(astring), "%s (%d) typed: /canceldeletion", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
    return true;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in an owned vehicle to use this command.");
	new v = GetPlayerVehicleID(playerid), Float:Pos[4];
	if(IsPlayerInOwnedVehicle(playerid, v) == 0) return SendClientMessage(playerid, RED, "You dont own this vehicle.");
	{
		GetVehiclePos(v, Pos[0], Pos[1], Pos[2]);
		GetVehicleZAngle(v, Pos[3]);
		VehicleInfo[IsShopVehicle[v]][vPosX] = Pos[0];
		VehicleInfo[IsShopVehicle[v]][vPosY] = Pos[1];
		VehicleInfo[IsShopVehicle[v]][vPosZ] = Pos[2];
		VehicleInfo[IsShopVehicle[v]][vPosA] = Pos[3];
		SendClientMessage(playerid, WHITE, "Vehicle parked, it will now load at this position.");
		SaveVehicleStats(IsShopVehicle[v]);
	}
	return true;
}

CMD:setplate(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You need to be in an owned vehicle to use this command.");
	new v = GetPlayerVehicleID(playerid), number[32], color1, color2;
	if(IsPlayerInOwnedVehicle(playerid, v) == 0) return SendClientMessage(playerid, RED, "You dont own this vehicle.");
	if(sscanf(params, "s[32]", number)) return SendClientMessage(playerid, RED, "[USAGE]: /setplate [number]");
	if(strlen(number) < 0 || strlen(number) > 32) return SendClientMessage(playerid, RED, "The plate number can only contain 0-32 characters.");
    if(GetVehicleColor(v, color1, color2))
	{
		new Float:vPos[4];
		GetVehiclePos(v, vPos[0], vPos[1], vPos[2]);
		GetVehicleZAngle(v, vPos[3]);
		strmid(VehicleInfo[IsShopVehicle[v]][vPlate], number, 0, 32, 32);
		SetVehicleNumberPlate(v, number);
		SetVehicleToRespawn(v);
		SetVehiclePos(v, vPos[0], vPos[1], vPos[2]);
		SetVehicleZAngle(v, vPos[3]);
		PutPlayerInVehicle(playerid, v, 0);
		ChangeVehicleColor(v, color1, color2);
		new string[150];
		format(string, sizeof(string), "You have saved your vehicles number plate to: %s", number);
		SendClientMessage(playerid, WHITE, string);
		SaveVehicleStats(IsShopVehicle[v]);
	}
	return true;
}

CMD:lk(playerid, params[])
{
	new string[150];
    if(PlayerInfo[playerid][vLock] == 0) return SendClientMessage(playerid, RED, "You dont own a vLock, buy one at a 24/7 store.");
	if(GetClosestOwnedVehID(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, "You need to be near an owned vehicle to use this command.");
    new v = GetClosestOwnedVehID(playerid);
	if(VehicleInfo[IsShopVehicle[v]][vLocked] == 0)
	{
	    VehicleInfo[IsShopVehicle[v]][vLocked] = 1;
		SetVehicleParamsForAll(v, 0, 1);
        GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, condition);
		SetVehicleParamsEx(v, engine, lights, alarm, ON, bonnet, boot, condition);
		SaveVehicleStats(IsShopVehicle[v]);
		GameTextForPlayer(playerid, "~g~Locked", 3000, 5);
		PlayerPlaySound(playerid, 1147, 0.0, 0.0, 10.0);
		format(string, sizeof(string), "%s locks their vehicle...", GetName(playerid));
        ProxDetector(20.0, playerid, string, RED, RED, RED, RED, RED);
	}
	else
	{
	    VehicleInfo[IsShopVehicle[v]][vLocked] = 0;
		SetVehicleParamsForAll(v, 0, 0);
        GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, condition);
		SetVehicleParamsEx(v, engine, lights, alarm, OFF, bonnet, boot, condition);
		SaveVehicleStats(IsShopVehicle[v]);
		GameTextForPlayer(playerid, "~r~Unlocked", 3000, 5);
		PlayerPlaySound(playerid, 1147, 0.0, 0.0, 10.0);
		format(string, sizeof(string), "%s unlocks their vehicle...", GetName(playerid));
        ProxDetector(20.0, playerid, string, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE);
	}
	return true;
}

CMD:lock(playerid, params[])
{
	new string[150];
    if(PlayerInfo[playerid][vLock] == 0) return SendClientMessage(playerid, RED, "You dont own a vLock, buy one at a 24/7 store.");
	if(GetClosestOwnedVehID(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, RED, "You need to be near an owned vehicle to use this command.");
    new v = GetClosestOwnedVehID(playerid);
	if(VehicleInfo[IsShopVehicle[v]][vLocked] == 0)
	{
	    VehicleInfo[IsShopVehicle[v]][vLocked] = 1;
		SetVehicleParamsForAll(v, 0, 1);
        GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, condition);
		SetVehicleParamsEx(v, engine, lights, alarm, ON, bonnet, boot, condition);
		SaveVehicleStats(IsShopVehicle[v]);
		GameTextForPlayer(playerid, "~g~Locked", 3000, 5);
		PlayerPlaySound(playerid, 1147, 0.0, 0.0, 10.0);
		format(string, sizeof(string), "%s locks their vehicle...", GetName(playerid));
        ProxDetector(20.0, playerid, string, RED, RED, RED, RED, RED);
	}
	else
	{
	    VehicleInfo[IsShopVehicle[v]][vLocked] = 0;
		SetVehicleParamsForAll(v, 0, 0);
        GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, condition);
		SetVehicleParamsEx(v, engine, lights, alarm, OFF, bonnet, boot, condition);
		SaveVehicleStats(IsShopVehicle[v]);
		GameTextForPlayer(playerid, "~r~Unlocked", 3000, 5);
		PlayerPlaySound(playerid, 1147, 0.0, 0.0, 10.0);
		format(string, sizeof(string), "%s unlocks their vehicle...", GetName(playerid));
        ProxDetector(20.0, playerid, string, ORANGE, ORANGE, ORANGE, ORANGE, ORANGE);
	}
	return true;
}

CMD:myvehs(playerid, params[])
{
	new count = 0, slots[100];
	if(GetPlayerVehicles{playerid} == 0) return SendClientMessage(playerid, RED, "You dont own any vehicles.");
	for(new v = 0; v < MAX_SHOP_VEHICLES; v++)
	{
		if(IsShopVehicle[v] != -1)
		{
	    	if(!strcmp(GetName(playerid), VehicleInfo[IsShopVehicle[v]][vOwner], false))
	        {
	            Vehicle_Data_Model[playerid][count] = VehicleInfo[IsShopVehicle[v]][vModel];
	            Vehicle_Data_ID[playerid][count] = v;
	            count++;
	            if(count == MAX_VIP_VEHS)
	            {
	                break;
	            }
	            else continue;
	        }
		}
	}
	if(count == 1)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 2)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 3)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s\nVehicle 3: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 4)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s\nVehicle 3: %s\nVehicle 4: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][3] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 5)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s\nVehicle 3: %s\nVehicle 4: %s\nVehicle 5: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][3] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][4] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 6)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s\nVehicle 3: %s\nVehicle 4: %s\nVehicle 5: %s\nVehicle 6: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][3] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][4] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][5] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	    return true;
	}
	else if(count == 7)
	{
	    format(slots, sizeof(slots), "Vehicle 1: %s\nVehicle 2: %s\nVehicle 3: %s\nVehicle 4: %s\nVehicle 5: %s\nVehicle 6: %s\nVehicle 7: %s",
		GlobalVehicleNames[Vehicle_Data_Model[playerid][0] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][1] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][2] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][3] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][4] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][5] - 400], GlobalVehicleNames[Vehicle_Data_Model[playerid][6] - 400]);
	    ShowPlayerDialog(playerid, MY_VEHS_MENU, DIALOG_STYLE_LIST, "{FFFFFF}Owned Vehicle List", slots, "Locate", "Cancel");
	}
	return true;
}

CMD:lights(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
    new veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, condition);
	if(lights == OFF)
	{
		SetVehicleParamsEx(veh, engine, ON, alarm, doors, bonnet, boot, condition);
		SendClientMessage(playerid, WHITE, "Lights ON.");
	}
	else
	{
		SetVehicleParamsEx(veh, engine, OFF, alarm, doors, bonnet, boot, condition);
		SendClientMessage(playerid, WHITE, "Lights OFF.");
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /lights", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:alarm(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
    new veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, condition);
	if(alarm == OFF)
	{
		SetVehicleParamsEx(veh, engine, lights, ON, doors, bonnet, boot, condition);
		SendClientMessage(playerid, WHITE, "Alarm ON.");
	}
	else
	{
		SetVehicleParamsEx(veh, engine, lights, OFF, doors, bonnet, boot, condition);
		SendClientMessage(playerid, WHITE, "Alarm OFF.");
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /alarm", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:bonnet(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
    new veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, condition);
	if(bonnet == OFF)
	{
		SetVehicleParamsEx(veh, engine, lights, alarm, doors, ON, boot, condition);
		SendClientMessage(playerid, WHITE, "Bonnet OPENED.");
	}
	else
	{
		SetVehicleParamsEx(veh, engine, lights, alarm, doors, OFF, boot, condition);
		SendClientMessage(playerid, WHITE, "Bonnet CLOSED.");
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /bonnet", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:boot(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You must be in a vehicle to use this command.");
    new veh = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, condition);
	if(boot == OFF)
	{
		SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, ON, condition);
		SendClientMessage(playerid, WHITE, "Boot OPENED.");
	}
	else
	{
		SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, OFF, condition);
		SendClientMessage(playerid, WHITE, "Boot CLOSED.");
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /boot", GetName(playerid), playerid);
    Log("logs/commands.log", astring);
	return true;
}

CMD:createbiz(playerid, params[])
{
	new Count, cost, bizname[50], bizowner[24], file[40];
	Count = GetFreeBizID();
	cost = random(200000) + 300000;//Random 2M-5M
	new Float:adminx, Float:adminy, Float:adminz, Float:admina;
	GetPlayerPos(playerid, adminx, adminy, adminz);
	GetPlayerFacingAngle(playerid, admina);
	if(Count < 0)
	{
		new str[150];
		format(str, sizeof(str), "The server has reached a maximum of %d businesses.", MAX_BUSINESSES);
		SendClientMessage(playerid, RED, str);
		return 1;
	}
	if(IsPlayerSetBuilder{playerid} == true || PlayerInfo[playerid][aLevel] == 4)
	{
		format(file, sizeof(file), BIZ_FILE, Count);
		new File:startfile = fopen(file, io_write);
		fclose(startfile);

		format(bizname, sizeof(bizname), "For-Sale");

		format(bizowner, sizeof(bizowner), "%s", DEFAULT_BIZ_OWNER_NAME);

		BizInfo[Count][bName] = bizname;
		BizInfo[Count][bOwner] = bizowner;
		BizInfo[Count][bPrice] = cost;
		BizInfo[Count][bExtX] = adminx;
		BizInfo[Count][bExtY] = adminy;
		BizInfo[Count][bExtZ] = adminz;
		BizInfo[Count][bIntX] = -25.8424;
		BizInfo[Count][bIntY] = -188.2505;
		BizInfo[Count][bIntZ] = 1003.5469;
		
		new Float:sX, Float:sY;
		GetPosBehindOfPlayer(playerid, sX, sY, -2.0);
		
		BizInfo[Count][bExtSpwnX] = sX;
		BizInfo[Count][bExtSpwnY] = sY;
		BizInfo[Count][bExtSpwnZ] = adminz;
		BizInfo[Count][bExtSpwnA] = admina + 180;
        BizInfo[Count][bIntSpwnX] = -25.5918;
		BizInfo[Count][bIntSpwnY] = -185.0244;
		BizInfo[Count][bIntSpwnZ] = 1003.5469;
		BizInfo[Count][bIntSpwnA] = 358.4055;
		
		BizInfo[Count][bRobX] = -10.6035;
		BizInfo[Count][bRobY] = -178.2635;
		BizInfo[Count][bRobZ] = 1003.5469;
		BizInfo[Count][bInterior] = 17;
		BizInfo[Count][bVWorld] = Count +1000;
		BizInfo[Count][bEarnings] = 0;

		new INI:bFilee = INI_Open(file);
		INI_WriteString(bFilee, "bName", BizInfo[Count][bName]);
		INI_WriteString(bFilee, "bOwner", BizInfo[Count][bOwner]);
		INI_WriteInt(bFilee, "bPrice", BizInfo[Count][bPrice]);
		INI_WriteFloat(bFilee, "bExtX", BizInfo[Count][bExtX]);
		INI_WriteFloat(bFilee, "bExtY", BizInfo[Count][bExtY]);
		INI_WriteFloat(bFilee, "bExtZ", BizInfo[Count][bExtZ]);
		INI_WriteFloat(bFilee, "bIntX", BizInfo[Count][bIntX]);
		INI_WriteFloat(bFilee, "bIntY", BizInfo[Count][bIntY]);
		INI_WriteFloat(bFilee, "bIntZ", BizInfo[Count][bIntZ]);
		INI_WriteFloat(bFilee, "bExtSpwnX", BizInfo[Count][bExtSpwnX]);
		INI_WriteFloat(bFilee, "bExtSpwnY", BizInfo[Count][bExtSpwnY]);
		INI_WriteFloat(bFilee, "bExtSpwnZ", BizInfo[Count][bExtSpwnZ]);
		INI_WriteFloat(bFilee, "bExtSpwnA", BizInfo[Count][bExtSpwnA]);
		INI_WriteFloat(bFilee, "bIntSpwnX", BizInfo[Count][bIntSpwnX]);
		INI_WriteFloat(bFilee, "bIntSpwnY", BizInfo[Count][bIntSpwnY]);
		INI_WriteFloat(bFilee, "bIntSpwnZ", BizInfo[Count][bIntSpwnZ]);
		INI_WriteFloat(bFilee, "bIntSpwnA", BizInfo[Count][bIntSpwnA]);
		INI_WriteFloat(bFilee, "bRobX", BizInfo[Count][bRobX]);
		INI_WriteFloat(bFilee, "bRobY", BizInfo[Count][bRobY]);
		INI_WriteFloat(bFilee, "bRobZ", BizInfo[Count][bRobZ]);
		INI_WriteInt(bFilee, "bInterior", BizInfo[Count][bInterior]);
		INI_WriteInt(bFilee, "bVWorld", BizInfo[Count][bVWorld]);
		INI_WriteInt(bFilee, "bEarnings", BizInfo[Count][bEarnings]);
		INI_Close(bFilee);

		bizentercp[Count] = CreateDynamicCP(BizInfo[Count][bExtX], BizInfo[Count][bExtY], BizInfo[Count][bExtZ], 1.0, 0, 0, -1, 4.0);
		bizexitcp[Count] = CreateDynamicCP(BizInfo[Count][bIntX], BizInfo[Count][bIntY], BizInfo[Count][bIntZ], 1.0, BizInfo[Count][bVWorld], BizInfo[Count][bInterior], -1, 4.0);
		bizrobberycp[Count] = CreateDynamicCP(BizInfo[Count][bRobX], BizInfo[Count][bRobY], BizInfo[Count][bRobZ], 1.0, BizInfo[Count][bVWorld], BizInfo[Count][bInterior], -1, 4.0);

		bLabel[Count] = Create3DTextLabel(bizname, YELLOW, BizInfo[Count][bExtX], BizInfo[Count][bExtY], BizInfo[Count][bExtZ]+0.5, 30.0, 0, 1);

		new string[150];
		format(string, sizeof(string), "Business id %d created.", Count);
		SendClientMessage(playerid, WHITE, string);
	}
	else
	{
    	return 0;
	}
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new file[64], b;
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "d", b)) return SendClientMessage(playerid, RED, "[USAGE]: /sellbiz [biz id]");
    format(file, sizeof(file), BIZ_FILE, b);
	if(!fexist(file)) return SendClientMessage(playerid, RED, "Invalid biz id.");
	if(!strcmp(BizInfo[b][bOwner], "Nobody", false)) return SendClientMessage(playerid, RED, "This business has no owner, you cant sell it.");
	{
		GivePlayerCash(playerid, BizInfo[b][bEarnings]);
		GivePlayerCash(playerid, BizInfo[b][bPrice]/2);
		SendClientMessage(playerid, WHITE, "Business sold. You received 50 percent of the value of the business and the remaining earnings.");
		SellBiz(b);
	}
    return true;
}

CMD:sellallbiz(playerid, params[])
{
	new file[40], count = 0;
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	for(new b = 0; b < MAX_BUSINESSES; b++)
	{
    	format(file, sizeof(file), BIZ_FILE, b);
		if(fexist(file)) 
		{
			if(strcmp(BizInfo[b][bOwner], "Nobody", false))
			{
				new gname[50], gowner[24];
				format(gowner, sizeof(gowner), "Nobody");
				format(gname, sizeof(gname), "For-Sale");
				BizInfo[b][bName] = gname;
				BizInfo[b][bOwner] = gowner;
				new INI:bFilee = INI_Open(file);
				INI_WriteString(bFilee, "bName", gname);
				INI_WriteString(bFilee, "bOwner", gowner);
				INI_WriteInt(bFilee, "bPrice", BizInfo[b][bPrice]);
				INI_WriteFloat(bFilee, "bExtX", BizInfo[b][bExtX]);
				INI_WriteFloat(bFilee, "bExtY", BizInfo[b][bExtY]);
				INI_WriteFloat(bFilee, "bExtZ", BizInfo[b][bExtZ]);
				INI_WriteFloat(bFilee, "bIntX", BizInfo[b][bIntX]);
				INI_WriteFloat(bFilee, "bIntY", BizInfo[b][bIntY]);
				INI_WriteFloat(bFilee, "bIntZ", BizInfo[b][bIntZ]);
				INI_WriteFloat(bFilee, "bExtSpwnX", BizInfo[b][bExtSpwnX]);
				INI_WriteFloat(bFilee, "bExtSpwnY", BizInfo[b][bExtSpwnY]);
				INI_WriteFloat(bFilee, "bExtSpwnZ", BizInfo[b][bExtSpwnZ]);
				INI_WriteFloat(bFilee, "bExtSpwnA", BizInfo[b][bExtSpwnA]);
				INI_WriteFloat(bFilee, "bIntSpwnX", BizInfo[b][bIntSpwnX]);
				INI_WriteFloat(bFilee, "bIntSpwnY", BizInfo[b][bIntSpwnY]);
				INI_WriteFloat(bFilee, "bIntSpwnZ", BizInfo[b][bIntSpwnZ]);
				INI_WriteFloat(bFilee, "bIntSpwnA", BizInfo[b][bIntSpwnA]);
				INI_WriteFloat(bFilee, "bRobX", BizInfo[b][bRobX]);
				INI_WriteFloat(bFilee, "bRobY", BizInfo[b][bRobY]);
				INI_WriteFloat(bFilee, "bRobZ", BizInfo[b][bRobZ]);
				INI_WriteInt(bFilee, "bInterior", BizInfo[b][bInterior]);
				INI_WriteInt(bFilee, "bVWorld", BizInfo[b][bVWorld]);
				INI_WriteInt(bFilee, "bEarnings", 0);
				INI_Close(bFilee);
				Update3DTextLabelText(bLabel[b], YELLOW, gname);
				SaveBizStats(b);
				count++;
			}
		}
	}
	new string[64];
	format(string, sizeof(string), "%d businesses sold.", count);
	SendClientMessage(playerid, WHITE, string);
    return true;
}

CMD:deletebiz(playerid, params[])
{
	new bizid, file[40];
    if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "d", bizid)) return SendClientMessage(playerid, RED, "[USAGE]: /deletebiz [business id]");
	format(file, sizeof(file), BIZ_FILE, bizid);
	if(!fexist(file)) return SendClientMessage(playerid, RED, "Invalid business id.");
	DestroyDynamicCP(bizentercp[bizid]);
	DestroyDynamicCP(bizexitcp[bizid]);
	DestroyDynamicCP(bizrobberycp[bizid]);
	Delete3DTextLabel(bLabel[bizid]);
	format(fstr, sizeof(fstr), "Business id %d deleted.", bizid);
	SendClientMessage(playerid, WHITE, fstr);
	fremove(file);
	return true;
}

CMD:deleteallbiz(playerid, params[])
{
	new file[40], count = 0;
    if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
    for(new b = 0; b < MAX_BUSINESSES; b++)
	{
    	format(file, sizeof(file), BIZ_FILE, b);
		if(fexist(file))
		{
			DestroyDynamicCP(bizentercp[b]);
			DestroyDynamicCP(bizexitcp[b]);
			DestroyDynamicCP(bizrobberycp[b]);
			Delete3DTextLabel(bLabel[b]);
			fremove(file);
			count++;
		}
	}
	format(fstr, sizeof(fstr), "%d businesses deleted.", count);
	SendClientMessage(playerid, WHITE, fstr);
	return true;
}

CMD:setbuilder(playerid, params[])
{
	new targetid;
	if(PlayerInfo[playerid][aLevel] < 4){ return 0; }
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /setbuilder [playerid]");
	if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
	IsPlayerSetBuilder{targetid} = true;
	SendClientMessage(targetid, LIGHTGREEN, "You have been set as a Temporary Builder, follow the admins instructions.");
	SendClientMessage(playerid, WHITE, "Builder set.");
	return true;
}

CMD:sellbizto(playerid, params[])
{
    new playerid2, price, string[150], string2[150], Float:posX, Float:posY, Float:posZ;
    if(DegreeInfo[playerid][dReal] < 1) return SendClientMessage(playerid, RED, "You need a Real Estate Degree to use this command.");
	if(sscanf(params, "Ud", playerid2, price)) return SendClientMessage(playerid, RED, "[USAGE]: /sellbizto [playerid] [price]");
	GetPlayerPos(playerid2, posX, posY, posZ);
	if(!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, RED, "Player not found.");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ)) return SendClientMessage(playerid, RED, "You need to be near the player to offer your business to them.");
	for(new i = 0; i < MAX_BUSINESSES; i++)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, BizInfo[i][bExtX], BizInfo[i][bExtY], BizInfo[i][bExtZ]) && strcmp(BizInfo[i][bOwner], GetName(playerid), false)) return SendClientMessage(playerid, RED, "You must be outside near the door to sell a business you own to a player.");
	    {
			offer_price2[playerid2] = price;
			offerer_id2[playerid2] = playerid;
			sellingbizid[playerid] = i;
			format(string, sizeof(string), "Business offered to %s for $%s, please await response.", GetName(playerid2), number_format(price));
			SendClientMessage(playerid, WHITE, string);
			format(string2, sizeof(string2), "%s (%d) has offered %s to you for $%s, use /(accept/decline)biz", GetName(playerid), playerid, BizInfo[i][bName], number_format(price));
			SendClientMessage(playerid2, WHITE, string2);
			SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid2);
		}
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /sellbizto %d %d", GetName(playerid), playerid, playerid2, price);
    Log("logs/commands.log", astring);
	return true;
}

CMD:bizmenu(playerid, params[])
{
	if(BizID[playerid] == -1) return SendClientMessage(playerid, RED, "You must be in an owned business to use this command.");
	if(strcmp(BizInfo[BizID[playerid]][bOwner], GetName(playerid), false)) return SendClientMessage(playerid, RED, "You dont own this business.");
	ShowPlayerDialog(playerid, BIZ_MENU_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Business Menu", "{FFFFFF}Change Business Name\nEarnings Balance\nWithdraw Earnings\nSell Business", "Select", "Cancel");
	return true;
}

CMD:bm(playerid, params[])
{
	if(BizID[playerid] == -1) return SendClientMessage(playerid, RED, "You must be in an owned business to use this command.");
	if(strcmp(BizInfo[BizID[playerid]][bOwner], GetName(playerid), false)) return SendClientMessage(playerid, RED, "You dont own this business.");
	ShowPlayerDialog(playerid, BIZ_MENU_DIALOG, DIALOG_STYLE_LIST, "{FFFFFF}Business Menu", "{FFFFFF}Change Business Name\nEarnings Balance\nWithdraw Earnings\nSell Business", "Select", "Cancel");
	return true;
}

CMD:getmats(playerid, params[])
{
	//if(DegreeInfo[playerid][dWeapons] < 1) return SendClientMessage(playerid, RED, "This command is restricted to Weapons Degree.");
	if(GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Medics cannot use this command!");
	if(IsACop(playerid)) return SendClientMessage(playerid, RED, "Law Enforcement cannot use this command!");
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 966.2469,2160.6836,10.8203))//LV
	{
	    if(IsPlayerGettingMatsNV{playerid} == false)
	    {
			IsPlayerGettingMatsBS{playerid} = true;
			SendClientMessage(playerid, YELLOW, "Pickup your materials at the Las Venturas Materials Factory at Bayside.");
			return true;
		}
		else if(IsPlayerGettingMatsNV{playerid} == true)
		{
	    	PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
		    IsPlayerGettingMatsNV{playerid} = false;
	    	PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] + 500;
	    	SendClientMessage(playerid, LIGHTGREEN, "[MATS]: 500 materials received.");
		}
		return true;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2488.5205,2295.3135,4.9844))//BS
	{
	    if(IsPlayerGettingMatsBS{playerid} == false)
	    {
			IsPlayerGettingMatsNV{playerid} = true;
			SendClientMessage(playerid, YELLOW, "Pickup your materials at the Las Venturas Materials Factory at Blackfield.");
			return true;
		}
		else if(IsPlayerGettingMatsBS{playerid} == true)
		{
	    	PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
		    IsPlayerGettingMatsBS{playerid} = false;
	    	PlayerInfo[playerid][pMaterials] = PlayerInfo[playerid][pMaterials] + 500;
	    	SendClientMessage(playerid, LIGHTGREEN, "[MATS]: 500 materials received.");
		}
		return true;
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're not near a materials pickup point.");
	}
	return true;
}

CMD:fix(playerid, params[])
{
	new customer, price, string1[150], string2[150];
	if(GetTeam{playerid} != CLASS_CIV || PlayerInfo[playerid][pSkill] != 2) return SendClientMessage(playerid, RED, "You must be a mechanic to use this command!");
	if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /fix [playerid] [price]");
	if(!IsPlayerConnected(customer)) return SendClientMessage(playerid, RED, "Player not found.");
	if(!IsPlayerInAnyVehicle(customer)) return SendClientMessage(playerid, RED, "Player not in a vehicle.");
    if((gettime() - 180) < TimerInfo[playerid][CMD_timer28]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer28] = gettime();
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(customer, cx, cy, cz);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) return SendClientMessage(playerid, RED, "You must be near the player to offer mechanical services to them.");
    {
		format(string1, sizeof(string1), "%s (%d) has offered to fix your vehicle for $%s, use /accept fix", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) to fix their vehicle for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id8[customer] = playerid;
		offer_price8[customer] = price;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
        new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /fix %d %d", GetName(playerid), playerid, customer, price);
    	Log("logs/commands.log", astring);
	}
	return true;
}

CMD:refill(playerid, params[])
{
	new customer, price, string1[150], string2[150];

	if(GetTeam{playerid} != CLASS_CIV || PlayerInfo[playerid][pSkill] != 2) return SendClientMessage(playerid, RED, "You must be a mechanic to use this command!");
	if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /refill [playerid] [price]");
	if(!IsPlayerConnected(customer)) return SendClientMessage(playerid, RED, "Player not found.");
	if(!IsPlayerInAnyVehicle(customer)) return SendClientMessage(playerid, RED, "Player not in a vehicle.");
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(customer, cx, cy, cz);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) return SendClientMessage(playerid, RED, "You must be near the player to offer mechanical services to them.");
    {
		format(string1, sizeof(string1), "%s (%d) has offered to refill your vehicle for $%s, use /accept refill", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) to refill their vehicle for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id9[customer] = playerid;
		offer_price9[customer] = price;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
        new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /refill %d %d", GetName(playerid), playerid, customer, price);
    	Log("logs/commands.log", astring);
	}
	return true;
}

CMD:nos(playerid, params[])
{
    new customer, price, Float:cx, Float:cy, Float:cz, string1[150], string2[150];
    if(PlayerInfo[playerid][pSkill] == 2) {
    	if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /nos [playerid] [price]");
		GetPlayerPos(customer, cx, cy, cz);
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) return SendClientMessage(playerid, RED, "You must be near the player to offer mechanical services to them.");
        if(IsPlayerInAnyVehicle(customer)) {
   			if(GetVehicleComponentInSlot(GetPlayerVehicleID(customer), GetVehicleComponentType(1010)) != 1010 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1009)) != 1009 && GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), GetVehicleComponentType(1008)) != 1008)
   			{
				format(string1, sizeof(string1), "%s (%d) has offered to add nos to your vehicle for $%s, use /accept nos", GetPlayerNameEx(playerid), playerid, number_format(price));
				SendClientMessage(customer, WHITE, string1);
				format(string2, sizeof(string2), "You have offered %s (%d) to add nos to their vehicle for $%s, please await response.", GetPlayerNameEx(customer), customer, number_format(price));
				SendClientMessage(playerid, WHITE, string2);
		        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
		        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);

		        SetPVarInt(customer, "Skill_NOSPrice", price);
		        SetPVarInt(customer, "Skill_NOSOfferer", playerid);

		        new astring[100];
		    	format(astring, sizeof(astring),"%s (%d) typed: /nos %d %d", GetName(playerid), playerid, customer, price);
		    	Log("logs/commands.log", astring);
			}
			else {
			    SendClientMessage(playerid, COLOR_GREY, "This vehicle already has nitrous.");
			}
        }
        else {
            SendClientMessage(playerid, COLOR_GREY, "Player is not in any vehicle.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "You are not a Mechanic!" );
    }
    return 1;
}

CMD:hyd(playerid, params[])
{
    new customer, price, Float:cx, Float:cy, Float:cz, string1[150], string2[150];
    if(PlayerInfo[playerid][pSkill] == 2)
	{
    	if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /hyd [playerid] [price]");
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
		{
	        if(IsPlayerInAnyVehicle(customer))
			{
	   			if(GetVehicleComponentInSlot(GetPlayerVehicleID(customer), GetVehicleComponentType(1087)) != 1087)
	   			{
					format(string1, sizeof(string1), "%s (%d) has offered to add hydraulics to your vehicle for $%s, use /accept hyd", GetPlayerNameEx(playerid), playerid, number_format(price));
					SendClientMessage(customer, WHITE, string1);
					format(string2, sizeof(string2), "You have offered %s (%d) to add hydraulics to their vehicle for $%s, please await response.", GetPlayerNameEx(customer), customer, number_format(price));
					SendClientMessage(playerid, WHITE, string2);
			        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
			        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);

			        SetPVarInt(customer, "Skill_HYDPrice", price);
			        SetPVarInt(customer, "Skill_HYDOfferer", playerid);

			        new astring[100];
			    	format(astring, sizeof(astring),"%s (%d) typed: /hyd %d %d", GetName(playerid), playerid, customer, price);
			    	Log("logs/commands.log", astring);
				}
				else {
				    SendClientMessage(playerid, COLOR_GREY, "This vehicle already has hydraulics.");
				}
	        }
	        else {
	            SendClientMessage(playerid, COLOR_GREY, "Player is not in any vehicle.");
	        }
		}
        else {
            SendClientMessage(playerid, COLOR_GREY, "You must be near the player to offer mechanical services to them.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "You are not a Mechanic!" );
    }
    return 1;
}

CMD:sellmats(playerid, params[])
{
	new customer, materials, price, string1[150], string2[150];
	//if(DegreeInfo[playerid][dWeapons] < 1) return SendClientMessage(playerid, RED, "This command is restricted to Weapons Degree.");
	if(GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Medics cannot use this command!");
	if(IsACop(playerid)) return SendClientMessage(playerid, RED, "Law Enforcement cannot use this command!");
	if(PlayerInfo[playerid][pMaterials] < 1) return SendClientMessage(playerid, RED, "You dont have any materials to sell.");
	if(sscanf(params, "udd", customer, materials, price)) return SendClientMessage(playerid, RED, "[USAGE]: /sellmats [playerid] [materials] [price]");
	if(!IsPlayerConnected(customer)) return SendClientMessage(playerid, RED, "Player not found.");
	//if(DegreeInfo[customer][dWeapons] < 1) return SendClientMessage(playerid, RED, "The player does not have a Weapons Degree.");
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(customer, cx, cy, cz);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) return SendClientMessage(playerid, RED, "You must be near the player to offer mats to them.");
	{
		format(string1, sizeof(string1), "%s (%d) has offered you %d materials for $%s, use /(accept/decline)mats", GetName(playerid), playerid, materials, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) %d materials for $%s, please await response.", GetName(customer), customer, materials, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id6[customer] = playerid;
		offer_price6[customer] = price;
		matsbuying[customer] = materials;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
        new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /sellmats %d %d %d", GetName(playerid), playerid, customer, materials, price);
    	Log("logs/commands.log", astring);
	}
	return true;
}

CMD:sellhouseto(playerid, params[])
{
    new playerid2, price, string[150], string2[150], Float:posX, Float:posY, Float:posZ, file[40];
    if(DegreeInfo[playerid][dReal] < 1) return SendClientMessage(playerid, RED, "You need a Real Estate Degree to use this command.");
	if(sscanf(params, "ud", playerid2, price)) return SendClientMessage(playerid, RED, "[USAGE]: /sellhouseto [playerid] [price]");
	GetPlayerPos(playerid2, posX, posY, posZ);
	if(!IsPlayerConnected(playerid2)) return SendClientMessage(playerid, RED, "Player not found.");
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, posX, posY, posZ)) return SendClientMessage(playerid, RED, "You need to be near the player to offer your house to them.");
	Loop(i, MAX_HOUSES)
	{
	    format(file, sizeof(file), HOUSE_FILE, i);
     	if(fexist(file))
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[i][hSPOutX], HouseInfo[i][hSPOutY], HouseInfo[i][hSPOutZ])) return SendClientMessage(playerid, RED, "You must be outside near the door to sell a house you own to a player.");
		if(strcmp(GetHouseOwner(i), GetName(playerid), false)) return SendClientMessage(playerid, RED, "You must be outside near the door to sell a house you own to a player.");
	    {
			offer_price3[playerid2] = price;
			offerer_id3[playerid2] = playerid;
			sellinghouseid[playerid2] = i;
			format(string, sizeof(string), "House offered to %s for $%s, please await an response.", GetName(playerid2), number_format(price));
			SendClientMessage(playerid, WHITE, string);
			format(string2, sizeof(string2), "%s (%d) has offered their house to you for $%s, use /(accept/decline)house", GetName(playerid), playerid, number_format(price));
			SendClientMessage(playerid2, WHITE, string2);
			SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid2);
		}
	}
	new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /sellhouseto %d %d", GetName(playerid), playerid, playerid2, price);
    Log("logs/commands.log", astring);
	return true;
}

CMD:enterarena(playerid, params[])
{
	if(IsPlayerInArena{playerid} == false)
	{
		SetPlayerPos(playerid, -1362.5973, 935.0837, 1036.3635);
		SetPlayerInterior(playerid, 15);
		SetPlayerVirtualWorld(playerid, 0);
		IsPlayerInArena{playerid} = true;
		SendClientMessage(playerid, WHITE, "Welcome to Las Venturas Arena, use /exitarena at anytime to leave.");
		new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /enterarena", GetName(playerid), playerid);
    	Log("logs/commands.log", astring);
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're already in the Las Venturas Arena.");
	}
	return true;
}

CMD:exitarena(playerid, params[])
{
	if(IsPlayerInArena{playerid} == true)
	{
		SetPlayerPos(playerid, 1099.5729,1601.4722,12.5469);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		IsPlayerInArena{playerid} = false;
		new astring[100];
    	format(astring, sizeof(astring),"%s (%d) typed: /exitarena", GetName(playerid), playerid);
    	Log("logs/commands.log", astring);
	}
	else
	{
	    SendClientMessage(playerid, RED, "You not in the Las Venturas Arena.");
	}
	return true;
}

CMD:groupcreate(playerid, params[])
{
	new groupname[24];
  	if(pGroupInfo[playerid][gid] != -1) return SendClientMessage(playerid, RED, "You must leave your current group to create another.");
  	if(sscanf(params, "s[24]", groupname)) return SendClientMessage(playerid, RED, "[USAGE]: /groupcreate [group name]");
  	if(strlen(groupname) > 24 || strlen(groupname) < 3) return SendClientMessage(playerid, RED, "Group names can only contain 3-24 characters.");
	if(IsGroupTaken(params)) return SendClientMessage(playerid, RED, "Group name aready exists.");
	CreateGroup(groupname, playerid);
  	return true;
}

CMD:groupleave(playerid, params[])
{
	if(pGroupInfo[playerid][gid] == -1) return SendClientMessage(playerid, RED, "You're not in a group.");
 	LeaveGroup(playerid, 0);
 	return true;
}

CMD:groupinvite(playerid, params[])
{
	new invitee;
	if(pGroupInfo[playerid][order] != 1) return SendClientMessage(playerid, RED, "Only the leader of the group can invite players.");
  	if(sscanf(params, "u", invitee)) return SendClientMessage(playerid, RED, "[USAGE]: /groupinvite [playerid]");
	if(!IsPlayerConnected(invitee)) return SendClientMessage(playerid, RED, "Player not found.");
	if(pGroupInfo[invitee][gid] == pGroupInfo[playerid][gid]) return SendClientMessage(playerid, RED, "That player is already in another group.");
 	if(pGroupInfo[invitee][invited] == pGroupInfo[playerid][gid]) return SendClientMessage(playerid, RED, "That player has already been invited to the group.");
	if(pGroupInfo[invitee][attemptjoin] == pGroupInfo[playerid][gid]) return GroupJoin(invitee, pGroupInfo[playerid][gid]);
	pGroupInfo[invitee][invited] = pGroupInfo[playerid][gid];
 	new string[150], pname[24];
 	GetPlayerName(invitee, pname, 24);
 	format(string, sizeof(string), "You have been invited to join group %s (%d), Use /groupjoin %d to join.", GroupInfo[pGroupInfo[playerid][gid]][grname], pGroupInfo[playerid][gid], pGroupInfo[playerid][gid]);
	SendClientMessage(invitee, LIGHTGREEN, string);
 	GetPlayerName(invitee, pname, 24);
	format(string, sizeof(string), "You have invited %s (%d) to join the group.", pname, invitee);
	SendClientMessage(playerid, ORANGE, string);
 	return true;
}

CMD:groupleader(playerid, params[])
{
	new invitee;
	if(pGroupInfo[playerid][order] != 1) return SendClientMessage(playerid, RED, "Only the leader of the group can change group leaders.");
  	if(sscanf(params, "u", invitee)) return SendClientMessage(playerid, RED, "[USAGE]: /groupleader [playerid]");
	if(!IsPlayerConnected(invitee)) return SendClientMessage(playerid, RED, "Player not found.");
	if(invitee == playerid) return SendClientMessage(playerid, RED, "You are already group leader.");
	if(pGroupInfo[playerid][gid] != pGroupInfo[invitee][gid]) return SendClientMessage(playerid, RED, "That player is not in the group.");
	ChangeMemberOrder(pGroupInfo[playerid][gid], 1);
	pGroupInfo[playerid][order] = GroupMembers(pGroupInfo[playerid][gid]);
	return true;
}

CMD:groupjoin(playerid, params[])
{
	new group;
	if(pGroupInfo[playerid][gid] != -1) return SendClientMessage(playerid, RED, "You must leave your current group to join another.");
  	if(sscanf(params, "d", group)) return SendClientMessage(playerid, RED, "[USAGE]: /groupjoin [group id]");
	if(group == pGroupInfo[playerid][invited] && pGroupInfo[playerid][invited] != -1) return GroupJoin(playerid, pGroupInfo[playerid][invited]);
	if(!GroupInfo[group][active]) return SendClientMessage(playerid, RED, "That group dont exist.");
	pGroupInfo[playerid][attemptjoin] = group;
	new string[150], pname[24];
	GetPlayerName(playerid, pname, 24);
	format(string, sizeof(string), "You have requested to join group %s (%d), please wait to be accepted.", GroupInfo[group][grname], group);
	SendClientMessage(playerid, LIGHTGREEN, string);
	format(string, sizeof(string), "%s (%d) has requested to join the group, use /groupinvite %s/%d to accept.", pname, playerid, pname, playerid);
	SendMessageToLeader(group, string);
	return true;
}

CMD:groupkick(playerid, params[])
{
	new kickee;
	if(pGroupInfo[playerid][order] != 1) return SendClientMessage(playerid, 0xFF0000, "Only the leader of the group can kick group members.");
  	if(sscanf(params, "u", kickee)) return SendClientMessage(playerid, RED, "[USAGE]: /groupkick [playerid]");
	if(!IsPlayerConnected(kickee)) return SendClientMessage(playerid, RED, "Player not found.");
	if(kickee == playerid) return SendClientMessage(playerid, RED, "You cant kick yourself, use /groupleave");
	if(pGroupInfo[playerid][gid] != pGroupInfo[kickee][gid]) return SendClientMessage(playerid, RED, "That player is not in the group.");
	LeaveGroup(kickee, 1);
	return true;
}

CMD:groupmessage(playerid, params[])
{
	new msg[64];
	if(pGroupInfo[playerid][gid] == -1) return SendClientMessage(playerid, RED, "You are not in a group.");
  	if(sscanf(params, "s[64]", msg)) return SendClientMessage(playerid, RED, "[USAGE]: /groupmessage [message]");
  	if(strlen(msg) < 1 || strlen(msg) > 64) return SendClientMessage(playerid, RED, "Group messages can only contain 1-64 characters.");
	new pname[24], string[140+24];
	GetPlayerName(playerid, pname, 24);
	format(string, sizeof(string), "Group Member %s (%d): %s", pname, playerid, msg);
	SendMessageToAllGroupMembers(pGroupInfo[playerid][gid], string);
	return true;
}


CMD:grouplist(playerid, params[])
{
	new group;
  	if(sscanf(params, "d", group)) return SendClientMessage(playerid, RED, "[USAGE]: /grouplist [group id]");
  	if(!GroupInfo[group][active]) return SendClientMessage(playerid, RED, "That group dont exist.");
	{
 		DisplayGroupMembers(pGroupInfo[playerid][gid], playerid);
	}
   	//DisplayGroupMembers(group, playerid); //Showing twice? ^^
	return true;
}

CMD:groups(playerid, params[])
{
    ListGroups(playerid);
    return true;
}

CMD:gcmds(playerid, params[])
{
	ShowPlayerDialog(playerid, GCMDS_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Group Commands", "{FFFFFF}/groupcreate(/grc) /groupjoin(/grj) /groupleave(/grl) /groupinvite(/gri)\n/groupleader(/grlead) /groupkick(/grk) /groupmessage(/gm) /grouplist(/grlist) /groups", "Ok", "");
    return true;
}

CMD:closehanger(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773) || IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773 + 20.0))
	    {
	        MoveObject(hanger1, 2151.81958008, 2409.79785156, 78.44499207, 2);
	        MoveObject(hanger1, 2151.81958008, 2409.79785156, 78.44499207, 2);
	        MoveObject(hanger2, 2160.73437500, 2409.79785156, 78.44499207, 2);
	        MoveObject(hanger3, 2151.81958008, 2417.00878906, 78.44499207, 2);
	        MoveObject(hanger4, 2160.73437500, 2417.00878906, 78.44499207, 2);
			SendClientMessage(playerid, YELLOW, "Hanger CLOSED.");
		}
	    return true;
	}
	else if(PlayerInfo[playerid][vLevel] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773) || IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773 + 20.0))
	    {
	        MoveObject(hanger1, 2151.81958008, 2409.79785156, 78.44499207, 2);
	        MoveObject(hanger2, 2160.73437500, 2409.79785156, 78.44499207, 2);
	        MoveObject(hanger3, 2151.81958008, 2417.00878906, 78.44499207, 2);
	        MoveObject(hanger4, 2160.73437500, 2417.00878906, 78.44499207, 2);
			SendClientMessage(playerid, YELLOW, "Hanger CLOSED.");
		}
	    return true;
	}
	else
	{
		SendClientMessage(playerid, RED, "Only admins and vips can use this command.");
	}
	return true;
}

CMD:openhanger(playerid, params[])
{
	if(PlayerInfo[playerid][aLevel] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773) || IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773 + 20.0))
	    {
	        MoveObject(hanger1, 2151.81958008, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger2, 2160.73437500, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger3, 2151.81958008, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger4, 2160.73437500, 2423.4087, 78.44499207, 2);
			SendClientMessage(playerid, YELLOW, "Hanger OPENED.");
		}
	    return true;
	}
	else if(PlayerInfo[playerid][vLevel] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773) || IsPlayerInRangeOfPoint(playerid, 20.0, 2159.2090,2414.2146,65.2773 + 20.0))
	    {
	        MoveObject(hanger1, 2151.81958008, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger2, 2160.73437500, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger3, 2151.81958008, 2423.4087, 78.44499207, 2);
	        MoveObject(hanger4, 2160.73437500, 2423.4087, 78.44499207, 2);
			SendClientMessage(playerid, YELLOW, "Hanger OPENED.");
		}
	    return true;
	}
	else
	{
		SendClientMessage(playerid, RED, "Only admins and vips can use this command.");
	}
	return true;
}

CMD:closehq(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_FBI) return SendClientMessage(playerid, RED, "This command is restricted to FBI Agents");
	//FBI Gate
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2517.082275, 2346.282714, 13.300230))
	{
		MoveObject(FBIGate, 2517.082275, 2346.282714, 13.300230, 2);
		SendClientMessage(playerid, YELLOW, "Security gate CLOSED.");
	}
	return true;
}

CMD:closepd(playerid, params[])
{
	if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "This command is restricted to Law Enforcement");
	//LVPD Gate 1
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2335.01538086, 2444.08398438, 7.29924774))
	{
		MoveObject(PDGate1, 2335.01538086, 2444.08398438, 7.29924774, 2);
		SendClientMessage(playerid, YELLOW, "Security gate CLOSED.");
		return true;
	}
	//LVPD Gate 2
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2293.96020508,2499.24804688,5.58859539))
	{
		MoveObject(PDGate2, 2293.96020508,2499.24804688,5.58859539, 2);
		SendClientMessage(playerid, YELLOW, "Security gate CLOSED.");
	}
	return true;
}

CMD:openhq(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_FBI) return SendClientMessage(playerid, RED, "This command is restricted to FBI Agents");
	//FBI Gate
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2517.082275, 2346.282714, 13.300230))
	{
		MoveObject(FBIGate, 2517.082275, 2346.282714, 05.300230, 2);
		SendClientMessage(playerid, YELLOW, "Security gate OPENED.");
	}
	return true;
}

CMD:openpd(playerid, params[])
{
	if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "This command is restricted to Law Enforcement");
	//LVPD Gate 1
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2335.01538086,2444.08398438,7.29924774))
	{
		MoveObject(PDGate1, 2335.01538086, 2444.08398438, -1.29924774, 2);
		SendClientMessage(playerid, YELLOW, "Security gate OPENED.");
		return true;
	}
	//LVPD Gate 2
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 2293.96020508, 2499.24804688, 5.58859539))
	{
		MoveObject(PDGate2, 2293.96020508, 2499.24804688, 13.58859539, 2);
		SendClientMessage(playerid, YELLOW, "Security gate OPENED.");
	}
	return true;
}

CMD:robbiz(playerid, params[])
{
    new chance = random(3), bizowner = GetID(BizInfo[BizRobCP[playerid]][bOwner]);
	if(BizRobCP[playerid] == -1) return SendClientMessage(playerid, RED, "You must be in a business checkpoint to use this command.");
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
	if(bizowner == playerid) return SendClientMessage(playerid, RED, "You cant rob your own business.");
	if((gettime() - 120) < TimerInfo[playerid][CMD_timer9]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer9] = gettime();
	if(!IsPlayerConnected(bizowner))
	{
	    if((gettime() - 120) < bizrobbed[BizRobCP[playerid]]) return SendClientMessage(playerid, RED, "This business has been robbed recently, try again later.");
		new current_zone;
        current_zone = Player_Zone[playerid];
	    SendClientMessage(playerid, RED, "You've commited a crime (Attempted Business Robbery). Your wanted level has been increased.");
	    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
	    format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has attempted to rob %s at %s", GetName(playerid), playerid, BizInfo[BizRobCP[playerid]][bName], ZoneNames[current_zone][zone_name]);
		CopRadio(BLUE, fstr);
 		format(fstr2, sizeof(fstr2), "%s (%d) has attempted to rob your business at %s.", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
		SendClientMessage(bizowner, RED, fstr2);
		bizrobbed[BizRobCP[playerid]] = gettime();
		return true;
	}
	if(BizInfo[BizRobCP[playerid]][bEarnings] < 10000)
	{
	    if((gettime() - 120) < bizrobbed[BizRobCP[playerid]]) return SendClientMessage(playerid, RED, "This business has been robbed recently, try again later.");
		new current_zone;
        current_zone = Player_Zone[playerid];
	    SendClientMessage(playerid, RED, "You've commited a crime (Attempted Business Robbery). Your wanted level has been increased.");
	    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
	    format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has attempted to rob %s at %s", GetName(playerid), playerid, BizInfo[BizRobCP[playerid]][bName], ZoneNames[current_zone][zone_name]);
		CopRadio(RED, fstr);
 		format(fstr2, sizeof(fstr2), "%s (%d) has attempted to rob your business at %s.", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
		SendClientMessage(bizowner, RED, fstr2);
		bizrobbed[BizRobCP[playerid]] = gettime();
		return true;
	}
	if(chance == 0)
	{
	    if((gettime() - 120) < bizrobbed[BizRobCP[playerid]]) return SendClientMessage(playerid, RED, "This business has been robbed recently, try again later.");
		new current_zone;
        current_zone = Player_Zone[playerid];
	    SendClientMessage(playerid, WHITE, "You are robbing the business, DON'T LEAVE THE CHECKPOINT!");
	    GameTextForPlayer(playerid, "~w~You're ~g~Robbing ~w~The Business...~n~~r~Dont Leave ~w~The ~r~Checkpoint.", 25000, 5);
		format(fstr, sizeof(fstr), "[ROBBERY]: %s (%d) is robbing %s at %s", GetName(playerid), playerid, BizInfo[BizRobCP[playerid]][bName], ZoneNames[current_zone][zone_name]);
		CopRadio(RED, fstr);
 		format(fstr2, sizeof(fstr2), "%s (%d) is robbing your business at %s.", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
		SendClientMessage(bizowner, RED, fstr2);
	    biztimer{playerid} = SetTimerEx("BizRob", 25000, false, "d", playerid);
   		ApplyAnimation(playerid,"ped","ARRESTgun",4.1,0,1,1,1,1);
    	IsPlayerRobbingBiz{playerid} = true;
		bizrobbed[BizRobCP[playerid]] = gettime();
		return true;
	}
	else if(chance == 1 || chance == 2)
	{
	    if((gettime() - 120) < bizrobbed[BizRobCP[playerid]]) return SendClientMessage(playerid, RED, "This business has been robbed recently, try again later.");
		new current_zone;
        current_zone = Player_Zone[playerid];
	    SendClientMessage(playerid, RED, "You've commited a crime (Attempted Business Robbery). Your wanted level has been increased.");
	    SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
	    format(fstr, sizeof(fstr), "[DISPATCH]: Suspect %s (%d) has attempted to rob %s at %s", GetName(playerid), playerid, BizInfo[BizRobCP[playerid]][bName], ZoneNames[current_zone][zone_name]);
		CopRadio(RED, fstr);
 		format(fstr2, sizeof(fstr2), "%s (%d) has attempted to rob your business at %s.", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
		SendClientMessage(bizowner, RED, fstr2);
		bizrobbed[BizRobCP[playerid]] = gettime();
	}
	return true;
}

CMD:blowbomb(playerid,params[])
{
    if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
	for(new v = 0; v < MAX_VEHICLES; v++)
	{
	    if(VehicleBombOwner[v] != playerid) continue;
	  	if(BomberStage{playerid} != 1) return SendClientMessage(playerid, RED, "You dont have any bombs attached to any vehicles.");
	  	if(IsPlayerInAnyVehicle(playerid) && GetVehicleDriverID(v) == playerid || GetPlayerVehicleID(playerid) == v) return SendClientMessage(playerid, RED, "You cant blow a vehicle up when your in it.");
		{
			new Float:x, Float:y, Float:z;
	       	GetVehiclePos(v, x, y, z);
			CreateExplosion(x, y, z, 7, 10);
 			CreateExplosion(x + 5.0, y, z, 7, 10);
 			CreateExplosion(x, y + 5.0, z, 7, 10);
 			CreateExplosion(x, y, z + 5.0, 7, 10);
	      	SetVehicleHealth(v, 0.0);
 			VehicleBombOwner[v] = INVALID_PLAYER_ID;
         	SendClientMessage(playerid, LIGHTGREEN, "The bomb has exploded.");
         	BomberStage{playerid} = 0;
        	if(GetVehicleDriverID(v) != INVALID_PLAYER_ID)
          	{
            	new msg[150];
	      		SetPlayerHealth(GetVehicleDriverID(v), 0.0);
            	format(msg, sizeof(msg), "%s (%d) has died in a massive vehicle explosion...", GetName(GetVehicleDriverID(v)), GetVehicleDriverID(v));
            	SendClientMessageToAll(PINK, msg);
          		CallRemoteFunction("OnPlayerDeath", "ddd", GetVehicleDriverID(v), playerid, 40);
          	}
			return true;
		}
	}
	return true;
}

CMD:plus(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(HasSpawned{playerid} == false) return SendClientMessage(playerid, RED, "You must be spawned before you can use this command.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use this command in a vehicle.");
	new coordinate[150], Float:distance, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(sscanf(params, "s[150]f", coordinate, distance)) return SendClientMessage(playerid, RED, "[USAGE]: /plus [x/y/z] [distance]");
    if(strfind(coordinate, "x", false) != -1)
    {
        SetPlayerPos(playerid, x + distance, y, z);
    }
    else if(strfind(coordinate, "y", false) != -1)
    {
        SetPlayerPos(playerid, x, y + distance, z);
    }
    else if(strfind(coordinate, "z", false) != -1)
    {
        SetPlayerPos(playerid, x, y, z + distance);
    }
    else
    {
        SendClientMessage(playerid, RED, "The coord can only be x, y or z.");
    }
    return true;
}

CMD:minus(playerid,params[])
{
	if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    if(HasSpawned{playerid} == false) return SendClientMessage(playerid, RED, "You must be spawned before you can use this command.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "You cant use this command in a vehicle.");
	new coordinate[150], Float:distance, Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    if(sscanf(params, "s[150]f", coordinate, distance)) return SendClientMessage(playerid, RED, "[USAGE]: /minus [x/y/z] [distance]");
    if(strfind(coordinate, "x", false) != -1)
    {
        SetPlayerPos(playerid, x - distance, y, z);
    }
    else if(strfind(coordinate, "y", false) != -1)
    {
        SetPlayerPos(playerid, x, y - distance, z);
    }
    else if(strfind(coordinate, "z", false) != -1)
    {
        SetPlayerPos(playerid, x, y, z - distance);
    }
    else
    {
        SendClientMessage(playerid, RED, "The coord can only be x, y or z.");
    }
    return true;
}

CMD:dn(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly, slz-2);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly, slz-2);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:up(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly, slz+5);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly, slz+5);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fly(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2) {
        new Float:px, Float:py, Float:pz, Float:pa;
        GetPlayerFacingAngle(playerid,pa);
        if(pa >= 0.0 && pa <= 22.5) {             //n1
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py+30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
        }
        if(pa >= 332.5 && pa < 0.0) {             //n2
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py+30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
        }
        if(pa >= 22.5 && pa <= 67.5) {            //nw
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-15, py+15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-15, py+15, pz+5);
			}
        }
        if(pa >= 67.5 && pa <= 112.5) {           //w
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-30, py, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-30, py, pz+5);
			}
        }
        if(pa >= 112.5 && pa <= 157.5) {          //sw
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px-15, py-15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px-15, py-15, pz+5);
			}
        }
        if(pa >= 157.5 && pa <= 202.5) {          //s
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px, py-30, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px, py-30, pz+5);
			}
        }
        if(pa >= 202.5 && pa <= 247.5) {          //se
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+15, py-15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+15, py-15, pz+5);
			}
        }
        if(pa >= 247.5 && pa <= 292.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+30, py, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+30, py, pz+5);
			}
        }
        if(pa >= 292.5 && pa <= 332.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, px+15, py+15, pz+5);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, px+15, py+15, pz+5);
			}
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:lt(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx-2, sly, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx-2, sly, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:rt(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx+2, sly, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx+2, sly, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fd(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly+2, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly+2, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:bk(playerid, params[])
{
    if (PlayerInfo[playerid][aLevel] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, slx, sly-2, slz);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, slx, sly-2, slz);
		}
        return 1;
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:spec(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    new targetid, string[64];
    if(sscanf(params,"u", targetid)) return SendClientMessage(playerid, RED, "[USAGE]: /spec [playerid]");
    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, "Player not found.");
    if(HasSpawned{targetid} == false) return SendClientMessage(playerid, RED, "The player must be spawned before you can spectate them.");
    if(targetid == playerid) return SendClientMessage(playerid, RED,"You cant spectate yourself.");
    if(IsOnduty{playerid} == 1)
	{
        IsOnduty{playerid} = 0;
		SetPlayerHealth(playerid, 100.0);
	}
    IsAdminSpectating{playerid} = true;
    IsPlayerBeingSpectated{targetid} = true;
    PlayerBeingSpectatedBy[targetid] = playerid;
	SpecInfo[playerid][IsSpectating] = targetid;
	TogglePlayerSpectating(playerid, true);
    if(IsPlayerInAnyVehicle(targetid))
    {
        SetPlayerInterior(playerid, GetPlayerInterior(targetid));
        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
        format(fstr, sizeof(fstr), "{FFFFFF}%s (%d) Total Wealth", GetName(targetid), targetid);
        format(fstr2, sizeof(fstr2), "{FFFFFF}Holding: $%s\nBank: $%s\nCredit: $%s\nEarnings: $%s", number_format(GetPlayerCash(targetid)) , number_format(BankInfo[targetid][Balance]) , number_format(BankInfo[targetid][Credit]), number_format(GetPlayersBizEarnings(targetid)));
    	ShowPlayerDialog(playerid, WEALTH_DIALOG, DIALOG_STYLE_MSGBOX, fstr, fstr2, "Ok", "");
    	return 1;
    }
    else
    {
        SetPlayerInterior(playerid, GetPlayerInterior(targetid));
        SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
        PlayerSpectatePlayer(playerid, targetid);
        format(fstr, sizeof(fstr), "{FFFFFF}%s (%d) Total Wealth", GetName(targetid), targetid);
        format(fstr2, sizeof(fstr2), "{FFFFFF}Holding: $%s\nBank: $%s\nCredit: $%s\nEarnings: $%s", number_format(GetPlayerCash(targetid)) , number_format(BankInfo[targetid][Balance]) , number_format(BankInfo[targetid][Credit]), number_format(GetPlayersBizEarnings(targetid)));
    	ShowPlayerDialog(playerid, WEALTH_DIALOG, DIALOG_STYLE_MSGBOX, fstr, fstr2, "Ok", "");
    }
    format(string, sizeof(string), "[SPEC]: You are now spectating %s (%d)", GetName(targetid), targetid);
    SendClientMessage(playerid, YELLOW, string);
	return true;
}

CMD:specoff(playerid, params[])
{
    if(PlayerInfo[playerid][aLevel] < 1){ return 0; }
    IsPlayerBeingSpectated{SpecInfo[playerid][IsSpectating]} = false;
    PlayerBeingSpectatedBy[SpecInfo[playerid][IsSpectating]] = -1;
	SpecInfo[playerid][IsSpectating] = -1;
    IsAdminSpectating{playerid} = false;
    TogglePlayerSpectating(playerid, false);
    SendClientMessage(playerid, YELLOW, "[SPEC]: Spectating mode turned OFF.");
    return true;
}

CMD:viewinterior(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInHouse") == 1) return SendClientMessage(playerid, RED, "You must be at a for-sale house door to use this command.");
    if(GetPVarInt(playerid, "LastHouseCP") != -1)
    {
        if(!strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), "Nobody", false))
        {
			SetPVarInt(playerid, "IsInHouse", 1);
			SetPlayerHouseInterior(playerid, GetPVarInt(playerid, "LastHouseCP"));
    		SendClientMessage(playerid, YELLOW, "You are now viewing the interior.");
    		return true;
    	}
		else
		{
	    	SendClientMessage(playerid, RED, "This house is owned by someone.");
		}
    	return true;
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're not at a valid for-sale house door location.");
	}
	return true;
}

CMD:raid(playerid, params[])
{
	if((gettime() - 60) < TimerInfo[playerid][CMD_timer36]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer36] = gettime();
	if(GetTeam{playerid} == CLASS_CIV || GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Only law enforcement can use this command.");
    if(GetPVarInt(playerid, "IsInHouse") == 1) return SendClientMessage(playerid, RED, "You must be at a house door to use this command.");
    if(GetPVarInt(playerid, "LastHouseCP") != -1)
    {
        if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), "Nobody", false))
        {
            SetPVarInt(playerid, "IsInHouse", 1);
			SetPlayerHouseInterior(playerid, GetPVarInt(playerid, "LastHouseCP"));
			if(IsPlayerConnected(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")))))
			{
				new string[150], current_zone;
        		current_zone = Player_Zone[playerid];
				format(string, sizeof(string), "You house has been raided by law enforcement at %s", ZoneNames[current_zone][zone_name]);
				SendClientMessage(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP"))), RED, string);
			}
			return true;
		}
		else
		{
	    	SendClientMessage(playerid, RED, "This house is not owned by anybody.");
		}
    	return true;
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're not at a valid house door location.");
	}
	return true;
}

CMD:breakin(playerid, params[])
{
	if(GetTeam{playerid} != CLASS_CIV) return SendClientMessage(playerid, RED, "Only civilians can use this command.");
    if(GetPVarInt(playerid, "IsInHouse") == 1) return SendClientMessage(playerid, RED, "You must be at a house door to use this command.");
	if((gettime() - 60) < TimerInfo[playerid][CMD_timer37]) return SendClientMessage(playerid, RED, "Please wait before using this command again.");
    TimerInfo[playerid][CMD_timer37] = gettime();
    if(GetPVarInt(playerid, "LastHouseCP") != -1)
    {
        if(strcmp(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), "Nobody", false))
        {
			new chance = random(5);
			switch(chance)
			{
			    case 0:
			    {
            		SetPVarInt(playerid, "IsInHouse", 1);
					SetPlayerHouseInterior(playerid, GetPVarInt(playerid, "LastHouseCP"));
					new string[150], current_zone;
        			current_zone = Player_Zone[playerid];
					format(string, sizeof(string), "[DISPATCH]: %s (%d) has broken into %s's house at %s", GetName(playerid), playerid, GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), ZoneNames[current_zone][zone_name]);
					CopRadio(BLUE, string);
	    			SendClientMessage(playerid, RED, "You've commited a crime (Breaking and Entering). Your wanted level has been increased.");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
					if(IsPlayerConnected(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")))))
					{
						new string2[150];
						format(string2, sizeof(string2), "%s (%d) has broken into your house at %s", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
						SendClientMessage(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP"))), RED, string2);
					}
					return true;
                }
                case 1..4:
                {
                    new string[150], current_zone;
        			current_zone = Player_Zone[playerid];
					format(string, sizeof(string), "[DISPATCH]: %s (%d) has attempted to break into %s's house at %s", GetName(playerid), playerid, GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")), ZoneNames[current_zone][zone_name]);
					CopRadio(BLUE, string);
	    			SendClientMessage(playerid, RED, "You've commited a crime (Attempted Breaking and Entering). Your wanted level has been increased.");
					SetPlayerWantedLevel(playerid, GetPlayerWantedLevel(playerid) + 4);
					if(IsPlayerConnected(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP")))))
					{
						new string2[150];
						format(string2, sizeof(string2), "%s (%d) has attempted to break into your house at %s", GetName(playerid), playerid, ZoneNames[current_zone][zone_name]);
						SendClientMessage(GetID(GetHouseOwner(GetPVarInt(playerid, "LastHouseCP"))), RED, string2);
					}
                }
			}
            return true;
		}
		else
		{
	    	SendClientMessage(playerid, RED, "This house is not owned by anybody.");
		}
    	return true;
	}
	else
	{
	    SendClientMessage(playerid, RED, "You're not at a valid house door location.");
	}
	return true;
}

CMD:sellgun(playerid, params[])
{
	if(GetTeam{playerid} == CLASS_MEDIC) return SendClientMessage(playerid, RED, "Medics cannot use this command!");
	if(IsACop(playerid)) return SendClientMessage(playerid, RED, "Law Enforcement cannot use this command!");
	new customer, gun, price, string1[150], string2[150];
    if(IsJailed{playerid} == true || IsCaged{playerid} == true) return SendClientMessage(playerid, RED, "You cant use this comand while you are jailed.");
	if(sscanf(params, "udd", customer, gun, price)) return SendClientMessage(playerid, RED, "[USAGE]: /sellgun [playerid] [gun] [price]") && SendClientMessage(playerid, WHITE, "Gun/s: 1=Deagle[50 MATS] 2=MP5[100 MATS] 3=Combat[200 MATS] 4=M4[250 MATS] 5=Sniper[500 MATS]");
	if(!IsPlayerConnected(customer)) return SendClientMessage(playerid, RED, "Player not found.");
	new Float:cx, Float:cy, Float:cz;
	GetPlayerPos(customer, cx, cy, cz);
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) return SendClientMessage(playerid, RED, "You must be near the player to offer a gun to them.");
	if(gun == 1)
	{
	    if(PlayerInfo[playerid][pMaterials] < 50) return SendClientMessage(playerid, RED, "Invalid materials, you need atleast 50 materials to fabricate this weapon.");
		format(string1, sizeof(string1), "%s (%d) has offered you a Desert Eagle[Infinate Ammo] for $%s, use /(accept/decline)gun", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) a Desert Eagle[Infinate Ammo] for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id5[customer] = playerid;
		offer_price5[customer] = price;
		gunbuying[customer] = gun;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
		return true;
	}
	else if(gun == 2)
	{
	    if(PlayerInfo[playerid][pMaterials] < 100) return SendClientMessage(playerid, RED, "Invalid materials, you need atleast 100 materials to fabricate this weapon.");
		format(string1, sizeof(string1), "%s (%d) has offered you a MP5[Infinate Ammo] for $%s, use /(accept/decline)gun", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) a MP5[Infinate Ammo] for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id5[customer] = playerid;
		offer_price5[customer] = price;
		gunbuying[customer] = gun;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
		return true;
	}
	else if(gun == 3)
	{
	    if(PlayerInfo[playerid][pMaterials] < 200) return SendClientMessage(playerid, RED, "Invalid materials, you need atleast 200 materials to fabricate this weapon.");
		format(string1, sizeof(string1), "%s (%d) has offered you a Combat Shotgun[Infinate Ammo] for $%s, use /(accept/decline)gun", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) a Combat Shotgun[Infinate Ammo] for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id5[customer] = playerid;
		offer_price5[customer] = price;
		gunbuying[customer] = gun;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
		return true;
	}
	else if(gun == 4)
	{
	    if(PlayerInfo[playerid][pMaterials] < 250) return SendClientMessage(playerid, RED, "Invalid materials, you need atleast 250 materials to fabricate this weapon.");
		format(string1, sizeof(string1), "%s (%d) has offered you a M4[Infinate Ammo] for $%s, use /(accept/decline)gun", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) a M4[Infinate Ammo] for $%s, please await response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id5[customer] = playerid;
		offer_price5[customer] = price;
		gunbuying[customer] = gun;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
		return true;
	}
	else if(gun == 5)
	{
	    if(PlayerInfo[playerid][pMaterials] < 500) return SendClientMessage(playerid, RED, "Invalid materials, you need atleast 500 materials to fabricate this weapon.");
		format(string1, sizeof(string1), "%s (%d) has offered you a Sniper Rifle[Infinate Ammo] for $%s, use /(accept/decline) gun", GetName(playerid), playerid, number_format(price));
		SendClientMessage(customer, WHITE, string1);
		format(string2, sizeof(string2), "You have offered %s (%d) a Sniper Rifle[Infinate Ammo] for $%s, please await an response.", GetName(customer), customer, number_format(price));
		SendClientMessage(playerid, WHITE, string2);
		offerer_id5[customer] = playerid;
		offer_price5[customer] = price;
		gunbuying[customer] = gun;
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", playerid);
        SetTimerEx("AcceptCMDExpire", 30000, false, "d", customer);
		return true;
	}
	else
	{
	    SendClientMessage(playerid, RED, "Invalid gun id.");
		SendClientMessage(playerid, WHITE, "Gun/s: 1=Deagle[50 MATS] 2=MP5[100 MATS] 3=Combat[200 MATS] 4=M4[250 MATS] 5=Sniper[500 MATS]");
	}
    new astring[100];
    format(astring, sizeof(astring),"%s (%d) typed: /sellgun %d %d %d", GetName(playerid), playerid, customer, gun, price);
    Log("logs/commands.log", astring);
	return true;
}

CMD:calls(playerid, params[])
{
    new count = 0;
    if(GetPlayerSkill(playerid) == 3 || GetPlayerSkill(playerid) == 4
	|| GetPlayerSkill(playerid) == 10 || GetPlayerSkill(playerid) == 5
	|| GetPlayerSkill(playerid) == 2 || GetPlayerSkill(playerid) == 14
	|| GetPlayerSkill(playerid) == 18)
	{
		foreach(Player, i)
		{
			if(GetPlayerSkill(playerid) == 2)
			{
			    if(HasMechCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Mechanic requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 3)
			{
			    if(HasFoodCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Food Vendor requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 4)
			{
			    if(HasStreetCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Street Vendor requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 5)
			{
				if(HasWeaponsCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Arms Dealer requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 10)
			{
			    if(HasWhoreCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Whore requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 14)
			{
			    if(HasLawyerCall[i] > 0 || HasLawyer2Call[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    if(HasLawyerCall[i]) {
				    	format(fstr, sizeof(fstr), "Lawyer requested by %s (%d) at, %s (Free)", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    }
				    else {
				    	format(fstr, sizeof(fstr), "Lawyer requested by %s (%d) at, %s (Defense)", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    }
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
			else if(GetPlayerSkill(playerid) == 18)
			{
			    if(HasCraftsCall[i] > 0)
			    {
					new current_zone;
				 	current_zone = Player_Zone[i];
				    SendClientMessage(playerid, BLUE, "Listing all Calls:");
				    format(fstr, sizeof(fstr), "Craftsman requested by %s (%d) at, %s", GetPlayerNameEx(i), i, ZoneNames[current_zone][zone_name]);
				    SendClientMessage(playerid, WHITE, fstr);
				    count++;
				}
			}
		}
		if(count == 0) { SendClientMessage(playerid, RED, "There are currently no calls at the moment."); }
	}
	else
	{
		SendClientMessage(playerid, RED, "Your class or skill cannot view the calls list!");
	}
	return true;
}

CMD:rape(playerid, params[])
{
	new customer, Float:cx, Float:cy, Float:cz, string[150];
	new chance = random(5), closestplayer = GetClosestPlayerID(playerid);
    if(GetPlayerSkill(playerid) == 14) {
		if(sscanf(params, "U", customer)) return SendClientMessage(playerid, RED, "[USAGE]: /rape [playerid]");
		if(customer == playerid) return SendClientMessage(playerid, RED, "You cant rape yourself!");
		if(IsNull(params)) {
		    if(closestplayer) {
			    switch(chance) {
			        case 0,1,2,3: {
						SendClientMessage(closestplayer, COLOR_GREY, "Someone just tried to rape you and failed.");
						SendClientMessage(playerid, COLOR_GREY, "You tried to rape someone and failed.");
					}
			        case 4,5: {
						SendClientMessage(closestplayer, COLOR_GREY, "Someone just tried to rape you and succeeded.");
						SendClientMessage(playerid, COLOR_GREY, "You tried to rape someone and succeeded.");
					}
				}
			}
			else {
				SendClientMessage(closestplayer, RED, "No one is close enough to rape!");
			}
		}
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz)) {
			switch(chance) {
			    case 0,1,2,3: {
					SendClientMessage(closestplayer, COLOR_GREY, "Someone just tried to rape you and failed.");
					SendClientMessage(playerid, COLOR_GREY, "You tried to rape someone and failed.");
				}
			    case 4,5: {
					SendClientMessage(closestplayer, COLOR_GREY, "Someone just tried to rape you and succeeded.");
					SendClientMessage(playerid, COLOR_GREY, "You tried to rape someone and succeeded.");
				}
			}
		}
        else {
        	SendClientMessage(playerid, COLOR_GREY, "You must be near someone to rape them.");
        }
	}
	else {
	    SendClientMessage(playerid, RED, "Only rapists can rape people.");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /rape %d", GetName(playerid), playerid, customer);
	Log("logs/commands.log", astring);
	return 1;
}

CMD:free(playerid, params[])
{
	new customer, price, Float:cx, Float:cy, Float:cz, string1[150], string2[150];
    if(GetPlayerSkill(playerid) == 14)
	{
		if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /free [playerid] [price]");
		if(customer == playerid) return SendClientMessage(playerid, RED, "You cant free yourself from jail!");
		if(IsJailed{customer} == false) return  SendClientMessage(playerid, RED, "This person is not in jail, You cant free them!");
		if(price < 2000) { SendClientMessage(playerid, RED, "Price cannot be lower than $2,000!"); return 1; }
		if(price > 25000) { SendClientMessage(playerid, RED, "Price cannot be higher than $25,000!"); return 1; }
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
		{
			format(string1, sizeof(string1), "Lawyer %s (%d) has offered to free you for $%s. Use /accept lawyer.", GetPlayerNameEx(playerid), playerid, number_format(price));
			SendClientMessage(customer, COLOR_LIGHTBLUE, string1);
			format(string2, sizeof(string2), "You've offered to free %s (%d) for $%s, please await their response.", GetPlayerNameEx(customer), customer, number_format(price));
			SendClientMessage(playerid, WHITE, string2);
            if(HasLawyerCall[playerid] > 0) { HasLawyerCall[playerid] = 0; }

	        SetPVarInt(customer, "Skill_FREEOfferer", playerid);
	        SetPVarInt(customer, "Skill_FREEPrice", price);
		}
        else {
        	SendClientMessage(playerid, COLOR_GREY, "You must be near the player to offer Legal services to them.");
        }
	    SendClientMessage(playerid, RED, "Sorry! This command hasn't been finished yet!");
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only Lawyers can free people from prison!");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /free %d %d", GetName(playerid), playerid, customer, price);
	Log("logs/commands.log", astring);
	return 1;
}

CMD:defend(playerid, params[])
{
	new customer, price, Float:cx, Float:cy, Float:cz, string1[150], string2[150];
    if(GetPlayerSkill(playerid) == 14)
	{
		if(sscanf(params, "ud", customer, price)) return SendClientMessage(playerid, RED, "[USAGE]: /defend [playerid] [price]");
		if(customer == playerid) return SendClientMessage(playerid, RED, "You cant defend yourself!");
		if(IsJailed{customer} == false) return  SendClientMessage(playerid, RED, "This person is not wanted, You cant defend them!");
		if(price < 5000) { SendClientMessage(playerid, RED, "Price cannot be lower than $5,000!"); return 1; }
		if(price > 50000) { SendClientMessage(playerid, RED, "Price cannot be higher than $50,000!"); return 1; }
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
		{
			format(string1, sizeof(string1), "Lawyer %s (%d) has offered to defend you for $%s. Use /accept defense.", GetPlayerNameEx(playerid), playerid, number_format(price));
			SendClientMessage(customer, COLOR_LIGHTBLUE, string1);
			format(string2, sizeof(string2), "You've offered to defend %s (%d) for $%s, please await their response.", GetPlayerNameEx(customer), customer, number_format(price));
			SendClientMessage(playerid, WHITE, string2);
            if(HasLawyer2Call[playerid] > 0) { HasLawyer2Call[playerid] = 0; }

	        SetPVarInt(customer, "Skill_DEFENDOfferer", playerid);
	        SetPVarInt(customer, "Skill_DEFENDPrice", price);
		}
        else {
        	SendClientMessage(playerid, COLOR_GREY, "You must be near the player to offer Legal services to them.");
        }
	    SendClientMessage(playerid, RED, "Sorry! This command hasn't been finished yet!");
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only Lawyers can represent people as a defense!");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /defend %d %d", GetName(playerid), playerid, customer, price);
	Log("logs/commands.log", astring);
	return 1;
}

CMD:sell(playerid, params[])
{
	new customer, Float:cx, Float:cy, Float:cz, string1[150], string2[150];
    if(GetPlayerSkill(playerid) == 3)
	{
		if(customer == playerid) return SendClientMessage(playerid, RED, "You cant sell yourself items. Find another vendor.");
		if(IsJailed{playerid} == true) return  SendClientMessage(playerid, RED, "You cannot sell items while you're in jail.");
		if(IsJailed{customer} == true) return  SendClientMessage(playerid, RED, "This person is in jail, you can't sell them items.");
	    //Add stock for items
		if(sscanf(params, "u", customer)) return SendClientMessage(playerid, RED, "[USAGE]: /sell [playerid]");
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
		{
			format(string1, sizeof(string1), "Vendor %s (%d) has offered to sell you Food Items. Use /accept food to look at their inventory.", GetPlayerNameEx(playerid), playerid);
			SendClientMessage(customer, COLOR_LIGHTBLUE, string1);
			format(string2, sizeof(string2), "You have offered to sell %s (%d) Food items, please await response.", GetPlayerNameEx(customer), customer);
			SendClientMessage(playerid, WHITE, string2);

	        SetPVarInt(customer, "Skill_FOODOfferer", playerid);
		}
        else {
        	SendClientMessage(playerid, COLOR_GREY, "You must be near the player to offer Food services to them.");
        }
	    SendClientMessage(playerid, RED, "Sorry! This command hasn't been finished yet!");
	}
    else if(GetPlayerSkill(playerid) == 4)
	{
		if(customer == playerid) return SendClientMessage(playerid, RED, "You cant sell yourself items. Find another vendor.");
		if(IsJailed{playerid} == true) return  SendClientMessage(playerid, RED, "You cannot sell items while you're in jail.");
		if(IsJailed{customer} == true) return  SendClientMessage(playerid, RED, "This person is in jail, you can't sell them items.");
	    //Add stock for items
		if(sscanf(params, "u", customer)) return SendClientMessage(playerid, RED, "[USAGE]: /sell [playerid]");
		GetPlayerPos(customer, cx, cy, cz);
		if(IsPlayerInRangeOfPoint(playerid, 10.0, cx, cy, cz))
		{
			format(string1, sizeof(string1), "Vendor %s (%d) has offered to sell you Street Items. Use /accept street to look at their inventory.", GetPlayerNameEx(playerid), playerid);
			SendClientMessage(customer, COLOR_LIGHTBLUE, string1);
			format(string2, sizeof(string2), "You have offered to sell %s (%d) Street items, please await response.", GetPlayerNameEx(customer), customer);
			SendClientMessage(playerid, WHITE, string2);

	        SetPVarInt(customer, "Skill_STREETOfferer", playerid);
		}
        else {
        	SendClientMessage(playerid, COLOR_GREY, "You must be near the player to offer Street services to them.");
        }
	    SendClientMessage(playerid, RED, "Sorry! This command hasn't been finished yet!");
	}
	else
	{
	    SendClientMessage(playerid, RED, "Only Food & Street Vendors can sell Items!");
	}
	new astring[100];
	format(astring, sizeof(astring),"%s (%d) typed: /sell %d", GetName(playerid), playerid, customer);
	Log("logs/commands.log", astring);
	return 1;
}

new blah = 0;
task UpdateGamemodeText[5000]()
{
	if(blah == 0)
	{
		blah = 1;
    	SetGameModeText("Cops And Robbers [LV]");
	}
	else
	{
	    blah = 0;
    	SetGameModeText("Cops And Robbers");
	}
}

// Task Name: fpsCounterUpdate
task fpsCounterUpdate[500]()
{
	new string[64];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(TogFPS{i} == 1)
		{
			format(string, sizeof(string), "FPS:%d", pFPS[i]);
			PlayerTextDrawSetString(i, pFPSCounter[i], string);
			PlayerTextDrawSetString(i, CmdMenuTD[0], "_");
		}
	}
	return true;
}

ptask UpdateStatsandSweeper[1000](playerid)
{
	new string[255];
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574) // Street Sweeper
	{
		new veh = GetPlayerVehicleID(playerid);

		new Float:speed_x, Float:speed_y, Float:speed_z, Float:temp_speed, final_speed;
		GetVehicleVelocity(veh, speed_x,speed_y, speed_z);
		temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z)) * 136.666667;
		final_speed = floatround(temp_speed, floatround_round);
		if(final_speed > 0)
		{
	    	GainedMoney++;
			format(string, sizeof(string),"Cleaning Streets~n~Earned: ~g~$%s", number_format(GainedMoney * 19));
			GameTextForPlayer(playerid, string, 1000, 5);
		}
	}
	/*foreach(Player, i)
	{
		if(IsPlayerConnected(i) && IsLoggedIn{i} == 1)
		{
	   		SaveBankStats(i);
    		SaveFightStats(i);
    		SaveSettings(i);
    		SaveUserStats(i);
    		SaveDegreeStats(i);
    	}
	}*/
}

ptask UpdateFuelTimer[15000](playerid)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  	{
		GetVehicleFuel[GetPlayerVehicleID(playerid)] = GetVehicleFuel[GetPlayerVehicleID(playerid)] - 1;
	}
	return 1;
}

ptask ACnR_anticheat[2000](playerid)
{
    if(PlayerInfo[playerid][aLevel] >= 1 || IsPlayerAdmin(playerid)) return 1;
    {
		if(GetPlayerState(playerid) == PLAYER_STATE_NONE) return 1;
        {
			//Anti-Speed Hack
	    	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
        	{
            	if(GetPlayerSpeed(playerid) > MAX_VEHICLE_SPEED)
            	{
                	format(fstr, sizeof(fstr), "[BOT]Elvis has banned %s (%d) | Reason: Speed hacks detected", GetName(playerid), playerid);
	        		SendClientMessageToAll(RED, fstr);
	        		SendClientMessageToAll(WHITE, "[BOT]Elvis: OWNED!");
        			PlayerInfo[playerid][Banned] = 1;
        			GameTextForPlayer(playerid, "~r~Banned", 5000, 5);
        			SendClientMessage(playerid, RED, "You have been banned from ACnR. You were banned by Elvis.(ACnR BOT)");
        			SendClientMessage(playerid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");

			        for(new h = 0; h < MAX_HOUSES; h++)
			        {
			            if(!strcmp(GetHouseOwner(h), GetName(playerid), false))
			            {
			                SellHouse(h);
			            }
			        }
			        for(new b = 0; b < MAX_BUSINESSES; b++)
			        {
			            if(!strcmp(BizInfo[b][bOwner], GetName(playerid), false))
			            {
			                SellBiz(b);
			            }
        			}

        			UnloadPlayerVehicles(playerid);
        			RemoveOwnedVehs(playerid);

					BanEx(playerid, "Speed Hacks Detected");
	        		return 1;
				}
    		}
			//Anti-Airbrake
	    	if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    		{
            	if(IsPlayerSkydiving(playerid) == 0 && IsPlayerUsingParachute(playerid) == 0 && GetPlayerSpeed(playerid) > MAX_ON_FOOT_SPEED)
            	{
                	format(fstr, sizeof(fstr), "[BOT]Elvis has banned %s (%d) | Reason: Airbrake detected", GetName(playerid), playerid);
	        		SendClientMessageToAll(RED, fstr);
	        		SendClientMessageToAll(WHITE, "[BOT]Elvis: OWNED!");
        			PlayerInfo[playerid][Banned] = 1;
        			GameTextForPlayer(playerid, "~r~Banned", 5000, 5);
        			SendClientMessage(playerid, RED, "You have been banned from ACnR. You were banned by Elvis.(ACnR BOT)");
        			SendClientMessage(playerid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");

			        for(new h = 0; h < MAX_HOUSES; h++)
			        {
			            if(!strcmp(GetHouseOwner(h), GetName(playerid), false))
			            {
			                SellHouse(h);
			            }
			        }
			        for(new b = 0; b < MAX_BUSINESSES; b++)
			        {
			            if(!strcmp(BizInfo[b][bOwner], GetName(playerid), false))
			            {
			                SellBiz(b);
			            }
        			}

        			UnloadPlayerVehicles(playerid);
        			RemoveOwnedVehs(playerid);
				
					BanEx(playerid, "Airbrake Detected");
					return 1;
            	}
        	}*/
        	//Anti-Jetpack Cheat
	    	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK)
	    	{
	        	format(fstr, sizeof(fstr), "[BOT]Elvis has banned %s (%d) | Reason: Jetpack detected", GetName(playerid), playerid);
	        	SendClientMessageToAll(RED, fstr);
	        	SendClientMessageToAll(WHITE, "[BOT]Elvis: OWNED!");
        		PlayerInfo[playerid][Banned] = 1;
        		GameTextForPlayer(playerid, "~r~Banned", 5000, 5);
        		SendClientMessage(playerid, RED, "You have been banned from ACnR. You were banned by Elvis.(ACnR BOT)");
        		SendClientMessage(playerid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");
	        
			   	for(new h = 0; h < MAX_HOUSES; h++)
			  	{
			       	if(!strcmp(GetHouseOwner(h), GetName(playerid), false))
			      	{
			       		SellHouse(h);
			      	}
			  	}
			 	for(new b = 0; b < MAX_BUSINESSES; b++)
			 	{
			   		if(!strcmp(BizInfo[b][bOwner], GetName(playerid), false))
			      	{
        				SellBiz(b);
			       	}
			  	}

				UnloadPlayerVehicles(playerid);
        		RemoveOwnedVehs(playerid);
			 
				BanEx(playerid, "Jetpack Detected");
	        	return 1;
	    	}
            //Anti Money Cheat
            if(GetPlayerCash(playerid) != GetPlayerCash(playerid))
            {
                ResetServerCash(playerid);
                UpdateServerCash(playerid, GetPlayerCash(playerid));
            }
            new Float:hp;
            GetPlayerHealth(playerid, hp);
            //Anti Health/God Cheat
            if(hp > 101.0)
            {
            	format(fstr, sizeof(fstr), "[BOT]Elvis has banned %s (%d) | Reason: Health/God hacks detected", GetName(playerid), playerid);
	        	SendClientMessageToAll(RED, fstr);
	        	SendClientMessageToAll(WHITE, "[BOT]Elvis: OWNED!");
        		PlayerInfo[playerid][Banned] = 1;
        		GameTextForPlayer(playerid, "~r~Banned", 5000, 5);
        		SendClientMessage(playerid, RED, "You have been banned from ACnR. You were banned by Elvis.(ACnR BOT)");
        		SendClientMessage(playerid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");
              
			   	for(new h = 0; h < MAX_HOUSES; h++)
			  	{
			       	if(!strcmp(GetHouseOwner(h), GetName(playerid), false))
			      	{
			       		SellHouse(h);
			      	}
			  	}
			 	for(new b = 0; b < MAX_BUSINESSES; b++)
			 	{
			   		if(!strcmp(BizInfo[b][bOwner], GetName(playerid), false))
			      	{
        				SellBiz(b);
			       	}
			  	}

        		UnloadPlayerVehicles(playerid);
        		RemoveOwnedVehs(playerid);
			
				BanEx(playerid, "Health/God Hacks Detected");
	        	return 1;
        	}
            //Anti Weapon Cheat
            for(new w; w < sizeof(BannableWeapons); w++)
    		{
        		if(GetPlayerWeapon(playerid) == BannableWeapons[w])
        		{
            		format(fstr, sizeof(fstr), "[BOT]Elvis has banned %s (%d) | Reason: Weapon hacks detected", GetName(playerid), playerid);
	        		SendClientMessageToAll(RED, fstr);
	        		SendClientMessageToAll(WHITE, "[BOT]Elvis: OWNED!");
        			PlayerInfo[playerid][Banned] = 1;
        			GameTextForPlayer(playerid, "~r~Banned", 5000, 5);
        			SendClientMessage(playerid, RED, "You have been banned from ACnR. You were banned by Elvis.(ACnR BOT)");
        			SendClientMessage(playerid, ORANGE, "If you think this ban is unfair post an appeal at acnr.hostoi.com");
	        	
			        for(new h = 0; h < MAX_HOUSES; h++)
			        {
			            if(!strcmp(GetHouseOwner(h), GetName(playerid), false))
			            {
			                SellHouse(h);
			            }
			        }
			        for(new b = 0; b < MAX_BUSINESSES; b++)
			        {
			            if(!strcmp(BizInfo[b][bOwner], GetName(playerid), false))
			            {
			                SellBiz(b);
			            }
        			}

        			UnloadPlayerVehicles(playerid);
        			RemoveOwnedVehs(playerid);
				
					BanEx(playerid, "Weapon Hacks Detected");
	        		return 1;
        		}
        	}
        	//Auto Ping Kicker
        	if(GetPlayerPing(playerid) >= MAX_PING)
        	{
				format(fstr2, sizeof(fstr2), "[BOT]Elvis has kicked %s (%d) | Reason: Ping reached %d", GetName(playerid), playerid, MAX_PING);
                SendClientMessageToAll(RED, fstr2);
        		GameTextForPlayer(playerid, "~r~Kicked", 5000, 5);
        		SendClientMessage(playerid, RED, "You have been kicked. You were kicked by [BOT]Elvis.");
   				KickEx(playerid);
   				return 1;
        	}
        }
    }
	return 1;
}

ptask ACnR_taxandinterest[3600000](playerid)//1 Hour
{
	if(IsLoggedIn[playerid] == 0 || GetPlayerState(playerid) == PLAYER_STATE_NONE) return 1;
	new string[150], string2[150], string3[150];
	//Interest
	if(BankInfo[playerid][Balance] > 0)
	{
		new interest = BankInfo[playerid][Balance]/64;//1.5%
   		BankInfo[playerid][Balance] = BankInfo[playerid][Balance] + interest;
    	SaveBankStats(playerid);
		format(string, sizeof(string), "[Interest]: You have gained $%s in bank interest.", number_format(interest));
		SendClientMessage(playerid, WHITE, string);
	}
	if(PlayerInfo[playerid][vLevel] < 1)//VIP pass
	{
		//General Taxes
		if(CalculateWealth(playerid) > 1000000 && CalculateWealth(playerid) < 5000000)
		{
			new tax = CalculateWealth(playerid)/128;//0.75%
			BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - tax;
			format(string2, sizeof(string2), "[General Taxes]: You have paid $%s in general taxes.", number_format(tax));
			SendClientMessage(playerid, ORANGE, string2);
			GivePlayerCash(playerid, - tax);
		}

		//Wealth Taxes
		else if(CalculateWealth(playerid) > 5000000)
		{
			new tax = CalculateWealth(playerid)/64;//1.5%
	    	BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - tax;
			format(string2, sizeof(string2), "[Wealth Taxes]: You have paid $%s in wealth taxes.", number_format(tax));
    		SendClientMessage(playerid, ORANGE, string2);
			GivePlayerCash(playerid, - tax);
   		}

   		if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
		{
			SaveBankStats(playerid);
			SaveFightStats(playerid);
			SaveSettings(playerid);
			SaveSkillLevels(playerid);
    		SaveUserStats(playerid);
    		SaveDegreeStats(playerid);
 		}

		//Property Taxes
		new housecount = 0, bizcount = 0;
		if(GetOwnedHouses(playerid) > 0)
		{
				housecount = 1;
		}
		if(GetPlayerOwnedBusinesses(playerid) > 0)
		{
			bizcount = 1;
		}
		if(bizcount == 0 && housecount == 0)
		{
			return 1;
		}
		else if(bizcount == 1 && housecount == 0 || bizcount == 0 && housecount == 1)
		{
			new propertytax = random(5000) + 5000;//Random 10K
			BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - propertytax;
			format(string3, sizeof(string3), "[Property Taxes]: You have paid $%s in property taxes.", number_format(propertytax));
    		SendClientMessage(playerid, ORANGE, string3);
			GivePlayerCash(playerid, - propertytax);
		}
		else if(bizcount == 1 && housecount == 1)
		{
			new propertytax = random(10000) + 10000;//Random 20K
			BankInfo[playerid][Balance] = BankInfo[playerid][Balance] - propertytax;
			format(string3, sizeof(string3), "[Property Taxes]: You have paid $%s in property taxes.", number_format(propertytax));
    		SendClientMessage(playerid, ORANGE, string3);
			GivePlayerCash(playerid, - propertytax);
		}

   		if(IsPlayerConnected(playerid) && IsLoggedIn{playerid} == 1)
		{
			SaveBankStats(playerid);
			SaveFightStats(playerid);
			SaveSettings(playerid);
			SaveSkillLevels(playerid);
    		SaveUserStats(playerid);
    		SaveDegreeStats(playerid);
 		}
	}
	return 1;
}

ptask SetPlayersColors[1000](playerid)
{
	if(HasSpawned{playerid} == false && GetPlayerState(playerid) == PLAYER_STATE_NONE)
	{
	  	SetPlayerColor(playerid, GREY);
	  	return 1;
	}
	else if(HasSpawned{playerid} == true && GetTeam{playerid} == CLASS_CIV)
	{
	    if(IsOnduty{playerid} == 1)
		{
	  		SetPlayerColor(playerid, PURPLE);
	  		return 1;
		}
		else if(IsVIPInColorMode{playerid} == true)
		{
			SetPlayerColor(playerid, ORANGE);
	  		return 1;
		}
		else if(GetPlayerWantedLevel(playerid) == 0)
		{
			SetPlayerColor(playerid, WHITE);
	  		return 1;
		}
		else if(GetPlayerWantedLevel(playerid) >= 1 && GetPlayerWantedLevel(playerid) <= 3)
		{
			SetPlayerColor(playerid, YELLOW);
	  		return 1;
		}
		else if(GetPlayerWantedLevel(playerid) >= 4)
		{
			SetPlayerColor(playerid, RED);
		}
		return 1;
	}
	else if(HasSpawned{playerid} == true && GetTeam{playerid} == CLASS_CIA || GetTeam{playerid} == CLASS_FBI)
	{
	    if(IsOnduty{playerid} == 1)
		{
	  		SetPlayerColor(playerid, PURPLE);
	  		return 1;
		}
		else if(IsVIPInColorMode{playerid} == true)
		{
			SetPlayerColor(playerid, ORANGE);
	  		return 1;
		}
		else
		{
   			SetPlayerColor(playerid, WHITE);
     		SetPlayerWantedLevel(playerid, 0);
     	}
     	return 1;
	}
	else if(HasSpawned{playerid} == true && GetTeam{playerid} == CLASS_COPS)
	{
	    if(IsOnduty{playerid} == 1)
		{
	  		SetPlayerColor(playerid, PURPLE);
	  		return 1;
		}
		else if(IsVIPInColorMode{playerid} == true)
		{
			SetPlayerColor(playerid, ORANGE);
	  		return 1;
		}
		else
		{
      		SetPlayerColor(playerid, BLUE);
    		SetPlayerWantedLevel(playerid, 0);
    	}
    	return 1;
	}
	else if(HasSpawned{playerid} == true && GetTeam{playerid} == CLASS_ARMY)
	{
	    if(IsOnduty{playerid} == 1)
		{
	  		SetPlayerColor(playerid, PURPLE);
	  		return 1;
		}
		else if(IsVIPInColorMode{playerid} == true)
		{
			SetPlayerColor(playerid, ORANGE);
	  		return 1;
		}
		else
		{
       		SetPlayerColor(playerid, GREEN);
       		SetPlayerWantedLevel(playerid, 0);
       	}
       	return 1;
	}
	else if(HasSpawned{playerid} == true && GetTeam{playerid} == CLASS_MEDIC)
 	{
	    if(IsOnduty{playerid} == 1)
		{
	  		SetPlayerColor(playerid, PURPLE);
	  		return 1;
		}
		else if(IsVIPInColorMode{playerid} == true)
		{
			SetPlayerColor(playerid, ORANGE);
	  		return 1;
		}
		else
		{
      		SetPlayerColor(playerid, PINK);
      		SetPlayerWantedLevel(playerid, 0);
      	}
	}
	return 1;
}

ptask DecWantedLevel[180000](playerid)
{
    if(GetPlayerWantedLevel(playerid) == 0 || IsPlayerUndergoingHoldup(playerid) == 1 || IsPlayerNearLawEnforcement(playerid) == 1 || GetPlayerState(playerid) == PLAYER_STATE_NONE || HasSpawned{playerid} == false || GetTeam{playerid} != CLASS_CIV) return 1;
	else if(GetPlayerWantedLevel(playerid) >= 6)
    {
        SetPlayerWantedLevel(playerid, 5);
        SendClientMessage(playerid, RED, "[WANTED]: You have lost a wanted level [Level 5]");
        return 1;
    }
    else if(GetPlayerWantedLevel(playerid) == 5)
    {
        SetPlayerWantedLevel(playerid, 4);
        SendClientMessage(playerid, RED, "[WANTED]: You have lost a wanted level [Level 4]");
        return 1;
    }
    else if(GetPlayerWantedLevel(playerid) == 4)
    {
        SetPlayerWantedLevel(playerid, 3);
        SendClientMessage(playerid, YELLOW, "[WANTED]: You have lost a wanted level [Level 3]");
        return 1;
    }
    else if(GetPlayerWantedLevel(playerid) == 3)
    {
        SetPlayerWantedLevel(playerid, 2);
        SendClientMessage(playerid, YELLOW, "[WANTED]: You have lost a wanted level [Level 2]");
        return 1;
    }
    else if(GetPlayerWantedLevel(playerid) == 2)
    {
        SetPlayerWantedLevel(playerid, 1);
        SendClientMessage(playerid, YELLOW, "[WANTED]: You have lost a wanted level [Level 1]");
        return 1;
    }
    else if(GetPlayerWantedLevel(playerid) == 1)
    {
        SetPlayerWantedLevel(playerid, 0);
        SendClientMessage(playerid, WHITE, "[WANTED]: You have now lost your wanted level [Innocent]");
    }
    return 1;
}

task LotteryDraw[600000]()
{
	MakeNumber();
	new Winnings[MAX_PLAYERS];

	foreach(Player, i)
	{
		if(HasLotteryTicket{i} == 1)
		{
			for(new n = 0; n < 6; n++)
			{
				if(PlayersLottoNumbers[0][i] == Number[n])
				{
					Winnings[i]++;
				}
				if(PlayersLottoNumbers[1][i] == Number[n])
				{
					Winnings[i]++;
				}
				if(PlayersLottoNumbers[2][i] == Number[n])
				{
					Winnings[i]++;
				}
				if(PlayersLottoNumbers[3][i] == Number[n])
				{
					Winnings[i]++;
				}
				if(PlayersLottoNumbers[4][i] == Number[n])
				{
					Winnings[i]++;
				}
				if(PlayersLottoNumbers[5][i] == Number[n])
				{
					Winnings[i]++;
				}
			}
			format(fstr, sizeof(fstr), "[LOTTO]: Your lotto numbers are: %d, %d, %d, %d, %d, %d", PlayersLottoNumbers[0][i], PlayersLottoNumbers[1][i], PlayersLottoNumbers[2][i], PlayersLottoNumbers[3][i], PlayersLottoNumbers[4][i], PlayersLottoNumbers[5][i]);
			SendClientMessage(i, ORANGE, fstr);

			format(fstr2, sizeof(fstr2), "[DRAW]: The winning lotto numbers are: %d, %d, %d, %d, %d, %d", Number[0], Number[1], Number[2], Number[3], Number[4], Number[5]);
			SendClientMessage(i, ORANGE, fstr2);

			if(Winnings[i] == 0)
			{
				SendClientMessage(i, RED, "[LOTTO]: You got 0 lotto numbers correct.");
				SendClientMessage(i, RED, "[LOTTO]: Winnings: $0");
			}
			else if(Winnings[i] == 1)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got 1 lotto number correct.");
				SendClientMessage(i, YELLOW, "[LOTTO]: Winnings: $250K");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the lottery with 1 winning number!! - Winnings: $250K", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 250000);
			}
			else if(Winnings[i] == 2)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got 2 lotto numbers correct.");
				SendClientMessage(i, YELLOW, "[LOTTO]: Winnings: $750K");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the lottery with 2 winning numbers!! - Winnings: $750K", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 750000);
			}
			else if(Winnings[i] == 3)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got 3 lotto numbers correct.");
				SendClientMessage(i, YELLOW, "[LOTTO]: Winnings: $1M");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the lottery with 3 winning numbers!! - Winnings: $1M", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 1000000);
			}
			else if(Winnings[i] == 4)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got 4 lotto numbers correct.");
				SendClientMessage(i, YELLOW, "Winnings: $5M");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the lottery with 4 winning numbers!! - Winnings: $5M", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 5000000);
			}
			else if(Winnings[i] == 5)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got 5 lotto numbers correct.");
				SendClientMessage(i, YELLOW, "[LOTTO]: Winnings: $7M");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the lottery with 5 winning numbers!! - Winnings: $7M", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 7000000);
			}
			else if(Winnings[i] == 6)
			{
				SendClientMessage(i, LIGHTGREEN, "[LOTTO]: Congrats!, you got all of your lotto numbers correct.");
				SendClientMessage(i, YELLOW, "[LOTTO]: Winnings: $10M [MAX WIN]");
			    format(fstr3, sizeof(fstr3), "[LOTTO]: %s (%d) has won the jackpot lottery with 6 winning numbers!! - Winnings: $10M [MAX WIN]", GetName(i), i);
			    SendClientMessageToAll(ORANGE, fstr3);
				GivePlayerCash(i, 10000000);
			}
			HasLotteryTicket{i} = 0;
		}
	}
	return 1;
}

task SendElvisMSG[240000]()
{
    new RandMSG = random(sizeof(ACnR_Elvis_Mainchat_Messages));
	SendClientMessageToAll(WHITE, ACnR_Elvis_Mainchat_Messages[RandMSG]);
	return 1;
}
